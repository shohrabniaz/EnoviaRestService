/*!  COPYRIGHT DASSAULT SYSTEMES 2014   */
function SNResultMgt_Wdg(b) {
    var a = {
        widget: null,
        resources: null,
        searchcom_socket: null,
        pcs_uuid: null,
        _searchCom: null,
        events: {},
        css_view_class: "windowed",
        optionsInitDone: null,
        eventsRegistered: null,
        snTabManager: undefined,
        _widget_launch_mode: null,
        init: function(d) {
            var c = this;
            this._widget_launch_mode = "";
            this.eventsRegistered = false;
            this.optionsInitDone = false;
            c.pcs_uuid = Math.floor((Math.random() * 100000) + 1).toString();
            c.widget = d.widget;
            if (c.widget.data.reSearch) {
                this.widget.setValue("tag_filter", c.widget.data.reSearch)
            }
            if (d.events && d.events.onSNResultWdg_Ready) {
                c.events.onSNResultWdg_Ready = d.events.onSNResultWdg_Ready
            }
            c.widget.addEvent("onLoad", c.onLoad.bind(c));
            c.widget.addEvent("onResize", c.onResize.bind(c));
            c.widget.addEvent("onViewChange", c.onViewChange.bind(c));
            if (c.widget.body) {
                c.widget.body.setStyle("transform", "translateZ(0)")
            }
            this.snTabManager = null
        },
        onResize: function() {
            var c = this;
            setTimeout(function() {
                if (c.searchcom_socket) {
                    c.searchcom_socket.dispatchEvent("widgetResize")
                }
            }, 500)
        },
        onDestroy: function() {
            if (this.snTabManager
                /*!== null*/
            ) {
                this.snTabManager.destroy();
                delete this.snTabManager
            }
            if (this.searchcom_socket !== null) {
                this.searchcom_socket.removeListener("onSearchFromCompassInit");
                this.searchcom_socket.removeListener("setSelectedSource");
                this.searchcom_socket.removeListener("onSearchWdgUpd");
                this.searchcom_socket.removeListener("showAdvancedSearch");
                this.searchcom_socket.removeListener("hideAdvancedSearch");
                this.searchcom_socket.dispatchEvent("onResetMyRecent");
                this.searchcom_socket.dispatchEvent("onDestroyWidget", {
                    widget_id: this.widget.id
                }, ["searchtopbar_socket_id"]);
                this.searchcom_socket.disconnect();
                if (UWA.is(this._searchCom)) {
                    this._searchCom.deleteSocket(this.searchcom_socket.id)
                }
                delete this.searchcom_socket
            }
            this.resources = null;
            this.widget.setValue("tag_filter", "");
            this.widget = null
        },
        onLoad: function() {
            this.resources = this.widget.getValue("search_ressources");
            var e = this;
            e.widget.setValue("search_wdg_id", e.widget.id);
            var d = !UWA.is(this.resources),
                c = UWA.is(this.resources, "string") && this.resources.length < 1;
            if (d || c) {
                require(["DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchUtils"], function(i, h) {
                    if (true === d) {
                        e.widget.setValue("transient_context", true);
                        e._widget_launch_mode = h.widgetLaunchMode.COMPASS_TRANSIENT
                    } else {
                        if (true === c) {
                            e._widget_launch_mode = h.widgetLaunchMode.COMPASS_PINNED
                        }
                    }
                    e._searchCom = i;
                    e.searchcom_socket = i.createSocket({
                        socket_id: "widget_socket_" + e.widget.id,
                        widgetId: e.widget.id
                    });
                    e.searchcom_socket.addListener("onSearchFromCompassInit", function(j) {
                        if (false === e.optionsInitDone) {
                            console.log("init to do for 3DSearch from compass...");
                            e.widget.setValue("search_ressources", j.ressources);
                            e.resources = e.widget.getValue("search_ressources");
                            e.widget.setValue("activeTenant", j.ressources.active_tenant);
                            e.optionsInitDone = true;
                            e.afterResourcesInit()
                        } else {
                            console.log("init DONE for 3DSearch from compass...")
                        }
                    });
                    var f;
                    if (UWA.is(e.widget) && UWA.is(e.widget.getValue("source"))) {
                        var g = e.widget.getValue("source");
                        if (UWA.is(g) && g.length) {
                            if (g[0] === "swym") {
                                if (e.widget.context) {
                                    f = e.widget.context
                                }
                            }
                        }
                    }
                    e.searchcom_socket.dispatchEvent("onWdgCreation", {
                        widget_id: e.widget.id,
                        tabid: f,
                        transient_widget: false
                    }, ["searchtopbar_socket_id"]);
                    e.searchcom_socket.dispatchEvent("onSearchFromCompass", {
                        widget_id: e.widget.id,
                        x3dPlatformId: e.widget.data.x3dPlatformId,
                        mode: d ? "maximized" : "windowed"
                    }, ["searchtopbar_socket_id"])
                })
            } else {
                require(["DS/SNInfraUX/SearchUtils"], function(g) {
                    e._widget_launch_mode = g.widgetLaunchMode.TOPBAR_SEARCH;
                    if (UWA.is(e.widget)) {
                        var f = e.widget.getValue("customization_options");
                        var h = g.identifyClientInfo();
                        if (h.identifier === "3DSwym") {
                            e._widget_launch_mode = g.widgetLaunchMode.TOPBAR_SEARCH
                        } else {
                            if (UWA.is(f, "object") && (UWA.is(f.app_socket_id, "string") || UWA.is(f.precond, "string"))) {
                                e._widget_launch_mode = g.widgetLaunchMode.INCONTEXT_TRANSIENT
                            } else {
                                if (UWA.is(e.widget.context) && e.widget.context != "transient") {
                                    e._widget_launch_mode = g.widgetLaunchMode.PINNED
                                }
                            }
                        }
                    }
                    e.optionsInitDone = true;
                    e.afterResourcesInit()
                })
            }
        },
        afterResourcesInit: function() {
            var c = this,
                d = this.widget.getValue("settings_topbar");
            var f = false;
            if ((typeof(d) === "string") && d.length) {
                try {
                    d = JSON.parse(d)
                } catch (g) {
                    console.log("Cannot parse Topbar Settings from the preferences: " + g.toString())
                }
            } else {
                f = true
            }
            require(["UWA/Drivers/Alone", "UWA/Core", "DS/WebappsUtils/WebappsUtils", "DS/WebappsUtils/Performance"], function(i, h, j, e) {
                e.mark('{"module":"DS/SNResultUX/SNResultUX", "name":"SNResultMgt_Wdg init","uuid":"' + c.pcs_uuid + '","drilldown":"OneSearch SNResultMgt_Wdg Init"}');
                e.mark('{"module":"DS/SNResultUX/SNResultUX", "name":"load_amd","uuid":"' + c.pcs_uuid + '","status":"start","drilldown_serie_id":"OneSearch SNResultMgt_Wdg Init"}');
                require(["DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/UIKIT/Mask", "DS/UIKIT/SuperModal", "DS/SNInfraUX/SearchRessources", "DS/SNResultUX/SNTabbedResultMgt", "DS/SNInfraUX/PredicatesNLS"], function(p, q, A, o, l, n, x, w) {
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"load_amd","uuid":"' + c.pcs_uuid + '","status":"end","drilldown_serie_id":"OneSearch SNResultMgt_Wdg Init"}');
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"Preparing_Instantiation_new_SNResultMgt","uuid":"' + c.pcs_uuid + '","status":"start","drilldown_serie_id":"OneSearch SNResultMgt_Wdg Init","drilldown":"Preparing_Instantiation_new_SNResultMgt_Detail"}');
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"SearchSettings.initialize","uuid":"' + c.pcs_uuid + '","status":"start","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail"}');
                    if (UWA.is(d) && UWA.is(d.search_settings) && UWA.is(d.search_settings.topframe_search_delegation)) {
                        delete d.search_settings.topframe_search_delegation
                    }
                    p.initialize(d);
                    var m = c.widget.getValue("transient_context");
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"SearchSettings.initialize","uuid":"' + c.pcs_uuid + '","status":"end","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail"}');
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"SearchCom init","uuid":"' + c.pcs_uuid + '","status":"start","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail"}');
                    require(["DS/SNInfraUX/SearchCom"], function(E) {
                        c._searchCom = E;
                        if (!UWA.is(c.searchcom_socket)) {
                            c.searchcom_socket = E.createSocket({
                                socket_id: "widget_socket_" + c.widget.id,
                                widgetId: c.widget.id
                            })
                        }
                        c.searchcom_socket.addListener("setSelectedSource", function(F) {
                            if ((true === m || (UWA.is(c.widget._view) && UWA.is(c.widget._view) && UWA.is(c.widget._view.type) && "maximized" === c.widget._view.type)) && UWA.is(F) && UWA.is(F.value) && F.value !== "3DDashboard") {
                                var G = c.widget.getValue("search_ressources");
                                G.active_tenant = F.value;
                                c.widget.setValue("search_ressources", G);
                                c.widget.setValue("activeTenant", F.value);
                                if (UWA.is(c.snTabManager)) {
                                    c.snTabManager.setActiveTenant(F)
                                }
                            }
                        });
                        c.searchcom_socket.addListener("onSearchWdgUpd", function(J) {
                            if (UWA.is(J, "object") && UWA.is(J.refine)) {
                                J.tag_filter = J.refine;
                                J.refresh = false
                            }
                            if (m === "true" || c._isAmMaximized(J.active_tab)) {
                                if (J.value === q.SearchTypeEnum.FAVORITE_SEARCH) {
                                    J.savedSearch = true;
                                    J.searchStringToDisplayInSearchField = A.get("my_fav_searches");
                                    J.resetLocalFilter = true;
                                    J.queryType = q.SearchTypeEnum.FAVORITE_SEARCH
                                }
                                var I = true;
                                if (h.is(c.snTabManager) && h.is(J.searchType) && J.searchType === "#advancedSearch" && h.is(J.adv_search_field) && J.adv_search_field.length !== 0) {
                                    var G = c.snTabManager.getActiveAdvSearchMgr();
                                    if (h.is(G) && p.options.search_settings.taggerClosed === false) {
                                        I = false
                                    }
                                }
                                if (I === true) {
                                    var K = "SearchComServer_" + c.widget.id;
                                    if (h.is(arguments)) {
                                        if (arguments.length > 0 && h.is(arguments[1]) && h.is(arguments[1].origin) && h.is(arguments[1].origin.server)) {
                                            if (c.widget.id.indexOf("preview") !== -1 || c.widget.id.indexOf("odt") !== -1) {
                                                K = "SearchComServer"
                                            }
                                            var H = arguments[1].origin.server;
                                            I = false;
                                            if (K === H) {
                                                I = true
                                            }
                                        }
                                    }
                                }
                                if (I === true) {
                                    if (h.is(c.snTabManager) && c.snTabManager.navhistorycontextifcreateaNewTab() === true) {
                                        var F = new l({
                                            renderTo: document.body,
                                            className: "WarningNewSearch"
                                        });
                                        F.confirm(A.get("relation.NewSearch.warning"), A.get("relation.NewSearch.warningTitle"), function(L) {
                                            if (true === L) {
                                                J.removeHistory = true;
                                                c.widget.dispatchEvent("onSearch", J);
                                                if (UWA.is(c.widget.getValue("addinmode"), "string")) {
                                                    require(["DS/TransientWidget/TransientWidget"], function(M) {
                                                        M.showWidget(q.SEARCH_APP_ID, "", {})
                                                    })
                                                }
                                            }
                                        })
                                    } else {
                                        c.widget.dispatchEvent("onSearch", J);
                                        if (UWA.is(c.widget.getValue("addinmode"), "string")) {
                                            require(["DS/TransientWidget/TransientWidget"], function(L) {
                                                L.showWidget(q.SEARCH_APP_ID, "", {})
                                            })
                                        }
                                    }
                                }
                            }
                        });
                        c.searchcom_socket.addListener("showAdvancedSearch", function(G) {
                            if (h.is(c.snTabManager)) {
                                var F = c.snTabManager.getActiveTab();
                                if (UWA.is(F)) {
                                    F.showAdvancedSearch(G)
                                }
                            }
                        });
                        c.searchcom_socket.addListener("hideAdvancedSearch", function() {
                            if (h.is(c.snTabManager)) {
                                var F = c.snTabManager.getActiveTab();
                                if (UWA.is(F)) {
                                    F.hideAdvancedSearch()
                                }
                            }
                        });
                        var B;
                        if (h.is(c.widget) && h.is(c.widget.getValue("source"))) {
                            var C = c.widget.getValue("source");
                            if (h.is(C, "array") && C.length) {
                                if (C[0] === "swym") {
                                    if (c.widget.context) {
                                        B = c.widget.context
                                    }
                                }
                            }
                        }
                        c.searchcom_socket.dispatchEvent("onWdgCreation", {
                            widget_id: c.widget.id,
                            tabid: B,
                            transient_widget: m
                        }, ["searchtopbar_socket_id"]);
                        if (!f) {
                            if (c.widget) {
                                var D = c.widget.getValue("customization_options");
                                if (UWA.is(D, "object")) {
                                    if (false === D.default_with_precond) {
                                        c.searchcom_socket.dispatchEvent("onSetFocusInSearchField", {}, ["searchtopbar_socket_id"])
                                    }
                                }
                            }
                        }
                        e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"SearchCom init","uuid":"' + c.pcs_uuid + '","status":"end","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail"}')
                    });
                    c.widget.setValue("appId", q.SEARCH_APP_ID);
                    c.widget.setValue("stayOnSearch", "true");
                    c.widget.setValue("transient_context", "false");
                    c.widget.setValue("search_wdg_id", c.widget.id);
                    if (m === "true" || m === true) {
                        c.css_view_class = "maximized"
                    }
                    try {
                        if (!UWA.is(c.searchResources)) {
                            c.searchResources = new n(c.resources)
                        }
                    } catch (r) {
                        console.log("SearchRessources not initialized!")
                    }
                    var t = c.widget.getValue("customization_options");
                    if (UWA.is(t) && UWA.is(t.mode)) {
                        var v = h.clone(t);
                        delete v.mode;
                        c.widget.setValue("customization_options", v)
                    }
                    var z = c._getOriginalSearchOpts();
                    var y = (m === "false" || m === false) && UWA.is(z) ? z : c._getSearchOpts();
                    var k = undefined;
                    if (UWA.is(c.widget.getValue("pinToDashboard"))) {
                        k = c.widget.getValue("pinToDashboard")
                    }
                    c.widget.setValue("launch_mode", c._widget_launch_mode);
                    var u = {
                        search_options: y,
                        result_ux_customization: c.widget.getValue("result_ux_customization"),
                        viewData: c.widget.getValue("viewData"),
                        in_apps_search: t,
                        events: {
                            onReady: function() {
                                if (false === c.eventsRegistered) {
                                    c.eventsRegistered = true;
                                    c.widget.addEvent("onRefresh", c.onRefresh.bind(c));
                                    c.widget.addEvent("onSearch", c.onSearch.bind(c));
                                    c.widget.addEvent("onResetSearch", c.onResetSearch.bind(c));
                                    c.widget.addEvent("onSearchWithOpts", c.snTabManager.onSearch.bind(c.snTabManager));
                                    c.widget.addEvent("onViewChangeResults", c.snTabManager._onViewChange.bind(c.snTabManager));
                                    c.widget.addEvent("endEdit", c.onEndEdit.bind(c));
                                    if (UWA.is(c.events.onSNResultWdg_Ready, "function")) {
                                        c.events.onSNResultWdg_Ready.call(null)
                                    }
                                }
                                e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"new SNResultMgt","uuid":"' + c.pcs_uuid + '","status":"end","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail"}');
                                e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"Preparing_Instantiation_new_SNResultMgt","uuid":"' + c.pcs_uuid + '","status":"end","drilldown_serie_id":"SNResultMgt init"}')
                            }
                        }
                    };
                    e.mark('{"module":"DS/SNResultUX/SNResultUX","name":"new SNResultMgt","uuid":"' + c.pcs_uuid + '","status":"start","drilldown_serie_id":"Preparing_Instantiation_new_SNResultMgt_Detail","drilldown":"SNResultMgt::init"}');
                    if (!UWA.is(c.snTabManager)) {
                        var s = {
                            widget_id: c.widget.id,
                            launch_mode: c._widget_launch_mode,
                            resources: c.resources,
                            itemViewClickHandler: c.widget.getValue("itemViewClickHandler"),
                            source: c.widget.getValue("source"),
                            addinMode: c.widget.getValue("addinmode"),
                            updateTitle: function(B) {
                                if (UWA.is(c.widget)) {
                                    c.widget.setTitle(B)
                                }
                            },
                            transient_context: m,
                            use_preexisting_call: c.widget.getValue("use_preexisting_call"),
                            update_preference: function(B, C) {
                                if (c.widget) {
                                    c.widget.setValue(B, C)
                                }
                            },
                            css_view_class: c.css_view_class
                        };
                        if (h.is(c.widget) && h.is(c.widget.metas) && h.is(c.widget.metas.description, "string") && c.widget.metas.description.contains("3DSwym")) {
                            s.swymContext = true;
                            if (UWA.is(t, "object")) {
                                s.in_apps_search = t
                            }
                        }
                        if (UWA.is(c.widget.getValue("tagger_context_id"))) {
                            s.tagger_context_id = c.widget.getValue("tagger_context_id")
                        }
                        var k = undefined;
                        if (UWA.is(c.widget.getValue("pinToDashboard"))) {
                            s.pinToDashboard = c.widget.getValue("pinToDashboard")
                        }
                        c.snTabManager = new x(s);
                        c.widget.setBody(c.snTabManager)
                    }
                    c.snTabManager.addTab({
                        search_ux_options: u
                    })
                })
            })
        },
        onSearch: function(c) {
            if (!UWA.is(c)) {
                throw new Error("Invalid arg in SNResultUX.onSearch!)")
            }
            if (UWA.is(this.snTabManager) && UWA.is(this.snTabManager.getOption, "function")) {
                if (this.snTabManager.getOption("transient_context") === "false" || this.snTabManager.getOption("transient_context") === false) {
                    if (!this._getOriginalSearchOpts()) {
                        this._setOriginalSearchOpts(this._getSearchOpts())
                    }
                }
            }
            if (UWA.is(c.value)) {
                this._onSearch.call(this, c)
            } else {
                var d = this;
                require(["DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/PredefinedQueries"], function(f, e) {
                    if (f.getsearchType() === f.SearchTypeEnum.SEARCH_IN) {
                        f.executeWithPQ({
                            wait: function() {
                                if (c && c.indexOf(":") > 0) {
                                    e.fetchPQsFromServer(d.searchResources);
                                    return true
                                }
                            },
                            run: function() {
                                var g = f.replacePQsWithCVPrefixes(c);
                                d._onSearch({
                                    value: g,
                                    searchStringToDisplayInSearchField: c,
                                    searchInCriteria: g
                                })
                            }
                        })
                    }
                })
            }
        },
        _onSearch: function(h) {
            this.widget.setValue("search_criteria", h.value);
            this.widget.setValue("search_criteria_to_display", h.searchStringToDisplayInSearchField);
            this.widget.setValue("adv_search", h.adv_search);
            this.widget.setValue("advanced_criteria", h.advanced_criteria);
            this.widget.setValue("adv_search_field", h.adv_search_field);
            this.widget.setValue("tag_filter", h.tag_filter ? h.tag_filter : "");
            this.widget.setValue("recent_filter", UWA.is(h.sFilter) ? h.sFilter : "*");
            this.widget.setValue("queryType", UWA.is(h.queryType) ? h.queryType : null);
            if (UWA.is(h.source)) {
                this.widget.setValue("source", h.source)
            }
            var c = false;
            if (UWA.is(this.snTabManager)) {
                var e = this.snTabManager.getActiveTaggerProxy();
                var f = e.getCurrentFilter();
                var d = null;
                if (UWA.is(f)) {
                    d = f.allfilters
                }
                if (UWA.is(f) && UWA.is(d)) {
                    if (Object.keys(d).length !== 0) {
                        c = true
                    }
                }
            }
            if (!h.adv_search || !c) {
                var i = {};
                if (UWA.is(h)) {
                    i = UWA.clone(h)
                }
                if (UWA.is(h.refresh)) {
                    i.refresh = h.refresh
                } else {
                    i.refresh = true
                }
                var g = this._getSearchOpts(i);
                if (h.customization_options) {
                    g.in_apps_search = h.customization_options
                }
                this.widget.dispatchEvent("onSearchWithOpts", g)
            }
            this.widget.setValue("viewData", h.viewData)
        },
        onResetSearch: function(c) {
            var d = this;
            var e = this._getOriginalSearchOpts();
            if (UWA.is(e)) {
                d.widget.dispatchEvent("onSearchWithOpts", e)
            }
        },
        onRefresh: function() {
            if (this.snTabManager) {
                this.snTabManager.onRefresh()
            }
        },
        onEndEdit: function() {
            if (UWA.is(this.snTabManager)) {
                this.snTabManager.hideTabBar()
            }
            this.onLoad()
        },
        onViewChange: function(e) {
            var d = require("DS/SNInfraUX/SearchUtils");
            if (e.type === "fullscreen" || e.type === "maximized") {
                if (e.height) {
                    this._setBodyHeight(e.height)
                }
                if (UWA.is(this.snTabManager)) {
                    var c = this.snTabManager.getActiveTaggerProxy();
                    if (UWA.is(c) && UWA.is(c.getDisplayStatus, "function") && false === c.getDisplayStatus()) {
                        if (UWA.is(d)) {
                            d.setTaggerOpenedByCode(true)
                        }
                        this.searchcom_socket.dispatchEvent("openTagger")
                    }
                }
            } else {
                this._setBodyHeight("100%");
                if (UWA.is(d) && UWA.is(d.isTaggerOpenedByCode, "function") && true === d.isTaggerOpenedByCode()) {
                    this.searchcom_socket.dispatchEvent("closeTagger");
                    d.setTaggerOpenedByCode(false)
                }
            }
            if (this.searchcom_socket !== null) {
                this.searchcom_socket.dispatchEvent("onViewChange", {
                    widget_id: this.widget.id
                }, ["searchtopbar_socket_id"])
            }
            this.css_view_class = e.type;
            this.widget.dispatchEvent("onViewChangeResults", e)
        },
        _getSearchOpts: function(g) {
            var f = false;
            var d = false;
            if (UWA.is(this.widget.getValue("advanced_criteria")) && this.widget.getValue("advanced_criteria").length > 0) {
                f = true
            }
            if (UWA.is(this.widget.getValue("search_criteria")) && (this.widget.getValue("search_criteria") === "#advancedSearch")) {
                d = true
            }
            var c = this.widget.getValue("tag_filter");
            if (typeof c === "string" && c.length > 0) {
                c = JSON.parse(c)
            }
            var e = this._getOriginalSearchOpts();
            if (UWA.is(g) && g.searchType === "#search" && UWA.is(e)) {
                e.search_criteria = null
            }
            if (!d || (d && !f)) {
                return {
                    search_criteria: this.widget.getValue("search_criteria"),
                    adv_search: this.widget.getValue("adv_search"),
                    search_criteria_to_display: this.widget.getValue("search_criteria_to_display"),
                    advanced_criteria: d ? undefined : this.widget.getValue("advanced_criteria"),
                    recent_filter: this.widget.getValue("recent_filter"),
                    source: this.widget.getValue("source"),
                    search_mode: "index",
                    tag_filter: c,
                    refresh: UWA.is(g) ? g.refresh : false,
                    widget_search_criteria: (e && !d) ? e.search_criteria : undefined,
                    order_by: this.widget.getValue("order_by"),
                    order_field: this.widget.getValue("order_field"),
                    searchInCriteria: UWA.is(g) ? g.searchInCriteria : null,
                    resetLocalFilter: UWA.is(g) ? g.resetLocalFilter : null,
                    queryType: UWA.is(g) ? g.queryType : null,
                    removeHistory: UWA.is(g) ? g.removeHistory : false
                }
            } else {
                return null
            }
        },
        _getOriginalSearchOpts: function() {
            var c = this.widget.getValue("original_search_options");
            if (UWA.is(c)) {
                return {
                    search_criteria: c.search_criteria,
                    adv_search: c.adv_search,
                    search_criteria_to_display: c.search_criteria_to_display,
                    advanced_criteria: c.advanced_criteria,
                    search_mode: c.search_mode,
                    tag_filter: c.tag_filter,
                }
            } else {
                return null
            }
        },
        _setOriginalSearchOpts: function(c) {
            this.widget.setValue("original_search_options", c)
        },
        _setBodyHeight: function(c) {
            if (c) {
                if (!isNaN(c)) {
                    c += "px"
                }
                this.widget.body.setStyle("height", c)
            }
        },
        _isAmMaximized: function(c) {
            if (UWA.is(this.widget)) {
                var d = false;
                if (this.widget.getView().type === "maximized") {
                    d = true
                }
                if (UWA.is(c) && UWA.is(this.widget.context) && this.widget.context != "transient") {
                    d = false;
                    if (c === this.widget.context) {
                        d = true
                    }
                }
                return d
            }
        }
    };
    a.init(b);
    return a
}
define("DS/SNResultUX/collections/SearchCollection", ["UWA/Core", "UWA/Class/Options", "UWA/Class/Events", "DS/Utilities/Utils", "DS/WebappsUtils/Performance", "DS/WebAppsFoundations/Collections/PageableCollection", "DS/W3DXComponents/Collections/ActionsCollection", "DS/TreeModel/TreeDocument", "DS/TreeModel/TreeNodeModel", "DS/SNResultUX/models/SearchItemModel", "DS/SNInfraUX/SearchSettings", "DS/SNResultUX/utils/FederatedSearch_parse", "DS/SNInfraUX/SearchRessources", "DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchDebug", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SNVocabAccess", "UWA/Data", "DS/WAFData/WAFData", "DS/SNInfraUX/PredefinedQueries", "DS/SNInfraUX/SNUnitConversion", "DS/SNResultUX/utils/SearchCustoServices", "DS/SNResultUX/utils/SearchServices", "DS/i3DXSNDictionaryAPI/3DXSearchDictionaryAccess", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/SearchViewServices", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/SearchLogin", "DS/SNInfraUX/SearchVersioning", "DS/SNResultUX/utils/ContentLocationServices"], function(z, k, u, c, d, C, G, o, r, j, q, n, h, g, B, D, a, i, E, b, x, f, s, w, p, m, l, t, A, y, F, v) {
    var e = C.extend(k, u, B, {
        uwaClassName: "DS/SNResultUX/collections/SearchCollection",
        name: "DS_SNResultUX_collections_SearchCollection",
        model: j,
        totalCount: -1,
        snservices: "",
        search_ressources: null,
        service_parameters: null,
        _searchcom_socket: null,
        _search_in_progress: false,
        _fedSearchLabel: "",
        _pcs_uuid: 0,
        _ctx_options: null,
        _attrToRetrieve: [],
        _attrDefinition: null,
        _recentCollectionArray: null,
        jetty_server_activated: false,
        sessionResponse: null,
        sessionResponse_received: false,
        _fedsearchResp: null,
        _fedsearchOptions: null,
        _predicateIntersection: null,
        _indexingDate: null,
        _snSkeleton: null,
        _treeDocument: null,
        _NLS_ds6wg: {},
        _isResponsive: false,
        defaultOptions: {
            mode: "data",
            state: {
                firstPage: 0,
                lastPage: null,
                currentPage: 0,
                pageSize: 40,
                totalPages: null,
                totalRecords: null,
                sortKey: null,
                order: -1
            },
            queryParams: {
                currentPage: null,
                totalPages: null,
                totalRecords: null,
                pageSize: "nresults",
            }
        },
        _source: "",
        _required_predicates: ["ds6w:modified", "ds6w:created", "ds6w:label", "ds6w:identifier", "ds6w:responsible", "ds6w:type", "ds6w:description"],
        _getRequiredPredicates: function() {
            return this._required_predicates
        },
        _setTags: function(Q, O) {
            var J = this,
                T = 0,
                K = 0;
            if (UWA.is(this.options.tagger_proxy)) {
                this.log("Set the Tags on the tagger proxy");
                this.options.tagger_proxy.latest_subjectsTags = Q;
                this.options.tagger_proxy.latest_tagValues = O;
                if (!q.getOption("activate_dictionary_NLS_computation")) {
                    this.options.tagger_proxy.setTags(Q, O)
                } else {
                    var I = z.clone(Q);
                    var N = z.clone(O);
                    var S = {};
                    var U = /\w+:\w+\.\w+/;
                    var H = "";
                    if (z.is(I)) {
                        var X = Object.getOwnPropertyNames(I);
                        if (z.is(X, "array")) {
                            for (T = 0, K = X.length; T < K; T++) {
                                for (var R = 0, W = I[X[T]].length; R < W; R++) {
                                    if (v.isContentLocationActive()) {
                                        v.transformTagsValuesToDataSourceFacets(I, X, T, R)
                                    }
                                    if (z.is(I[X[T]][R]) && z.is(I[X[T]][R].sixw) && z.is(I[X[T]][R].object)) {
                                        var P = I[X[T]][R].sixw.slice(I[X[T]][R].sixw.lastIndexOf("/") + 1, I[X[T]][R].sixw.length);
                                        if (!z.is(S[P])) {
                                            S[P] = {}
                                        }
                                        var M = I[X[T]][R].object;
                                        if (z.is(M, "array")) {
                                            if (M.length > 0) {
                                                H = M[0];
                                                for (var Y = 0, V = M.length; Y < V; Y++) {
                                                    if (U.test(H)) {
                                                        H = H.slice(H.lastIndexOf(".") + 1)
                                                    }
                                                    if (v.isContentLocationActive()) {
                                                        H = v.prepareNlsPropertiesValueForServer(P, H)
                                                    }
                                                    S[P][H] = true;
                                                    if (Y < V - 1) {
                                                        H += "/" + M[Y + 1]
                                                    }
                                                }
                                            }
                                        } else {
                                            H = I[X[T]][R].object;
                                            if (U.test(H)) {
                                                H = H.slice(H.lastIndexOf(".") + 1)
                                            }
                                            S[P][H] = true
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (z.is(N, "array")) {
                        for (T = 0, K = N.length; T < K; T++) {
                            if (v.isContentLocationActive()) {
                                v.transformToDataSourceFacets(N, T)
                            }
                            if (z.is(N[T]) && z.is(N[T].sixw) && z.is(N[T].object)) {
                                var P = N[T].sixw.slice(N[T].sixw.lastIndexOf("/") + 1, N[T].sixw.length);
                                if (!z.is(N[T].dispValue, "string") || 0 === N[T].dispValue.length) {
                                    if (!z.is(S[P])) {
                                        S[P] = {}
                                    }
                                    var M = N[T].object;
                                    if (z.is(M, "array")) {
                                        if (M.length > 0) {
                                            H = M[0];
                                            for (var Y = 0, V = M.length; Y < V; Y++) {
                                                if (U.test(H)) {
                                                    H = H.slice(H.lastIndexOf(".") + 1)
                                                }
                                                if (v.isContentLocationActive()) {
                                                    H = v.prepareNlsPropertiesValueForServer(P, H)
                                                }
                                                S[P][H] = true;
                                                if (Y < V - 1) {
                                                    H += "/" + M[Y + 1]
                                                }
                                            }
                                        }
                                    } else {
                                        H = N[T].object;
                                        if (U.test(H)) {
                                            H = H.slice(H.lastIndexOf(".") + 1)
                                        }
                                        S[P][H] = true
                                    }
                                }
                            }
                        }
                    }
                    var L = Object.getOwnPropertyNames(S);
                    if (z.is(L, "array")) {
                        for (T = 0, K = L.length; T < K; T++) {
                            S[L[T]] = Object.getOwnPropertyNames(S[L[T]])
                        }
                    }
                    if (q.getOption("search_web_in_win") === true && !z.is(p._6WTagURL) && (z.is(window.COMPASS_CONFIG) && z.is(window.COMPASS_CONFIG.myAppsBaseUrl))) {
                        m.getServiceUrl({
                            serviceName: "6WTags",
                            platformId: J.search_ressources.active_tenant,
                            onComplete: function(Z) {
                                p._6WTagURL = Z;
                                J.getNlsOfPropertiesValuesSearchTag(I, N, S)
                            },
                            onFailure: function(Z) {
                                console.error("Call to PlatformServices.getServiceUrl failed !")
                            }
                        })
                    } else {
                        J.getNlsOfPropertiesValuesSearchTag(I, N, S)
                    }
                }
            } else {
                this.log("Tagger proxy not defined")
            }
        },
        _addSubjects: function(H) {
            if (UWA.is(this.options.tagger_proxy)) {
                this.log("addSubjects on the tagger proxy");
                this.options.tagger_proxy.addSubjects(H)
            } else {
                this.log("Tagger proxy not defined")
            }
        },
        _mergeOldAndNewTagValues: function(P, U, O) {
            var J = [];
            if (z.is(O) && z.is(O.allfilters)) {
                for (var R in O.allfilters) {
                    for (var M = 0; M < P.length; M++) {
                        var X = P[M];
                        if (X.sixw === R) {
                            J.push(X)
                        }
                    }
                }
            }
            if (!z.is(U)) {
                U = []
            }
            if (J.length > 0) {
                var L, I;
                var V = false;
                if (J.length > U.length) {
                    I = J;
                    L = U
                } else {
                    I = U;
                    L = J;
                    V = true
                }
                for (var K = 0; K < L.length; K++) {
                    var S = false;
                    var Q = L[K];
                    var N = Q.count;
                    Q.count = 0;
                    var W = JSON.stringify(Q);
                    Q.count = N;
                    var Y = false;
                    for (var Z = 0; Z < I.length; Z++) {
                        var aa = I[Z];
                        var T = aa.count;
                        aa.count = 0;
                        var H = JSON.stringify(aa);
                        aa.count = T;
                        if (H === W) {
                            S = true;
                            if (T === N) {
                                Y = true
                            }
                            break
                        }
                    }
                    if (S === false) {
                        I.push(L[K])
                    } else {
                        if (!V && S && !Y) {
                            I[Z] = L[K]
                        }
                    }
                }
                return I
            }
            return U
        },
        setIsAPQSearch: function(K) {
            var I = /[\s\b]*3dexp(\w+):/g;
            while (true) {
                var H = I.exec(K);
                if (!H) {
                    break
                }
                var J = H[1];
                if (x.isAPQAbbrevation(J)) {
                    if (UWA.is(this.service_parameters)) {
                        this.service_parameters.isAPQSearch = true;
                        break
                    }
                }
            }
        },
        getPQSortOrder: function(I) {
            var H;
            var T = "";
            var P = "";
            var R = /[\s\b]*3dexp(\w+):/g;
            var O = R.exec(I);
            if (!O) {
                return
            }
            var S = O[1];
            if (x.isAPQAbbrevation(S)) {
                P = x.getSortOrder(S)
            }
            if (UWA.is(P, "array")) {
                if (1 < P.length) {
                    var L = [];
                    var Q = [];
                    for (var N in P) {
                        var U = N;
                        var J = P[N];
                        for (var M in J) {
                            var V = M;
                            var K = J[M];
                            L.push(K);
                            Q.push(V)
                        }
                    }
                    H = {
                        sort_order_by: L,
                        sort_order_field: Q
                    }
                }
            } else {
                if (UWA.is(P, "object")) {
                    var L;
                    var Q;
                    L = String(Object.values(P));
                    Q = String(Object.keys(P));
                    H = {
                        sort_order_by: L,
                        sort_order_field: Q
                    }
                }
            }
            return H
        },
        setup: function(H, I) {
            var J = this;
            this.setOptions(I);
            if (UWA.is(I.service)) {
                this.log("Setup done from the skeleton => set service parameters");
                this.setRequestCriteria(I.service, I.service_parameters);
                this.setSearchRessources(I.federated_source)
            }
            this._searchcom_socket = g.createSocket({
                socket_id: "search_collection_" + Math.floor((Math.random() * 100000) + 1)
            });
            this._searchcom_socket.addListener("onSetSessionResponse", this.setSessionResponse.bind(this));
            if (I.event && I.event.onSetup) {
                I.event.onSetup.call(null, this)
            }
            if (this.service_parameters && q.getOption("apply_sort_on_modified_by_default") && !this.service_parameters.order_by) {
                this.service_parameters.order_field = "ds6w:modified";
                this.service_parameters.order_by = "desc"
            }
            return this._parent(H, I)
        },
        destroy: function() {
            this.log("Destroy the search collection");
            if (this._searchcom_socket) {
                this._searchcom_socket.removeListener("onSetSessionResponse", this.setSessionResponse.bind(this));
                this._searchcom_socket.disconnect();
                g.deleteSocket(this._searchcom_socket.id);
                this._searchcom_socket = null
            }
            this._snSkeleton = null;
            this._recentCollectionArray = null;
            this._parent()
        },
        fetch: function(P) {
            this.log("SearchCollection fetch");
            P = P || {};
            if (z.is(P.no_fetch) && P.no_fetch === true) {
                this.log("no_fetch options = true ==> No fetch done");
                if (z.is(P.onComplete, "function")) {
                    P.onComplete.call(this)
                }
                return []
            } else {
                if (!z.is(this.snservices, "string") || this.snservices === "") {
                    this.log("Service name not defined ==> No fetch done");
                    if (z.is(P.onComplete, "function")) {
                        P.onComplete.call(this)
                    }
                    return []
                } else {
                    this.pcs_uuid = d.now().toString();
                    d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"OneSearch Query","uuid":"' + this.pcs_uuid + '","drilldown":"OneSearch Query ' + this.pcs_uuid + '"}');
                    d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"fetch preparation","uuid":"' + this.pcs_uuid + '","status":"start","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}');
                    var J = '{"module":"DS/SNResultUX/collections/SearchCollection","name":"fetch preparation","uuid":"' + this.pcs_uuid + '","status":"end","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}';
                    if (!z.is(this.search_ressources)) {
                        this.log("No search source defined. No fetch done.");
                        d.mark(J);
                        if (z.is(P.onComplete, "function")) {
                            P.onComplete.call(this)
                        }
                        return
                    }
                    if (z.is(this.service_parameters) && z.is(this.service_parameters.refine) && z.is(this.service_parameters.refine.allfilters)) {
                        var K = this.service_parameters.refine.allfilters;
                        for (var N in K) {
                            if (z.is(K[N], "array") && K[N].length > 0 && z.is(K[N][0]) && z.is(K[N][0].type) && K[N][0].type === "date") {
                                delete K[N]
                            }
                        }
                    }
                    P = this.search_ressources.getFetchOptions({
                        service_name: this.snservices,
                        service_data: this.service_parameters,
                        original_options: P,
                        state: this.state,
                        context_options: this._ctx_options,
                        attributesToRetrieve: this.getAttributesToRetrieve(),
                        source: this._getSearchSource()
                    });
                    this._fedSearchLabel = this.search_ressources.getFedSearchLabel()
                }
            }
            this._search_in_progress = true;
            var M = this;
            setTimeout(function() {
                M._search_in_progress = false
            }, 15000);
            d.mark(J);
            d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"fedsearch","uuid":"' + this.pcs_uuid + '","status":"start","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}');
            var I = P.onComplete,
                O = P.onFailure;
            var L = function(Q) {
                Q.dispatchEvent("on_sync", Q);
                I.apply(this, arguments)
            };
            if (a.isFUN072117Active()) {
                var H = L;
                L = M.updateModelsWithPreferredUnits(H)
            }
            P.onComplete = function(S) {
                var Q = arguments;
                if (a.SearchTypeEnum.MY_RECENT_CONTENT === M.service_parameters.query) {
                    M._recentCollectionArray = M.toArray();
                    M.state.lastPage = 0;
                    M.state.totalPage = 1;
                    M.state.pageSize = M.totalCount;
                    if (1000 == M.totalCount) {
                        M._snSkeleton._searchActions._displayAlert({
                            message: l.replace(l.get("recent_too_many_results")),
                            className: "warning"
                        })
                    }
                    if (z.is(M._snSkeleton) && z.is(M._snSkeleton.options) && z.is(M._snSkeleton.options.observable, "object") && z.is(M._snSkeleton.options.observable._originalSearchCriteria, "string")) {
                        M.filterSearch({
                            recent_filter: M._snSkeleton.options.observable.options.search_options.recent_filter
                        })
                    }
                    return L.apply(this, arguments)
                } else {
                    if (q.getOption("activate_dictionary_NLS_computation")) {
                        var R = 0;
                        if (!z.is(M._attrDefinition)) {
                            console.error("Undefined _attrDefinition !");
                            R = 500
                        }
                        setTimeout(function() {
                            var ak = /\w+:\w+\.\w+/;
                            var al = S._models;
                            var Y = {};
                            var ae = "";
                            for (var U = 0, ap = al.length; U < ap; U++) {
                                var ao = al[U];
                                var ac = ao.pairs();
                                for (var af = 0, V = ac.length; af < V; af++) {
                                    if (!z.is(Y[ac[af][0]])) {
                                        Y[ac[af][0]] = {}
                                    }
                                    ae = ac[af][1];
                                    if (z.is(ae, "array") && ae.length > 0) {
                                        for (var aj = 0, W = ae.length; aj < W; aj++) {
                                            var ab = ae[aj];
                                            if (z.is(ab, "array") && ab.length > 0) {
                                                var aa = "";
                                                for (var ad = 0, Z = ab.length; ad < Z; ad++) {
                                                    if (0 === ad) {
                                                        aa = ab[ad]
                                                    } else {
                                                        aa += "/" + ab[ad]
                                                    }
                                                    Y[ac[af][0]][aa] = ""
                                                }
                                            } else {
                                                if (ak.test(ac[af][1][ai])) {
                                                    ac[af][1][ai] = ac[af][1][ai].slice(ac[af][1][ai].lastIndexOf(".") + 1)
                                                }
                                                Y[ac[af][0]][ac[af][1][aj]] = ""
                                            }
                                        }
                                    } else {
                                        if (z.is(ae, "string")) {
                                            if (ak.test(ac[af][1])) {
                                                ac[af][1] = ac[af][1].slice(ac[af][1].lastIndexOf(".") + 1)
                                            }
                                            Y[ac[af][0]][ac[af][1]] = ""
                                        }
                                    }
                                }
                            }
                            var ag = {};
                            var an = Object.getOwnPropertyNames(Y);
                            var am = M.getAttributesToRetrieve();
                            var T = {
                                "ds6w:label": true,
                                "ds6w:identifier": true,
                                "ds6w:description": true,
                                preview_url: true,
                                resourceid: true,
                                sourceid: true,
                                type_icon_url: true,
                                resourceid_tagger: true,
                                taxonomies: true
                            };
                            for (var ai = 0, X = an.length; ai < X; ai++) {
                                var ah = an[ai];
                                if (z.is(Y[an[ai] + "_value"]) && !z.is(T[ah]) && (z.is(M._attrDefinition[an[ai]]) && M._attrDefinition[an[ai]].type !== "date")) {
                                    ag[ah] = Object.getOwnPropertyNames(Y[an[ai] + "_value"])
                                }
                            }
                            if (q.getOption("search_web_in_win") === true && !z.is(p._6WTagURL) && (z.is(window.COMPASS_CONFIG) && z.is(window.COMPASS_CONFIG.myAppsBaseUrl))) {
                                m.getServiceUrl({
                                    serviceName: "6WTags",
                                    platformId: M.search_ressources.active_tenant,
                                    onComplete: function(aq) {
                                        p._6WTagURL = aq;
                                        M.getNlsOfPropertiesValuesSearch(S, L, Q, ag);
                                        if (z.is(M.state.currentPage) && (M.state.currentPage === 0)) {
                                            M._setTags(M._helperSubjectsTags, M._helpertagValues)
                                        }
                                    },
                                    onFailure: function(aq) {
                                        console.error("Call to PlatformServices.getServiceUrl failed !");
                                        return O.apply(this, arguments)
                                    }
                                })
                            } else {
                                M.getNlsOfPropertiesValuesSearch(S, L, Q, ag);
                                if (z.is(M.state.currentPage) && (M.state.currentPage === 0)) {
                                    M._setTags(M._helperSubjectsTags, M._helpertagValues)
                                }
                            }
                        }, R)
                    } else {
                        return L.apply(this, arguments)
                    }
                }
            };
            P.onFailure = function(Q) {
                return O.apply(this, arguments)
            };
            this._parent(P)
        },
        getFirstPageOfResults: function(H) {
            var I = this;
            y.login({
                resources: I.getSearchRessources(),
                onComplete: function() {
                    I.getFirstPage(H)
                },
                onFailure: function() {
                    I.getFirstPage(H)
                }
            })
        },
        getFirstPage: function(I) {
            if (z.is(this.service_parameters) && z.is(this.service_parameters.query) && a.SearchTypeEnum.MY_RECENT_CONTENT != this.service_parameters.query && z.is(this._recentCollectionArray)) {
                this._recentCollectionArray = null
            }
            this.initTreeDocument();
            this._resetState();
            if (q.getOption("search_web_in_win")) {
                this.sessionResponse = null;
                this.sessionResponse_received = false;
                var J = UWA.is(q.getOption("tabbed_ui_support_level"));
                this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                    notif_name: "sessionSearch",
                    notif_parameters: J ? (JSON.stringify({
                        tabID: this._snSkeleton.getOption("observable").getTabID(),
                        searchParams: this.service_parameters
                    })) : this.service_parameters
                }, "search_web_in_win")
            }
            var H = this._parent(I);
            return H
        },
        parseResponseForStateUpdate: function(M, J, L, I) {
            var H = {},
                K;
            if (this.snservices == "fed_search") {
                if (z.is(M.infos.nhits)) {
                    H.totalRecords = parseInt(M.infos.nhits)
                }
                H.totalPages = Math.ceil(H.totalRecords / L.pageSize);
                H.lastPage = H.totalPages - 1
            } else {
                if (this.snservices == "getSavedSearches") {
                    H.totalRecords = parseInt(M.searches.length);
                    H.totalPages = 1;
                    H.lastPage = 0
                }
            }
            this._search_in_progress = false;
            return H
        },
        parseRecords: function(L, I) {
            this.log("inside parseRecords");
            var J = null;
            if (q.getOption("search_web_in_win")) {
                if (this.sessionResponse_received) {
                    this.log("session_response is received, so parse the results together");
                    J = this.parseRecords2(L, I);
                    this._fedsearchResp = null;
                    this.sessionResponse = null
                } else {
                    this.log("session_response is not yet received, so we will wait for session to respond and then parse the results together");
                    this._fedsearchResp = L
                }
            } else {
                J = this.parseRecords2(L, I)
            }
            this._fedsearchOptions = I;
            var H = z.is(J) ? J.length : -1;
            var K = "";
            if (0 === H) {
                K = l.get("no_result")
            }
            if (z.is(this._snSkeleton) && z.is(this._snSkeleton._searchActions) && z.is(this._snSkeleton._searchActions.setEmptyViewMessage, "function")) {
                this._snSkeleton._searchActions.setEmptyViewMessage(K)
            }
            return J
        },
        parseRecords2: function(V, L) {
            this.log("SearchCollection parse");
            d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"fedsearch","uuid":"' + this.pcs_uuid + '","status":"end","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}');
            d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"parseRecords","uuid":"' + this.pcs_uuid + '","status":"start","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}');
            t.setFailureView(false);
            var Q = this,
                Z = null,
                H = [];
            if (this.snservices == "fed_search" || this.snservices == "fed_search_odt") {
                var X = false;
                if (UWA.is(L.url, "string") && L.url.indexOf("/recent") > 0) {
                    X = true
                }
                var ab = null,
                    K = {
                        federated_response: V,
                        isRecentSearch: X
                    };
                ab = new n(K);
                H = ab.getUserLevelAlerts();
                this.state.next_start = ab.response_infos.next_start;
                this.totalCount = ab.getMatches();
                this._attrDefinition = ab.getAttributesDefinition();
                if (H.length > 0) {
                    if (this.totalCount === 0) {
                        t.setFailureView(true)
                    }
                    if (this._isAHelper) {
                        this.parsing_alert = H
                    } else {
                        var O = {
                            service: this.snservices,
                            messages: H
                        };
                        this.dispatchEvent("failure_on_parse", O)
                    }
                }
                Z = ab.getResults();
                this._retrieveLastIndexingDate(ab);
                var N = null;
                if (q.getOption("search_web_in_win") && z.is(this.sessionResponse)) {
                    var Y = {
                        federated_response: this.sessionResponse
                    };
                    N = new n(Y);
                    var ad = 0;
                    var P = N.getResults();
                    if (z.is(P)) {
                        P.forEach(function(ag) {
                            ++ad;
                            ag.session_object = true;
                            Z.unshift(ag)
                        })
                    }
                    this.totalCount += ad
                }
                if (Z.length > 0) {
                    var S = ab.getTags();
                    var aa = S.tagsData,
                        W = S.summaryData;
                    if (this.service_parameters.query === a.SearchTypeEnum.MY_CONTENT && z.is(W)) {
                        W = w.handleMyContentTags(W)
                    }
                    if (z.is(N)) {
                        var U = N.getTags();
                        var J = U.tagsData;
                        var I = U.summaryData;
                        if (!z.is(W) || W.length == 0) {
                            W = I
                        } else {
                            if (z.is(I)) {
                                var af = [];
                                I.forEach(function(ag) {
                                    var ai = false;
                                    for (var ah = 0; ah < W.length; ah++) {
                                        if (W[ah].sixw === ag.sixw && W[ah].field === ag.field && W[ah].object === ag.object) {
                                            W[ah].count += ag.count;
                                            ai = true;
                                            break
                                        }
                                    }
                                    if (!ai) {
                                        af.push(ag)
                                    }
                                });
                                af.forEach(function(ag) {
                                    W.push(ag)
                                })
                            }
                        }
                    }
                    if (UWA.is(Q._isAHelper)) {
                        Q._helperSubjectsTags = aa;
                        Q._helpertagValues = W
                    } else {
                        var ac = Q.getTaggerProxy();
                        if (UWA.is(ac)) {
                            if (z.is(L.merge) && true === L.merge) {
                                Q._addSubjects(aa)
                            } else {
                                if (UWA.is(ac.latest_subjectsTags) && UWA.is(ac.latest_tagValues)) {
                                    aa = z.extend(ac.latest_subjectsTags, aa);
                                    var M = ac.latest_tagValues;
                                    var R = ac.getCurrentFilter();
                                    W = this._mergeOldAndNewTagValues(M, W, R)
                                }
                                Q._helperSubjectsTags = aa;
                                Q._helpertagValues = W
                            }
                            if (z.is(ac)) {
                                if (z.is(Q.service_parameters.localFilter, "object")) {}
                            }
                        }
                    }
                    if (UWA.is(this.latest_tagValues)) {
                        Q.options.tagValues = this.latest_tagValues
                    } else {
                        Q.options.tagValues = S.summaryData
                    }
                } else {
                    if (z.is(L.merge) && true === L.merge) {
                        this.log("No result found with merge")
                    } else {
                        this.log("No result found");
                        if (z.is(Q.options.tagger_proxy)) {
                            var ae = V.subjectsTags,
                                T = V.tagValues;
                            Q._helperSubjectsTags = ae;
                            Q._helpertagValues = T;
                            Q._setTags(Q._helperSubjectsTags, Q._helpertagValues)
                        }
                    }
                    UWA.Event.dispatchEvent(document, "no_result_found")
                }
            } else {
                if (this.snservices == "getSavedSearches") {
                    this.totalCount = V.searches.length;
                    Z = V.searches
                }
            }
            if (a.SearchTypeEnum.MY_RECENT_CONTENT !== this.service_parameters.query) {
                this.dispatchEvent("response_treated", {
                    data: Z,
                    rawData: true
                })
            }
            d.mark('{"module":"DS/SNResultUX/collections/SearchCollection","name":"parseRecords","uuid":"' + this.pcs_uuid + '","status":"end","drilldown_serie_id":"OneSearch Query ' + this.pcs_uuid + '"}');
            return Z
        },
        _resetState: function() {
            this.totalCount = -1;
            var H = q.getOption("results_perpage");
            if (z.is(H) && (z.typeOf(H) !== "number")) {
                H = parseInt(H)
            }
            this.state = {
                firstPage: 0,
                lastPage: null,
                currentPage: 0,
                pageSize: H,
                totalPages: null,
                totalRecords: null,
                sortKey: null,
                order: -1
            };
            this._attrDefinition = null
        },
        setSearchRessources: function(H) {
            this.search_ressources = H
        },
        getSearchRessources: function() {
            return this.search_ressources
        },
        cleanScriptSyntax: function(I) {
            var H = I;
            if (-1 != I.replace(/ /g, "").indexOf("<script")) {
                H = I.replace(/</g, "&lt;").replace(/>/g, "&gt;")
            }
            return H
        },
        setRequestCriteria: function(I, K, J) {
            this.snservices = I;
            if (z.is(K) && z.is(K.query, "string")) {
                if (K.query === a.SearchTypeEnum.FAVORITE_SEARCH) {
                    K.originalSearchCriteria = l.get("my_fav_searches");
                    K.savedSearch = true;
                    K.search_name = l.get("my_fav_searches");
                    K.queryType = a.SearchTypeEnum.FAVORITE_SEARCH
                }
                this.service_parameters = K;
                var H = this.getPQSortOrder(this.service_parameters.query);
                if (UWA.is(H, "object")) {
                    this.service_parameters.order_by = H.sort_order_by;
                    this.service_parameters.order_field = H.sort_order_field
                }
                this.setIsAPQSearch(this.service_parameters.query);
                this.service_parameters.query = this.cleanScriptSyntax(this.service_parameters.query)
            }
            this._attrToRetrieve = []
        },
        getRequestCriteria: function() {
            return {
                service_name: this.snservices,
                service_params: this.service_parameters
            }
        },
        setTaggerProxy: function(H) {
            this.options.tagger_proxy = H
        },
        getTaggerProxy: function() {
            return this.options.tagger_proxy
        },
        setSessionResponse: function(I) {
            this.log("SearchCollection setSessionResponse");
            this.sessionResponse = I;
            this.sessionResponse_received = true;
            if (!this._search_in_progress) {
                this.log("Fed search has already answered, so we will parse the fed search response now together with session response");
                var H = null;
                if (this._fedsearchResp) {
                    H = this.parseRecords2(this._fedsearchResp, this._fedsearchOptions)
                }
                if (z.is(H)) {
                    this.log("consolidatedParseRecords = " + H.length);
                    var J = this;
                    if (window.hasOwnProperty("sendNotificationWebInWin") && z.is(sendNotificationWebInWin, "function")) {
                        sendNotificationWebInWin("QueryEnd", JSON.stringify({
                            nb_results: J.totalCount,
                            collection: J
                        }))
                    }
                    H.forEach(function(K) {
                        J.unshift(K)
                    });
                    this.dispatchEvent("onSync", this, this._fedsearchResp, this._fedsearchOptions);
                    this.dispatchEvent("on_sync", this, this._fedsearchResp, this._fedsearchOptions)
                }
                this._fedsearchResp = null;
                this.sessionResponse = null
            } else {
                this.log("Fed search has NOT yet answered, so we will parse the session response when fed search response is received")
            }
        },
        hasNextPage: function() {
            if (z.is(this.service_parameters) && a.SearchTypeEnum.MY_RECENT_CONTENT === this.service_parameters.query) {
                return false
            }
            return this._parent()
        },
        setAttributesToRetrieve: function(H) {
            this._attrToRetrieve = H
        },
        getAttributesToRetrieve: function(L) {
            this._attrToRetrieve = [];
            var W = [];
            if (z.is(L) && L.length > 0) {
                W = L
            } else {
                if (z.is(this.service_parameters)) {
                    var H = {
                        isPQ: this.service_parameters.isAPQSearch ? true : false,
                        typeName: this.getPQ()
                    };
                    var J = s.getColumnCustomizationIdToUse(H);
                    if (J.length > 0) {
                        var U = "";
                        if (z.is(this.search_ressources) && z.is(this.search_ressources.getActiveTenant, "function")) {
                            U = this.search_ressources.getActiveTenant()
                        }
                        W = s.getColumnCustomizationDefinitionFromCustoId(J, U)
                    }
                }
            }
            for (var T = 0, X = W.length; T < X; T++) {
                if (z.is(W[T], "object")) {
                    var I = W[T].dataIndex;
                    this._attrToRetrieve.push(I.slice(I.lastIndexOf("/") + 1, I.length))
                }
            }
            var O = [];
            if (!z.is(L)) {
                var Y = D.getItem("DataGridColumnCusto");
                var M = [];
                var V;
                if (z.is(Y)) {
                    if (z.is(Y.activeView)) {
                        var N = Y.activeView;
                        if (z.is(Y.views)) {
                            M = Y.views
                        }
                        for (var Q = M.length - 1; Q >= 0; Q--) {
                            var P = M[Q];
                            if (P.viewId === N) {
                                V = P.viewDefinition
                            }
                        }
                        if (z.is(V)) {
                            for (var T = 0, X = V.length; T < X; T++) {
                                var R = V[T];
                                O.push(R.dataIndex)
                            }
                        }
                    }
                }
            }
            var S = this._attrToRetrieve.concat(this._getRequiredPredicates()).concat(O);
            var K = S.filter(function(ab, aa, Z) {
                return aa == Z.indexOf(ab)
            });
            return K
        },
        setSearchSource: function(H) {
            this._source = H
        },
        _getSearchSource: function() {
            return this._source
        },
        setSNSkeleton: function(H) {
            this._snSkeleton = H
        },
        getSNSkeleton: function() {
            return this._snSkeleton
        },
        getPQ: function() {
            if (!z.is(this.service_parameters.isAPQSearch) || false === this.service_parameters.isAPQSearch) {
                return null
            }
            var P = this.service_parameters.query;
            var I;
            var K;
            var O = /3dexp((\w+):[^ $)]+)/g;
            var N = O.exec(P);
            if (N) {
                var Q = N[1];
                I = x.getPQPrefix(x.isAPQSearch(Q));
                K = x.getPQName(I);
                while (N = O.exec(P)) {
                    Q = N[1];
                    var J = x.getPQPrefix(x.isAPQSearch(Q));
                    var R = x.getPQName(J);
                    if (R != K) {
                        return null
                    }
                }
            }
            var L;
            if (z.is(K, "string") && K.length > 0) {
                var L = K;
                var M = x.getPQObjFromPQPrefix(I);
                var H = x.getPQNLS();
                if (z.is(H, "object") && z.is(M, "object") && z.is(M.pqid, "string") && M.pqid.length > 0 && z.is(H[M.pqid + ".Title"], "string") && H[M.pqid + ".Title"].length > 0) {
                    L = H[M.pqid + ".Title"]
                }
            }
            return {
                pqName: K,
                pqUsed: I,
                pqNLS: L
            }
        },
        getIndexingDate: function() {
            return this._indexingDate
        },
        checkPQExpressionsForWildCardChars: function() {
            var N = this.service_parameters.query;
            var K = /[\s\b]*\w+[\s]*:/g;
            var L;
            while ((L = K.exec(N)) !== null) {
                var M = L[0].match(/\w+/g);
                if (M !== null) {
                    var H = M[0];
                    if (H.indexOf("3dexp") === 0) {
                        var H = H.substring(5, H.length);
                        if (x.isAPQAbbrevation([H])) {
                            var J = N.substring(K.lastIndex).trim();
                            var I = J.match(/^(#all|(\*)+)($|\s)/);
                            if (I) {
                                return true
                            }
                        }
                    }
                }
            }
            return false
        },
        filterSearch: function(H) {
            if (!z.is(H)) {
                throw new Error("Bad options given to SearchCollection.filterSearch !")
            }
            if (!z.is(this._recentCollectionArray)) {
                return
            }
            var K = this._recentCollectionArray.length;
            var M = H.recent_filter;
            if (!z.is(M) || M == a.SearchTypeEnum.MY_CONTENT || M == a.SearchTypeEnum.ADVANCED_SEARCH) {
                M = ""
            }
            this.service_parameters.recent_filter = M;
            this.dispatchEvent("update_title", {
                originalSearchCriteria: M
            });
            if (0 >= this._recentCollectionArray.length) {
                this.dispatchEvent("showAllMyRecent", {
                    isVisible: false
                });
                return
            }
            M = M.replace(/\*/g, "");
            M = M.toLowerCase();
            var L = function(Q) {
                var R = Q.values();
                var O = false;
                for (var P = 0, N = R.length; P < N && !O; P++) {
                    if (z.is(R[P], "string") && R[P].toLowerCase().indexOf(M) >= 0) {
                        O = true
                    }
                }
                return O
            };
            if (M.length > 0) {
                var I = this._recentCollectionArray.filter(L);
                K = I.length;
                if (0 === I.length && this._recentCollectionArray.length > 0) {
                    var J = l.replace(l.get("recent_no_filtered_result"), {
                        nbResult: "" + this._recentCollectionArray.length,
                        filterCriteria: H.recent_filter
                    });
                    if (z.is(this._snSkeleton) && z.is(this._snSkeleton._searchActions) && z.is(this._snSkeleton._searchActions.setEmptyViewMessage, "function")) {
                        this._snSkeleton._searchActions.setEmptyViewMessage(J)
                    }
                }
                this.reset(I)
            } else {
                this.initTreeDocument();
                this.reset(this._recentCollectionArray);
                M = "*"
            }
            this.state.totalRecords = K;
            this.state.pageSize = K;
            this.totalCount = K;
            if (K != this._recentCollectionArray.length) {
                this.dispatchEvent("showAllMyRecent", {
                    isVisible: true
                })
            } else {
                this.dispatchEvent("showAllMyRecent", {
                    isVisible: false
                })
            }
            this.dispatchEvent("onSync", this, this._fedsearchResp, this._fedsearchOptions);
            this.dispatchEvent("on_sync", this, this._fedsearchResp, this._fedsearchOptions);
            this.dispatchEvent("response_treated", {
                data: this._recentCollectionArray,
                rawData: false
            })
        },
        sortCollection: function(H) {
            if (a.SearchTypeEnum.MY_RECENT_CONTENT !== this.service_parameters.query) {
                throw new Error("SearchCollection.sortCollection must not be called if not in my recent content context !")
            }
            if (!z.is(H.order_field) || !z.is(H.order_by)) {
                throw new Error("Bad options given to SearchCollection.sortCollection !")
            }
            if (!z.is(this._recentCollectionArray)) {
                throw new Error("No _recentCollectionArray in SearchCollection.sortCollection !")
            }
            var L = H.order_field,
                J = H.order_by,
                K = "asc" === H.order_by ? 1 : -1,
                I = this._recentCollectionArray.comparator;
            this._recentCollectionArray.comparator = function(O, N) {
                var M = 0;
                if (O.get(L) < N.get(L)) {
                    M = K * (-1)
                } else {
                    if (O.get(L) > N.get(L)) {
                        M = K
                    }
                }
                return M
            };
            this._recentCollectionArray.sort();
            this.reset(this._recentCollectionArray);
            this.dispatchEvent("onSync", this, this._fedsearchResp, this._fedsearchOptions);
            this.dispatchEvent("on_sync", this, this._fedsearchResp, this._fedsearchOptions);
            this._recentCollectionArray.comparator = I
        },
        getFedSearchLabel: function() {
            return this._fedSearchLabel
        },
        getElementsNLS: function(H, M, J) {
            var I = this.getSearchRessources();
            var L = I.getFetchOptions({
                original_options: {
                    onComplete: function(N) {
                        try {
                            var O = JSON.parse(N)
                        } catch (P) {
                            requestSettings.onFailure(N)
                        }
                        if (M && N) {
                            return M(JSON.parse(N), J)
                        } else {
                            J()
                        }
                    },
                    onFailure: function(N) {
                        J()
                    },
                    onTimeout: function(N) {
                        J()
                    }
                },
                service_name: "GetElementsNLSNames"
            });
            L.data = H;
            try {
                b.authenticatedRequest(L.url, L)
            } catch (K) {
                requestSettings.onFailure(K)
            }
        },
        initTreeDocument: function() {
            this._treeDocument && this._treeDocument.removeRoots();
            this._treeDocument && this._treeDocument.empty();
            this._treeDocument = new o({
                useAsyncPreExpand: true,
                shouldAcceptDrag: function() {
                    return true
                },
                shouldAcceptDrop: function() {
                    return false
                }
            });
            t.setFailureView(false);
            this.dispatchEvent("onInitTreeDocument", this._treeDocument);
            return this._treeDocument
        },
        getTreeDocument: function() {
            return this._treeDocument || this.initTreeDocument()
        },
        generateTreeModel: c.debounce(function() {
            var K = this;
            var I = D.getItem("activeLargeView") || (F.isActiveWithCurrentVersion({
                R2019x: "BETA2"
            }) && !D.getItem("deactiveLargeView"));
            var J = true;
            if (J) {
                var L = t.getAllSelectClause(J);
                var H = K.getNotLoadedPredicate(L);
                if (H.length > 0) {
                    H = H.join("\r");
                    K.getElementsNLS(H, function(M) {
                        M && K.saveNLS_ds6wg(M.vocabularyElementNLSInfo);
                        K.asyncUpdateModels_predicate()
                    }, function() {
                        console.warn("not able to load predicates")
                    })
                }
                A._asyncCallToPredicatesWS(["ds6wg:PLMEntity"]).then(function() {
                    K.asyncUpdateModels_predicate()
                }, function() {
                    console.warn("not able to load predicates: ds6wg:PLMEntity")
                })
            }
            K.generateTreeModelAsync()
        }, 50),
        getNotLoadedPredicate: function(I) {
            var H = this;
            var K = [];
            var J = H.getSearchRessources();
            I.forEach(function(L) {
                if (!H._NLS_ds6wg[J.active_tenant + "/" + L]) {
                    K.push(L)
                }
            });
            return K
        },
        saveNLS_ds6wg: function(I) {
            var H = this;
            var J = H.getSearchRessources();
            I.forEach(function(K) {
                H._NLS_ds6wg[J.active_tenant + "/" + K.uri] = K
            })
        },
        asyncUpdateModels_predicate: function() {
            var H = this.getTreeDocument();
            var J = H.getRoots();
            var L = this;
            H.prepareUpdate();
            var I = {};
            var K = 0;
            J.forEach(function(N) {
                var M = L.getCollectiveViewOptions(N.options, I, L._isResponsive, K);
                L._updateModelOptions(N, M);
                K++
            });
            H.pushUpdate()
        },
        _updateModelOptions: function(J, I) {
            var H = this.getTreeDocument();
            H.prepareUpdate();
            J.updateOptions(I);
            H.pushUpdate()
        },
        getCollectiveViewOptions: function(M, J, I, O) {
            I = I || this._isResponsive;
            var N = this.getTreeDocument();
            var Q = (M.getServiceID && M.getServiceID()) || M.serviceID || "";
            var L = this.getSearchRessources();
            var P = this;
            if (!J[Q]) {
                J[Q] = t.getViewSpecs(Q, ["label", "subLabel", "description"])
            }
            var R = J[Q];
            var K = function(U) {
                var V = R[U];
                var Z = "",
                    Y = "",
                    X = "";
                var T = "";
                V.forEach(function(ac, ab) {
                    X = "";
                    T = "";
                    if (M.grid[ac] !== undefined && M.withoutHtmlTag[ac]) {
                        var aa = ac;
                        if (A.getNLSValueForPredicate(ac) === ac) {
                            if (P._NLS_ds6wg[L.active_tenant + "/" + ac]) {
                                aa = P._NLS_ds6wg[L.active_tenant + "/" + ac].nlsName
                            }
                        } else {
                            aa = A.getNLSValueForPredicate(ac)
                        }
                        if (U === "label") {
                            if (I) {
                                if (ac === "ds6w:label") {
                                    X = '<span search-item-number="' + O + '" search-item-predicate="' + ac + '" search-item-predicate-value="' + M.withoutHtmlTag[ac] + '">' + M.grid[ac] + "</span>"
                                } else {
                                    X = '<span class="onlyDisplayInLargeTileView" search-item-number="' + O + '" search-item-predicate="' + ac + '" search-item-predicate-value="' + M.withoutHtmlTag[ac] + '">' + M.grid[ac] + "</span>"
                                }
                            } else {
                                if (ac === "ds6w:label") {
                                    X = '<span search-item-number="' + O + '" search-item-predicate="' + ac + '" search-item-predicate-value="' + M.withoutHtmlTag[ac] + '">' + M.grid[ac] + "</span>"
                                }
                            }
                        } else {
                            if (ac === "ds6wg:revision" || ac === "ds6w:status") {
                                T = aa + ":"
                            }
                            X = '<span search-item-number="' + O + '" search-item-predicate="' + ac + '" search-item-predicate-value="' + M.withoutHtmlTag[ac] + '">' + M.grid[ac] + "</span>"
                        }
                        if (Z.length > 0) {
                            Z += (Z.length > 0 ? " | " : "")
                        }
                        if (X.length > 0) {
                            Z += T + X
                        }
                        if (Y.length > 0) {
                            Y += "&#10;"
                        }
                        Y += aa + ": " + M.withoutHtmlTag[ac]
                    }
                });
                if (Z == "" && V.length > 0) {
                    var S = l.get("no_access");
                    if (z.is(M)) {
                        if (UWA.is(M.isAShowOnlyObject, "function") && M.isAShowOnlyObject()) {
                            Z = S
                        } else {
                            if (M.grid.showonly !== undefined && "true" === M.grid.showonly) {
                                Z = S
                            }
                        }
                    }
                }
                var W = '<span title="' + Y + '">' + Z + "</span>";
                return W
            };
            var H = {
                label: K("label"),
                subLabel: K("subLabel"),
                icons: [M.grid.type_icon_url],
                thumbnail: M.grid.preview_url,
                description: K("description"),
                contextualMenu: "active ctx menu",
                serviceID: Q,
                useAsyncPreExpand: true,
            };
            if (true === I) {
                H.multipleTitleLineNumber = true
            }
            return H
        },
        generateTreeModelAsync: function() {
            var P = this._treeDocument || this.initTreeDocument();
            if (!z.is(P)) {
                console.warn("!UWACore.is(Treedocument)");
                return
            }
            var af = this;
            var ae = this._models;
            var Q = P.getRoots().length;
            var K = D.getItem("activeLargeView") || (F.isActiveWithCurrentVersion({
                R2019x: "BETA2"
            }) && !D.getItem("deactiveLargeView"));
            var aj = true;
            if (ae.length > Q) {
                var ao = [];
                P.prepareUpdate();
                var H = {};
                var ab = 0;
                var I = [];
                var al = [];
                if (a.SearchTypeEnum.MY_RECENT_CONTENT === af.service_parameters.query && af.service_parameters.recent_filter) {
                    I.push(af.service_parameters.recent_filter)
                } else {
                    if (true === af.service_parameters.isAPQSearch) {
                        I.push(af.service_parameters.query.replace(/3dexp.*:/g, ""))
                    } else {
                        if (z.is(af.service_parameters.search_criteria_to_display, "string") && af.service_parameters.search_criteria_to_display.length > 0) {
                            I.push(af.service_parameters.search_criteria_to_display)
                        } else {
                            if (z.is(af.service_parameters.originalSearchCriteria, "string") && af.service_parameters.originalSearchCriteria.length > 0) {
                                I.push(af.service_parameters.originalSearchCriteria)
                            } else {
                                I.push(af.service_parameters.query)
                            }
                        }
                    }
                }
                if (z.is(af.service_parameters.searchInCriteria, "string") && 0 < af.service_parameters.searchInCriteria.length) {
                    I.push(af.service_parameters.searchInCriteria);
                    if (z.is(af.service_parameters.query, "string") && 0 < af.service_parameters.query.length) {
                        I.push(af.service_parameters.query)
                    }
                }
                for (ab = I.length - 1; ab >= 0; ab--) {
                    var ad = I[ab];
                    var R = ad.split(" OR ");
                    ad = R.join("");
                    R = ad.split(" AND ");
                    ad = R.join("");
                    R = ad.split("flattenedtaxonomies:");
                    ad = R.join("");
                    R = ad.split('"');
                    if (R.length > 1 && (R.length % 2) == 1) {
                        for (var M = 0, ah = R.length; M < ah; M++) {
                            var Y = R[M];
                            if (z.is(Y, "string")) {
                                Y = Y.trim()
                            }
                            if (Y.length > 0 && Y !== "(" && Y !== ")") {
                                I.push(Y)
                            }
                        }
                        I.splice(ab, 1)
                    }
                }
                if (I.length > 1) {
                    var an = 0,
                        N = I.length,
                        ai = [],
                        J = {},
                        Y = "";
                    for (an = 0; an < N; an++) {
                        Y = I[an];
                        if (z.is(Y)) {
                            Y = Y.trim();
                            if (0 < Y.length) {
                                J[Y] = 0
                            }
                        }
                    }
                    I = Object.keys(J);
                    if (I.length > 1) {
                        I.sort(function(au, at) {
                            return (au.length < at.length)
                        })
                    }
                }
                for (var ab = 0, ap = I.length; ab < ap; ab++) {
                    var aq = I[ab].replace(/\*/g, "");
                    aq = aq.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
                    al.push(new RegExp(aq, "ig"))
                }
                for (var an = 0; an < ae.length - Q; an++) {
                    var ar = ae[Q + an];
                    var O = null;
                    if (z.is(ar)) {
                        O = ar.clone();
                        O.collection = ar.collection
                    }
                    var Z = {};
                    if (z.is(O)) {
                        O.grid = z.clone(O._attributes);
                        if (z.is(O.grid)) {
                            var ac = Object.keys(O.grid);
                            if (z.is(ac, "array")) {
                                var T = 0,
                                    W = 0;
                                for (T = 0, W = ac.length; T < W; T++) {
                                    if (z.is(O.grid[ac[T]], "array")) {
                                        O.grid[ac[T]] = O.grid[ac[T]].join(";")
                                    }
                                }
                                O.withoutHtmlTag = z.clone(O.grid);
                                for (T = 0, W = ac.length; T < W; T++) {
                                    if (ac[T].lastIndexOf("_value") !== ac[T].length - 6 && ac[T].indexOf(":") > -1) {
                                        for (var L = 0, ag = al.length; L < ag; L++) {
                                            var X = O.grid[ac[T]];
                                            if (z.is(X)) {
                                                X = X.replace(al[L], '<span class="highlightedSearchCriteria">$&</span>')
                                            }
                                            O.grid[ac[T]] = X
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (z.is(O) && UWA.is(O.isAShowOnlyObject, "function") && O.isAShowOnlyObject()) {
                        var U = this.getAttributesToRetrieve();
                        if (Array.isArray(U) && U.length > 0) {
                            for (var ak = 0; ak < U.length; ak++) {
                                var V = U[ak];
                                if (!O.grid.hasOwnProperty(V)) {
                                    var am = l.get("no_access");
                                    O.grid[V] = '<span class="NoAccessSearchCriteria">' + am + "</span>"
                                }
                            }
                        }
                    }
                    var aa = af.getCollectiveViewOptions(O, H, aj, an);
                    Object.assign(O, aa);
                    var S = new r(O);
                    P.addRoot(S)
                }
                P.pushUpdate()
            }
            return new Promise(function(au, at) {
                au()
            })
        },
        getNlsOfPropertiesValuesSearchTag: function(I, H, K) {
            var J = this;
            p.getNlsOfPropertiesValues(JSON.stringify(K), {
                tenantId: J.search_ressources.active_tenant,
                lang: a.getLanguage(),
                TagURL6WId: p._6WTagURL,
                onComplete: function(af) {
                    if (v.isContentLocationActive()) {
                        v.transformNlsPropertiesValue(af)
                    }
                    if (z.is(I)) {
                        var ad = Object.getOwnPropertyNames(I);
                        if (z.is(ad, "array")) {
                            for (var aa = 0, Q = ad.length; aa < Q; aa++) {
                                for (var Y = 0, ac = I[ad[aa]].length; Y < ac; Y++) {
                                    if (z.is(I[ad[aa]][Y]) && z.is(I[ad[aa]][Y].sixw) && z.is(I[ad[aa]][Y].object)) {
                                        var W = I[ad[aa]][Y].sixw.slice(I[ad[aa]][Y].sixw.lastIndexOf("/") + 1, I[ad[aa]][Y].sixw.length);
                                        if (z.is(af) && z.is(af[W]) && z.is(I[ad[aa]][Y].object)) {
                                            var U = I[ad[aa]][Y].object;
                                            if (z.is(U, "array")) {
                                                if (U.length > 0) {
                                                    var V = U[0],
                                                        L = "";
                                                    for (var ag = 0, ab = U.length; ag < ab; ag++) {
                                                        if (v.isContentLocationActive()) {
                                                            V = v.prepareNlsPropertiesValueForServer(W, V)
                                                        }
                                                        L = af[W][V];
                                                        if (L === V) {
                                                            L = U[ag]
                                                        }
                                                        I[ad[aa]][Y].dispValue[ag] = L;
                                                        if (ag < ab - 1) {
                                                            V += "/" + U[ag + 1]
                                                        }
                                                    }
                                                }
                                            } else {
                                                I[ad[aa]][Y].dispValue = af[W][I[ad[aa]][Y].object]
                                            }
                                        } else {
                                            console.warn("Pb with " + W)
                                        }
                                    }
                                }
                            }
                        }
                        if (z.is(H, "array")) {
                            var O = {},
                                T = {};
                            for (var aa = 0, Q = H.length; aa < Q; aa++) {
                                if (z.is(H[aa])) {
                                    var W = H[aa].sixw.slice(H[aa].sixw.lastIndexOf("/") + 1, H[aa].sixw.length);
                                    if (z.is(af) && z.is(af[W]) && z.is(H[aa].object)) {
                                        var U = H[aa].object;
                                        if (z.is(U, "array")) {
                                            if (U.length > 0) {
                                                var V = U[0],
                                                    L = "";
                                                H[aa].dispValue = [];
                                                for (var ag = 0, ab = U.length; ag < ab; ag++) {
                                                    if (v.isContentLocationActive()) {
                                                        V = v.prepareNlsPropertiesValueForServer(W, V)
                                                    }
                                                    L = af[W][V];
                                                    if (L === V) {
                                                        L = U[ag]
                                                    }
                                                    H[aa].dispValue[ag] = L;
                                                    if (ag < ab - 1) {
                                                        V += "/" + U[ag + 1]
                                                    }
                                                }
                                            }
                                        } else {
                                            H[aa].dispValue = af[W][H[aa].object]
                                        }
                                        if ("ds6w:status" === W) {
                                            if (z.is(O[H[aa].dispValue])) {
                                                O[H[aa].dispValue].push({
                                                    index: aa,
                                                    object: H[aa].object
                                                })
                                            } else {
                                                O[H[aa].dispValue] = [{
                                                    index: aa,
                                                    object: H[aa].object
                                                }]
                                            }
                                        } else {
                                            if ("ds6w:policy" === W) {
                                                T[H[aa].object] = H[aa].dispValue
                                            }
                                        }
                                    } else {
                                        console.warn("Pb with " + W)
                                    }
                                }
                            }
                            var S = Object.getOwnPropertyNames(O);
                            for (var P = 0, Z = S.length; P < Z; P++) {
                                if (O[S[P]].length > 1) {
                                    for (var X = 0, N = O[S[P]].length; X < N; X++) {
                                        var M = O[S[P]][X].object;
                                        var ae = O[S[P]][X].object.split(".");
                                        if (z.is(ae, "array") && ae.length > 1) {
                                            if (z.is(ae[0], "string") && z.is(T[ae[0]])) {
                                                M = T[ae[0]]
                                            }
                                        }
                                        var R = O[S[P]][X].object.split(".");
                                        H[O[S[P]][X].index].dispValue += " (" + M + ")"
                                    }
                                }
                            }
                        }
                        J.options.tagger_proxy.setTags(I, H);
                        J._setTagsPredicates(H)
                    }
                },
                onFailure: function() {
                    console.error("Failure calling DS/i3DXSNDictionaryAPI/3DXSearchDictionaryAccess.getNlsOfPropertiesValues !", arguments);
                    J.options.tagger_proxy.setTags(I, H);
                    J._setTagsPredicates(H)
                }
            })
        },
        getNlsOfPropertiesValuesSearch: function(K, L, I, J) {
            var H = this;
            p.getNlsOfPropertiesValues(JSON.stringify(J), {
                tenantId: H.search_ressources.active_tenant,
                lang: a.getLanguage(),
                TagURL6WId: p._6WTagURL,
                onComplete: function(Z) {
                    var U = K._models;
                    H.log("getNlsOfPropertiesValuesSearch response:" + Z);
                    var ac = Object.getOwnPropertyNames(Z);
                    var V = /\w+:\w+\.\w+/;
                    for (var P = 0, N = U.length; P < N; P++) {
                        for (var aa = 0, Q = ac.length; aa < Q; aa++) {
                            var Y = U[P]._attributes[ac[aa]];
                            if (z.is(Y, "array")) {
                                for (var X = 0, S = Y.length; X < S; X++) {
                                    var M = U[P]._attributes[ac[aa] + "_value"][X];
                                    var T = "";
                                    if (!z.is(M, "array")) {
                                        if (V.test(M)) {
                                            M = M.slice(M.lastIndexOf(".") + 1)
                                        }
                                        if (Z[ac[aa]]) {
                                            T = Z[ac[aa]][M]
                                        }
                                    } else {
                                        var W = [];
                                        var R = M;
                                        for (var ab = 0, O = R.length; ab < O; ab++) {
                                            if (0 === ab) {
                                                M = R[ab]
                                            } else {
                                                M += "/" + R[ab]
                                            }
                                            W.push(M)
                                        }
                                        for (ab = 0, O = W.length; ab < O; ab++) {
                                            if (ab > 0) {
                                                T += "/"
                                            }
                                            T += Z[ac[aa]][W[ab]]
                                        }
                                    }
                                    if (z.is(T, "string")) {
                                        if (0 !== T.indexOf("emxFramework.Range.")) {
                                            U[P]._attributes[ac[aa]][X] = a.escapeHtml(T)
                                        }
                                    } else {
                                        console.error("Error, bad response from getNlsOfPropertiesValuesSearch !")
                                    }
                                }
                            } else {
                                if (z.is(Y, "string")) {
                                    var M = U[P]._attributes[ac[aa] + "_value"];
                                    if (V.test(M)) {
                                        M = M.slice(M.lastIndexOf(".") + 1)
                                    }
                                    if (Z[ac[aa]]) {
                                        T = Z[ac[aa]][M]
                                    }
                                    if (z.is(T, "string")) {
                                        if (0 !== T.indexOf("emxFramework.Range.")) {
                                            U[P].set(ac[aa], a.escapeHtml(T))
                                        }
                                    } else {
                                        console.error("Error, bad response from getNlsOfPropertiesValuesSearch !")
                                    }
                                }
                            }
                        }
                    }
                    return L.apply(this, I)
                },
                onFailure: function() {
                    console.error("Failure when calling 3DXSearchDictionaryAccess.getNlsOfPropertiesValuesSearch => Unable to retrieve NLS !");
                    return L.apply(this, I)
                }
            })
        },
        _setTagsPredicates: function(M) {
            if (!z.is(M, "array")) {
                return
            }
            if (z.is(this.options.tagger_proxy.setPredicates, "function")) {
                var L = q.getOption("relevant_tags");
                var J = "";
                var K = q.getOption("alwaysEnableFreeInputInTagger");
                for (var I = 0, H = M.length; I < H; I++) {
                    if (z.is(M[I]) && z.is(M[I].sixw)) {
                        J = a.getURIToUse(M[I].sixw);
                        if (z.is(J) && J.length > 0) {
                            if (!z.is(L[J])) {
                                L[J] = {}
                            }
                            if (!z.is(L[J].allowFreeInput)) {
                                L[J].allowFreeInput = true
                            }
                            if (true !== K && true === L[J].allowFreeInput) {
                                if (M[I].dispValue !== M[I].object) {
                                    L[J].allowFreeInput = false
                                }
                            }
                        }
                    }
                }
                this.options.tagger_proxy.setPredicates(L)
            }
        },
        _retrieveLastIndexingDate: function(J) {
            this._indexingDate = null;
            if (z.is(J) && z.is(J.response_infos) && z.is(J.response_infos.sources, "array")) {
                var K = {};
                for (var I = 0, H = J.response_infos.sources.length; I < H; I++) {
                    var M = J.response_infos.sources[I];
                    if (UWA.is(M, "object") && UWA.is(M.indexingDate, "object")) {
                        K[M.name] = M.indexingDate
                    }
                }
                if (UWA.is(K["3dspace"])) {
                    this._indexingDate = K["3dspace"]
                } else {
                    if (UWA.is(K.drive)) {
                        this._indexingDate = K.drive
                    } else {
                        var L = Object.keys(K);
                        if (L.length > 0) {
                            this.log("no indexingDate info found for 3dspace or drive source, taking the info available for " + L[0]);
                            this._indexingDate = K[L[0]]
                        } else {
                            this.log("no indexingDate info found in the FedSearch response")
                        }
                    }
                }
            }
        },
        updateModelsWithPreferredUnits: function(J) {
            var I = this;
            var H = function(P) {
                var L = this;
                var M = arguments;
                var K = function(R) {
                    var Q = {};
                    R.forEach(function(S) {
                        var T = S.keys();
                        T.forEach(function(U) {
                            if (/ds6wg:\w+\.\w+/.test(U) && S.get(U + "_value")) {
                                var V = Q[U];
                                if (!V) {
                                    Q[U] = [];
                                    V = Q[U]
                                }
                                V.push(S.get(U + "_value"))
                            }
                        })
                    });
                    return Q
                };
                var N = function(R, Q) {
                    R.forEach(function(S) {
                        var T = S.keys();
                        T.forEach(function(V) {
                            if (V.startsWith("ds6wg:")) {
                                var X = Q[V];
                                if (X) {
                                    var U = S.get(V + "_value");
                                    var W = X[U];
                                    if (W) {
                                        S.set(V, W)
                                    }
                                }
                            }
                        })
                    })
                };
                var O = K.call(undefined, P._models);
                f.setResources(I.search_ressources);
                f.convertValues({
                    toPreferredUnit: true,
                    data: O,
                    callback: function(Q) {
                        N.call(undefined, P._models, Q);
                        if (J) {
                            return J.apply(L, M)
                        }
                    }
                })
            };
            if (J) {
                return H
            } else {
                H.call(this, {
                    _models: this.toArray()
                })
            }
        },
        getSocketID: function() {
            if (UWA.is(this._searchcom_socket)) {
                return this._searchcom_socket.id
            }
        }
    });
    return e
});
define("DS/SNResultUX/utils/SearchServices", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/UIKIT/Alert", "DS/SNInfraUX/ServiceDelegationLoader", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", ], function(UWACore, UWAClass, UWADebug, UWAEvents, SearchSettings, SearchUtils, Alert, ServiceDelegationLoader, nlsKeys) {
    var SearchServices = UWAClass.singleton(UWAEvents, UWADebug, {
        name: "DS_SNResultUX_utils_SearchServices",
        attributeToFilterForExport: ["id", "type_icon_url", "preview_url", "actions", "resourceid", "resourceid_tagger", "actions"],
        globalActions: ["exportToCmd", "print", "save_search", "refresh_search", "kpi_pcs_action", "Grid_Custo"],
        current_collection: null,
        odtMode: false,
        informationPanel: undefined,
        previewPanel: undefined,
        no_result: false,
        _previousSlice: {
            start: -1,
            end: -1
        },
        init: function() {
            this.setDebugMode(SearchSettings.getDebugMode())
        },
        setPreviousSlice: function(first, last) {
            this._previousSlice.start = first;
            this._previousSlice.end = last
        },
        resetPreviousSlice: function() {
            this._previousSlice.start = -1;
            this._previousSlice.end = -1
        },
        isEqualPreviousSlice: function(first, last) {
            if (this._previousSlice.start === first && this._previousSlice.end === last) {
                return true
            } else {
                return false
            }
        },
        getinformationPanel: function() {
            if (this.informationPanel === undefined) {
                this.informationPanel = SearchSettings.getOption("informationsPanel")
            }
            return this.informationPanel
        },
        getpreviewPanel: function(options) {
            var that = this;
            if (that.previewPanel === undefined) {
                that.previewPanel = SearchSettings.getOption("previewPanel")
            }
            if (that.previewPanel === true) {
                if (UWACore.is(options) && UWACore.is(options.widgetId) && UWACore.is(UWACore.Widgets) && UWACore.is(UWACore.Widgets.instances)) {
                    UWACore.Widgets.instances.forEach(function(elem) {
                        if (elem.id === options.widgetId) {
                            var addinmodeValue = elem.getValue("addinmode");
                            if (UWACore.is(addinmodeValue)) {
                                if (addinmodeValue === "catiav5") {
                                    that.previewPanel = false
                                }
                            }
                        }
                    })
                }
            }
            return that.previewPanel
        },
        setODTMode: function(ODTMode) {
            this.odtMode = ODTMode
        },
        downloadFile: function(strData, strFileName, strMimeType) {
            var D = document,
                a = D.createElement("a");
            if (!UWACore.is(strData)) {
                return
            }
            if (!UWACore.is(strFileName)) {
                return
            }
            if (!UWACore.is(strMimeType)) {
                return
            }
            strMimeType = strMimeType || "application/octet-stream";
            if (navigator.msSaveBlob && !this.odtMode) {
                return navigator.msSaveBlob(new Blob([strData], {
                    type: strMimeType
                }), strFileName)
            }
            var BOMChar = "\uFEFF";
            if ("download" in a) {
                a.href = "data:" + strMimeType + ";charset=UTF-8," + BOMChar + encodeURIComponent(strData);
                a.setAttribute("download", strFileName);
                a.innerHTML = "downloading...";
                D.body.appendChild(a);
                setTimeout(function() {
                    a.click();
                    D.body.removeChild(a)
                }, 66);
                return true
            }
            var f = D.createElement("iframe");
            D.body.appendChild(f);
            f.src = "data:" + strMimeType + ";charset=UTF-8," + BOMChar + encodeURIComponent(strData);
            setTimeout(function() {
                D.body.removeChild(f)
            }, 333);
            return true
        },
        _displayAlert: function(options) {
            if (!UWACore.is(options) || !UWACore.is(options.message)) {
                throw ("E_INVALIDARG: bad options given to _displayAlert method !")
            }
            var alertContainer = null;
            if (UWACore.is(options.widgetId) && UWACore.is(UWACore.Widgets) && UWACore.is(UWACore.Widgets.instances)) {
                UWACore.Widgets.instances.forEach(function(elem) {
                    if (elem.id === options.widgetId) {
                        alertContainer = UWACore.extendElement(elem.elements.body).getElement(".onesearch_results")
                    }
                })
            } else {
                alertContainer = UWACore.extendElement(document.body).getElement(".onesearch_results");
                if (!UWACore.is(alertContainer)) {
                    return
                }
            }
            var message = options.message;
            var className = "primary";
            if (UWACore.is(options.className, "string")) {
                className = options.className
            }
            if (!UWACore.is(alertContainer)) {
                alertContainer = UWACore.extendElement(document.body).getElement(".onesearch_results")
            }
            var alertOpts = {
                visible: true,
                autoHide: className.indexOf("success") > -1 ? true : false,
                hideDelay: 4000,
                closable: true,
                messages: [{
                    message: message,
                    className: className
                }],
                attributes: {
                    id: "search-alert"
                }
            };
            if (UWACore.is(options.events)) {
                alertOpts.events = options.events
            }
            if (UWACore.is(this.skeleton)) {
                if (this.skeleton._alert) {
                    this.skeleton._alert.destroy();
                    this.skeleton._alert = null
                }
                this.skeleton._alert = new Alert(alertOpts).inject(alertContainer, "top")
            } else {
                new Alert(alertOpts).inject(alertContainer, "top")
            }
        },
        setDragData: function(event, info) {
            var that = this;
            if (UWACore.is(event) && UWACore.is(info)) {
                var draggedItemModels = info.draggedModels;
                if (UWACore.is(draggedItemModels, "array")) {
                    var isWebInWin = UWACore.is(SearchSettings.getOption("search_web_in_win")) ? SearchSettings.getOption("search_web_in_win") : false;
                    var data = {
                        protocol: "3DXContent",
                        version: "1.1",
                        source: SearchUtils.SEARCH_APP_ID,
                        widgetId: info.widgetId,
                        data: {
                            items: []
                        }
                    };
                    var draggedItems = [];
                    var draggedItems_short = [];
                    draggedItemModels.forEach(function(itemModel) {
                        var object = {
                            envId: itemModel.getPlatformID(),
                            serviceId: itemModel.getServiceID(),
                            contextId: "",
                            objectId: itemModel.id,
                            objectType: (itemModel.get("ds6w:type_value")) ? itemModel.get("ds6w:type_value") : itemModel.get("ds6w:what/ds6w:type_value"),
                            displayName: itemModel.get("ds6w:label"),
                            displayType: (itemModel.get("ds6w:type")) ? itemModel.get("ds6w:type") : itemModel.get("ds6w:what/ds6w:type")
                        };
                        if (isWebInWin) {
                            object.session_object = itemModel.hasOwnProperty("session_object")
                        }
                        draggedItems_short.push('"' + object.displayName + '"');
                        draggedItems.push(object)
                    });
                    console.log("number of dragged objects " + draggedItems.length);
                    data.data.items = draggedItems;
                    if (event.dataTransfer && event.dataTransfer.setData) {
                        event.dataTransfer.setData("text", JSON.stringify(data));
                        var isIE =
                            /*@cc_on!@*/
                            false || !!document.documentMode;
                        var isEdge = !isIE && !!window.StyleMedia;
                        var Ms = isIE || isEdge;
                        if (!Ms) {
                            event.dataTransfer.setData("shortData", JSON.stringify(draggedItems_short))
                        }
                        try {
                            event.dataTransfer.setData("text/searchitems", JSON.stringify(data))
                        } catch (error) {
                            console.log("event.dataTransfer.setData DOES NOT accept text/searchitems")
                        }
                        if (isWebInWin) {
                            event.dataTransfer.setData("text/plain", JSON.stringify(data))
                        }
                        event.dataTransfer.effectAllowed = "all"
                    }
                }
            }
        },
        setCookie: function(cookieName, selectedObjectId, exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
            var expires = "expires=" + d.toGMTString();
            document.cookie = cookieName + "=" + selectedObjectId + ";" + expires + ";path=/";
        },
        buildCompassSelectionData: function(info) {
            var data = {};
            if (UWACore.is(info)) {
                var selectedItemModels = info.selectedModels;
                if (UWACore.is(selectedItemModels, "array")) {
                    data = {
                        protocol: "3DXContent",
                        version: "1.1",
                        source: SearchUtils.SEARCH_APP_ID,
                        widgetId: info.widgetId,
                        data: {
                            items: []
                        }
                    };
                    var selectedItems = [];
                    selectedItemModels.forEach(function(itemModel) {
                        var object = {
                            envId: itemModel.getPlatformID(),
                            serviceId: itemModel.getServiceID(),
                            contextId: "",
                            objectId: itemModel.id,
                            objectType: (itemModel.get("ds6w:type_value")) ? itemModel.get("ds6w:type_value") : itemModel.get("ds6w:what/ds6w:type_value"),
                            displayName: itemModel.get("ds6w:label"),
                            displayIdentifier: itemModel.get("ds6w:identifier") ? itemModel.get("ds6w:identifier") : itemModel.get("ds6w:what/ds6w:identifier"),
                            displayType: (itemModel.get("ds6w:type")) ? itemModel.get("ds6w:type") : itemModel.get("ds6w:what/ds6w:type")
                        };
                        selectedItems.push(object)
                    });
                    var selectedObjectIds = new Array();
                    for (var i = 0; i < selectedItems.length; ++i) {
                        var temp = selectedItems[i].objectId;
                        selectedObjectIds.push(temp);
                    }

                    this.setCookie("OBJECTID", '', -1);
                    this.setCookie("OBJECTID", selectedObjectIds, 1);
                    if (selectedObjectIds.length === 1) {
                        this.setCookie("selectedItems", JSON.stringify(selectedItems[0]), 1);
                    }

                    console.log("number of selected objects " + selectedItems.length);
                    data.data.items = selectedItems
                }
            }
            return data
        },
        handleMyContentTags: function(tagValues) {
            var typeCount = 0,
                favoriteSearches = 0,
                favoriteContent = 0;
            var categoryValues = [];
            for (var t = 0; t < tagValues.length; t++) {
                if (tagValues[t].sixw === "ds6w:what/ds6w:type") {
                    typeCount += tagValues[t].count;
                    var typeName = tagValues[t].object;
                    if (typeName === "PLMWspFavoriteSearch" || typeName === "SavedSearch") {
                        favoriteSearches += tagValues[t].count
                    } else {
                        if (typeName === "PLMWspFavoriteAuthoring" || typeName === "PLMWspFavoriteNavigation") {
                            favoriteContent += tagValues[t].count
                        }
                    }
                }
            }
            var myOtherContent = typeCount - favoriteSearches - favoriteContent;
            if (myOtherContent > 0) {
                var myOtherContent = {
                    count: myOtherContent,
                    dispValue: nlsKeys.get("myContent_otherThanFav"),
                    field: "implicit",
                    object: "#myOtherContent",
                    sixw: "ds6w:what/ds6w:category",
                    type: "string"
                };
                tagValues.push(myOtherContent)
            }
            if (favoriteSearches > 0) {
                var myFavoriteSearches = {
                    count: favoriteSearches,
                    dispValue: nlsKeys.get("myContent_searchFav"),
                    field: "implicit",
                    object: "#myFavoriteSearches",
                    sixw: "ds6w:what/ds6w:category",
                    type: "string"
                };
                tagValues.push(myFavoriteSearches)
            }
            if (favoriteContent > 0) {
                var myFavoriteSearches = {
                    count: favoriteContent,
                    dispValue: nlsKeys.get("myContent_otherFav"),
                    field: "implicit",
                    object: "#myFavoriteContent",
                    sixw: "ds6w:what/ds6w:category",
                    type: "string"
                };
                tagValues.push(myFavoriteSearches)
            }
            return tagValues
        },
        getRelations: function(options) {
            if (UWA.is(options, "object")) {
                var model = options.model;
                if (UWA.is(model, "object") && UWA.is(options.onComplete, "function") && UWA.is(options.onFailure, "function")) {
                    ServiceDelegationLoader.load({
                        serviceID: model.getServiceID(),
                        platformID: model.getPlatformID()
                    }).then(function(serviceDelegation) {
                        if (UWA.is(serviceDelegation.getRelations, "function")) {
                            serviceDelegation.getRelations({
                                model: model,
                                onComplete: options.onComplete,
                                onFailure: options.onFailure
                            })
                        } else {
                            options.onFailure.call(undefined, "service delegation not implemented")
                        }
                    }, function() {
                        options.onFailure.call(undefined, "service delegation not found")
                    })
                }
            }
        }
    });
    return SearchServices
});
define("DS/SNResultUX/utils/SNResultTypeCustoHelper", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Options", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SNSearchTypeCusto", "DS/SNInfraUX/PredefinedQueries"], function(d, h, b, f, e, g, a) {
    var c = h.singleton(b, f, {
        init: function(i) {},
        getAdvancedSearchCustoTypeList: function(m, k, j) {
            var i = g.getTypeCusto();
            if (d.is(i)) {
                if (d.is(k)) {
                    var l = k.filter(function(n) {
                        if (i[n.uri]) {
                            return true
                        }
                    })
                } else {
                    l = this.buildFromCustoTypeList(i, j)
                }
                return l
            } else {
                if (UWA.is(j) && UWA.is(j.onFailure) && UWA.is(j.onFailure, "function")) {
                    j.onFailure.call(this)
                }
            }
            return k
        },
        getAdvancedSearchCustoInterfaceList: function(l, i) {
            var j = g.getTypeCusto();
            if (d.is(j)) {
                var n = j[l];
                var k = n.interfaceURIs;
                if (k && k.length > 0) {
                    var m = i.filter(function(o) {
                        if (k.indexOf(o.name) >= 0) {
                            return true
                        }
                    });
                    return m
                }
            }
            return i
        },
        getGlobalSearchTypeCustoQuery: function(j) {
            if (d.is(j)) {
                if (!(j.trim().length == 0 || j === e.SearchTypeEnum.ADVANCED_SEARCH || j === e.SearchTypeEnum.MY_CONTENT || j === e.SearchTypeEnum.MY_RECENT_CONTENT || 0 == j.indexOf(e.SearchTypeEnum.SIMILAR_SEARCH))) {
                    if (!(a.isAPrefixedPQSearch(j) || a.isAPQSearch(j) || j.indexOf("flattenedtaxonomies:") >= 0 || j.indexOf("type:") >= 0)) {
                        var i = g.getSearchTypeCustoQuery();
                        if (i.length > 0) {
                            return " AND (" + i + ")"
                        }
                    }
                }
            }
        },
        buildFromCustoTypeList: function(i, j) {
            var l = [];
            if (!d.is(i)) {
                return l
            }
            var k = {};
            k.onComplete = function(q) {
                for (var p in i) {
                    var m = p.split(":");
                    if (m[0] == j.vocabId) {
                        var n = q[m[1]];
                        var o = {
                            "abstract": false,
                            description: "",
                            name: m[1],
                            nlsName: n.nlsName,
                            type: i[p].typeRef,
                            uri: p
                        };
                        l.push(o)
                    }
                }
                if (UWA.is(j) && UWA.is(j.onComplete) && UWA.is(j.onComplete, "function")) {
                    j.onComplete.call(this, l)
                }
            };
            k.onFailure = function() {
                if (UWA.is(j) && UWA.is(j.onFailure) && UWA.is(j.onFailure, "function")) {
                    j.onFailure.call(this)
                }
            };
            g.getSearchTypeCustoListNLSNames(k)
        }
    });
    return c
});
define("DS/SNResultUX/utils/ResultUX_customization", ["DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Options", "UWA/Class/Collection", "DS/WebappsUtils/Performance", "require"], function(e, f, i, j, h, c, d, a, g) {
    var b = j.singleton(c, h, {
        _type_customization: {},
        _skeleton_facets: [],
        _actions_customization: null,
        _addin_mode: null,
        _other_ux_options: {},
        init: function(k) {
            this.setDebugMode(e.getDebugMode());
            this._actions_customization = new d();
            this._actions_customization_modules = new d();
            this._check_type_inheritance = e.getOption("add_taxonomies_in_select_clause") === true
        },
        addCustomization: function(m, r) {
            var n = this,
                q = m.SearchCustomization,
                p = 0,
                o = a.now().toString();
            a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization","uuid":"' + o + '","status":"start","drilldown_serie_id":"ResultUX_customization::addCustomization","drilldown":"ResultUX_customization::addCustomization-Detail"}');

            function l(u, x) {
                var w = false,
                    t = false,
                    v = false;

                function s() {
                    if (v === true && w === true && t === true) {
                        p++;
                        if (i.is(q) === false || (p === q.length)) {
                            a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization"}');
                            x.call(null)
                        }
                    }
                }
                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadTypeCustomization","uuid":"' + o + '","status":"start","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                n._loadTypeCustomization(u.type_customization, function() {
                    a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadTypeCustomization","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                    v = true;
                    s()
                });
                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadActionsCustomization","uuid":"' + o + '","status":"start","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                n._loadActionsCustomization(u.actions, function() {
                    a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadActionsCustomization","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                    w = true;
                    s()
                });
                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadViewsCustomization","uuid":"' + o + '","status":"start","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                n._loadViewsCustomization(u.views, function() {
                    a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization _loadViewsCustomization","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                    t = true;
                    s()
                })
            }
            n.updateOtherUXOptions(m);
            if (i.is(q)) {
                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization loop on custo","uuid":"' + o + '","status":"start","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                for (var k = 0; k < q.length; k++) {
                    g([q[k]], function(t) {
                        var s = JSON.parse(t);
                        l(s, r)
                    }, function(s) {
                        if (s.requireType !== "timeout") {
                            console.warn("Cannot load view " + s.requireModules);
                            p++;
                            if (p === q.length) {
                                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization loop on custo","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization-Detail"}');
                                a.mark('{"module":"DS/SNResultUX/utils/ResultUX_customization","name":"ResultUX_customization::addCustomization","uuid":"' + o + '","status":"end","drilldown_serie_id":"ResultUX_customization::addCustomization"}');
                                r.call(null)
                            }
                        }
                    })
                }
            } else {
                l(m, r)
            }
        },
        setAddinMode: function(k) {
            if (UWA.is(k, "string")) {
                this._addin_mode = k
            } else {
                console.log("invalid arguments, addinMode is not a string")
            }
        },
        updateOtherUXOptions: function(k) {
            if (i.is(k.datagridview_columns)) {
                this._other_ux_options.datagridview_columns = k.datagridview_columns
            }
        },
        getUXOption: function(k) {
            return this._other_ux_options[k]
        },
        getDataGridViewColumns: function() {
            return this.getUXOption("datagridview_columns")
        },
        getAvailableActions: function(u, r, n) {
            if (!i.is(u) || !i.is(u.attributes)) {
                throw new Error("Invalid Arg in ResultUX_customization.getAvailableActions!")
            }
            var l = [],
                C = [];
            var z = u.attributes["ds6w:what/ds6w:type_value"];
            if (!UWA.is(z)) {
                z = u.attributes["ds6w:type_value"]
            }
            var q = this._actions_customization.get({
                id: b._getModelTypeValue(z)
            });
            if (!i.is(q) && i.is(z, "array")) {
                for (var x = 0; x < z.length && !(i.is(q)); x++) {
                    q = this._actions_customization.get({
                        id: z[x]
                    })
                }
            }
            if (this._check_type_inheritance) {
                if (!i.is(q)) {
                    var k = u.attributes.taxonomies_value;
                    var A = null;
                    if (i.is(k, "string")) {
                        A = k
                    } else {
                        if (i.is(k, "array")) {
                            for (var x = 0; x < k.length; x++) {
                                if (i.is(k[x], "string") && k[x].indexOf("types/") === 0) {
                                    A = k[x];
                                    break
                                }
                            }
                        }
                    }
                    if (i.is(A)) {
                        var w = A.split("/");
                        if (i.is(w, "array")) {
                            for (var x = w.length - 2; x > 0 && !(i.is(q)); x--) {
                                q = this._actions_customization.get({
                                    id: w[x]
                                })
                            }
                        }
                    }
                }
            }
            var p = function(t) {
                r.call(null, t)
            };
            var v = [];
            if (i.is(q)) {
                var s = q.get("available_impl");
                for (var y = 0; y < s.length; y++) {
                    var l = s[y].getActionForObject(u.attributes, p, n);
                    if (i.is(l, "array")) {
                        v = v.concat(l)
                    }
                }
            }
            var m = this._actions_customization.get({
                id: "all"
            });
            if (i.is(m)) {
                var o = m.get("available_impl");
                for (var B = 0; B < o.length; B++) {
                    var l = o[B].getActionForObject(u.attributes, p, n);
                    if (i.is(l, "array")) {
                        v = v.concat(l)
                    }
                }
            }
            r.call(null, v)
        },
        availablefacets: function() {
            var n = [];
            var k = null;
            if (i.is(this.model)) {
                k = this.model
            } else {
                k = this
            }
            var m = b._getModelTypeValue(k.get("ds6w:what/ds6w:type_value"));
            if (i.is(b._type_customization[m]) === true) {
                n.push.apply(n, b._type_customization[m].getAvailableFacetsIdAndOrder())
            } else {
                for (var l in b._skeleton_facets) {
                    if (b._skeleton_facets.hasOwnProperty(l) && i.is(b._skeleton_facets[l])) {
                        if (b._skeleton_facets[l].is_facet_avalailable(this) === true) {
                            n.push(f.result(b._skeleton_facets[l], "facet_idcard"))
                        }
                    }
                }
            }
            return n
        },
        availableviews: function() {
            var l = {};
            for (var k in b._skeleton_facets) {
                if (b._skeleton_facets.hasOwnProperty(k)) {
                    l[f.result(b._skeleton_facets[k], "facet_name")] = f.result(b._skeleton_facets[k], "facet_options")
                }
            }
            return l
        },
        getMapping: function() {
            var k = {
                image: function() {
                    var m = this.model || this;
                    var n = b._getModelTypeValue(m.get("ds6w:what/ds6w:type_value"));
                    if (i.is(b._type_customization[n]) && i.is(b._type_customization[n].image)) {
                        return b._type_customization[n].image.call(m)
                    } else {
                        var l = m.get("preview_url");
                        return l
                    }
                },
                icon: function() {
                    var l = this.model || this;
                    var m = b._getModelTypeValue(l.get("ds6w:what/ds6w:type_value"));
                    if (i.is(b._type_customization[m]) && i.is(b._type_customization[m].icon)) {
                        return b._type_customization[m].icon.call(l)
                    } else {
                        var n = l.get("type_icon_url");
                        return n
                    }
                }
            };
            return k
        },
        idcardOptions: function(m, l, k) {
            var o = {};
            var n;
            if (i.is(m)) {
                n = b._getModelTypeValue(m.get("ds6w:what/ds6w:type_value") || m.get("ds6w:what/ds6w:type"))
            }
            if (i.is(n) && i.is(b._type_customization[n]) && i.is(b._type_customization[n].getIdCardOpts)) {
                b.log("ResultUX_customization specific IDCard options set");
                o = b._type_customization[n].getIdCardOpts(m)
            } else {
                if (i.is(l)) {
                    o = b._getResultContentsIdCard(l);
                    if (i.is(k)) {
                        o.events = k
                    }
                } else {
                    o = b._getResultContentsIdCard()
                }
            }
            return o
        },
        _loadTypeCustomization: function(n, m) {
            if (i.is(n, "array") && n.length > 0) {
                var l = 0;
                for (var k = 0; k < n.length; k++) {
                    require([n[k]], function(q) {
                        var o = new q();
                        if (i.is(o.name, "string")) {
                            b._type_customization[o.name] = o
                        } else {
                            if (i.is(o.names, "array")) {
                                for (var p = 0; p < o.names.length; p++) {
                                    b._type_customization[o.names[p]] = o
                                }
                            } else {
                                throw new Error("Invalid type defined")
                            }
                        }
                        l++;
                        if (l === n.length) {
                            m.call(null)
                        }
                    }, function(o) {
                        if (o.requireType !== "timeout") {
                            console.warn("Cannot load type customization " + o.requireModules);
                            l++;
                            if (l === n.length) {
                                m.call(null)
                            }
                        }
                    })
                }
            } else {
                this.log("No type customization loaded");
                m.call(null)
            }
        },
        _loadActionsCustomization: function(o, p) {
            if (i.is(o)) {
                var m = this,
                    n = 0;
                for (var l = 0; l < o.length; l++) {
                    var k = o[l];
                    if (!i.is(this._actions_customization_modules.get(k))) {
                        m._actions_customization_modules.add({
                            id: o[l]
                        });
                        require([k], function(r) {
                            var u = new r({
                                    addinmode: m._addin_mode
                                }),
                                s = u.availableForTypes();
                            for (var t = 0; t < s.length; t++) {
                                var q = m._actions_customization.get({
                                    id: s[t]
                                });
                                if (i.is(q)) {
                                    m.log("Update action model");
                                    q.get("available_impl").push(u)
                                } else {
                                    m._actions_customization.add({
                                        id: s[t],
                                        available_impl: [u]
                                    })
                                }
                            }
                            n++;
                            if (n === o.length) {
                                p.call(null)
                            }
                        }, function(q) {
                            if (q.requireType !== "timeout") {
                                console.warn("Cannot load view " + q.requireModules);
                                n++;
                                if (n === o.length) {
                                    p.call(null)
                                }
                            }
                        })
                    } else {
                        n++;
                        if (n === o.length) {
                            p.call(null)
                        }
                    }
                }
            } else {
                this.log("No actions loaded");
                p.call(null)
            }
        },
        _loadViewsCustomization: function(l, p) {
            if (i.is(l)) {
                var n = this,
                    m = l.skeleton.facets,
                    o = 0;
                for (var k = 0; k < m.length; k++) {
                    if (i.is(n._skeleton_facets[m[k].id])) {
                        this.log("View already added with the same id " + m[k].id);
                        this.log("Do not load " + m[k].implementation);
                        o++;
                        if (o === m.length) {
                            p.call(null)
                        }
                    } else {
                        n._skeleton_facets[m[k].id] = null;
                        require([m[k].implementation], function(q) {
                            n._skeleton_facets[q.facet_name] = q;
                            o++;
                            if (o === m.length) {
                                p.call(null)
                            }
                        }, function(q) {
                            if (q.requireType !== "timeout") {
                                console.warn("Cannot load view " + q.requireModules);
                                o++;
                                if (o === m.length) {
                                    p.call(null)
                                }
                            }
                        })
                    }
                }
            } else {
                this.log("No actions loaded");
                p.call(null)
            }
        },
        _getResultContentsIdCard: function(l) {
            var k = {},
                m = i.is(l) ? i.extend(l.mapping, b.getMapping(), true) : b.getMapping();
            k = {
                thumbnailUrl: function() {
                    return b._getValueWithMapping("image", this, m)
                },
                bannerUrl: "",
                attributesMapping: m,
                facets: b.availablefacets,
                nativeActionMenu: true,
                actions: function() {
                    var o = [],
                        n = this;
                    this.actions.forEach(function(q, p) {
                        if (p < 7) {
                            var r = {
                                text: q.get("title"),
                                icon: q.get("icon"),
                                handler: q.get("callback")
                            };
                            if (i.is(q.get("callback"))) {
                                r.handler = function(t) {
                                    var s = {
                                        model: t.model,
                                        action_id: q.get("id"),
                                        object_id: t.model.get("id"),
                                        collection: t.model.collection
                                    };
                                    q.get("callback").call(undefined, s, arguments)
                                }
                            } else {
                                if (e.getOption("search_web_in_win") && i.is(q.get("sourcejs"))) {
                                    r.handler = function() {
                                        require([q.get("sourcejs")], function(t) {
                                            var s = {
                                                action_id: q.get("id"),
                                                object_id: n.get("id"),
                                            };
                                            t.executeAction.call(t, s)
                                        })
                                    }
                                }
                            }
                            o.push(r)
                        }
                    });
                    return o
                }
            };
            return k
        },
        _getValueWithMapping: function(m, l, k) {
            var n;
            if (m in k && i.is(k[m], "function")) {
                var o = {
                    model: l
                };
                n = k[m].call(o)
            } else {
                n = l.get(m);
                if (n === undefined) {
                    n = ""
                }
            }
            return n
        },
        _getModelTypeValue: function(k) {
            return i.is(k, "array") ? Array.prototype.join.call(k, "/") : k
        }
    });
    return b
});
define("DS/SNResultUX/utils/WildcardMgr", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/PredefinedQueries", "DS/SNInfraUX/SearchUtils"], function(d, g, c, f, b, e) {
    var a = g.singleton(c, {
        init: function() {
            this.setDebugMode(true)
        },
        _specialSearchCriteria: ["*", "#all", e.SearchTypeEnum.MY_CONTENT, e.SearchTypeEnum.MY_RECENT_CONTENT, e.SearchTypeEnum.ADVANCED_SEARCH, e.SearchTypeEnum.FAVORITE_SEARCH],
        isASpecialCriteria: function(j) {
            var h = false;
            for (var k = 0; k < this._specialSearchCriteria.length; k++) {
                if (this._specialSearchCriteria[k] === j) {
                    h = true;
                    break
                }
            }
            return h
        },
        _operators: [":", "(", ")", " AND ", " OR ", "=", "==", "!=", "<", ">", "<=", ">=", " NOT ", " BUTNOT ", " XOR ", " OPT ", " NEAR ", " NEXT ", " AFTER ", " BEFORE ", " INNERJOIN ", " SPLIT "],
        isAnAdvancedCriteria: function(j) {
            if (!d.is(j, "string")) {
                throw new Error("Invalid arg in isAnAdvancedCriteria")
            }
            var h = false;
            for (var k = 0; k < this._operators.length; k++) {
                if (j.indexOf(this._operators[k]) > 0) {
                    h = true;
                    break
                }
            }
            return h
        },
        isAnExactCriteria: function(i) {
            var h = false;
            if (d.is(i)) {
                if (i[0] === '"' && i[i.length - 1] === '"') {
                    h = true
                }
            }
            return h
        },
        containsNonLatinChars: function(j) {
            if (!d.is(d.is(j, "string"))) {
                throw new Error("Invalid arg in WildcardMgr.containsNonLatinChars");
                return false
            }
            var h = false,
                k = 0;
            for (k = 0; k < j.length && false === h; k++) {
                if (j.charCodeAt(k) > 255) {
                    h = true
                }
            }
            return h
        },
        getInfo: function(h) {
            var i = {
                searchCriteria: h,
            };
            if (d.is(h)) {
                if (i.searchCriteria.trim().length > 0) {
                    i.searchCriteria = i.searchCriteria.trim()
                } else {
                    i.searchCriteria = i.searchCriteria
                }
                i.isAnExactCriteria = this.isAnExactCriteria(i.searchCriteria);
                i.isASpecialCriteria = this.isASpecialCriteria(i.searchCriteria);
                i.isAdvancedCriteria = this.isAnAdvancedCriteria(i.searchCriteria);
                i.indexOfTwoDots = i.searchCriteria.indexOf(":");
                i.pqAbbrevation = b.isAPQSearch(i.searchCriteria);
                i.indexOfwildChar = i.searchCriteria.indexOf("*");
                i.containsNonLatinChars = this.containsNonLatinChars(i.searchCriteria);
                if (d.is(i.pqAbbrevation)) {
                    i.searchCriteria = i.searchCriteria.substring(i.indexOfTwoDots + 1, i.searchCriteria.length);
                    if (i.searchCriteria.trim().length > 0) {
                        i.searchCriteria = i.searchCriteria.trim()
                    } else {
                        i.searchCriteria = i.searchCriteria
                    }
                    i.isASpecialCriteria = this.isASpecialCriteria(i.searchCriteria);
                    i.isAdvancedCriteria = this.isAnAdvancedCriteria(i.searchCriteria);
                    i.isAnExactCriteria = this.isAnExactCriteria(i.searchCriteria);
                    i.indexOfwildChar = i.searchCriteria.indexOf("*")
                }
            }
            return i
        },
        manageWildcardAddtion: function(k) {
            console.log("Current search string = " + k);
            var i = false;
            if (k.trim().length > 0) {
                k = k.trim()
            }
            if (k.startsWith("(") && k.endsWith(")")) {
                i = true;
                k = k.substring(1, k.length - 1)
            }
            var l = this.getInfo(k);
            console.log("search string after initial treatment = " + l.searchCriteria);
            var h = l.searchCriteria;
            var j = false;
            if (f.getOption("wildcard_addition")) {
                if (d.is(l.pqAbbrevation)) {
                    console.log("PQ abbrevation found..");
                    if (l.isAnExactCriteria) {} else {
                        if (l.isASpecialCriteria) {} else {
                            if (l.isAdvancedCriteria) {} else {
                                if (l.containsNonLatinChars) {} else {
                                    if (l.indexOfwildChar > -1) {
                                        l.searchCriteria = l.pqAbbrevation + ":" + l.searchCriteria
                                    } else {
                                        h = l.pqAbbrevation + ":*" + l.searchCriteria + "*";
                                        j = true
                                    }
                                }
                            }
                        }
                    }
                } else {
                    console.log("PQ abbrevation not found");
                    if (l.isAnExactCriteria) {} else {
                        if (l.isASpecialCriteria) {} else {
                            if (l.isAdvancedCriteria) {} else {
                                if (l.containsNonLatinChars) {} else {
                                    if (l.indexOfwildChar > -1) {} else {
                                        if (h.length) {
                                            h = "*" + l.searchCriteria + "*";
                                            j = true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                console.log("wildcard_addition setting is FALSE, no treatment...");
                if (d.is(l.pqAbbrevation)) {
                    console.log("PQ abbrevation found, check if there is a criteria, if not add *...");
                    if (!l.isAnExactCriteria && !l.isASpecialCriteria && !l.isAdvancedCriteria && !l.containsNonLatinChars && -1 === l.indexOfwildChar && 0 === l.searchCriteria.length) {
                        h = l.pqAbbrevation + ":*";
                        j = true
                    }
                }
            }
            if (!j) {
                if (d.is(l.pqAbbrevation)) {
                    h = l.pqAbbrevation + ":" + h
                }
            }
            if (i) {
                h = "(" + h + ")"
            }
            return h
        }
    });
    return a
});
define("DS/SNResultUX/savedSearch/SavedSearch_ActionHandler", ["UWA/Core", "UWA/Class", "DS/WAFData/WAFData", "UWA/Class/Debug", "UWA/Class/Events", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchVersioning", "DS/SNResultUX/utils/SearchServices", "DS/UIKIT/Alert", "DS/UIKIT/Popover", "DS/UIKIT/Input/Text", "DS/UIKIT/Input/Button", "DS/MessageBus/MessageBus", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices"], function(m, r, b, t, k, i, a, e, s, l, g, p, o, j, q, f, h) {
    var n = "socket_id_#saved_search_edit#",
        c = "widget_id_#saved_search_edit#";
    var d = r.singleton(k, t, {
        executeAction: function(v, x) {
            if (i.getOption("actionsProtocol_FUN065512")) {
                if (!UWA.is(v, "object") || !UWA.is(v.object_ids, "array") || !UWA.is(v.action_id, "string") || !v.actionsHelper) {
                    throw ("invalid input to action handler")
                }
                switch (v.action_id) {
                    case "run_saved_search":
                        if (v.object_ids.length === 1) {
                            this._runSearch2(v)
                        } else {
                            throw ("run_saved_search is called with invalid object_ids information")
                        }
                        break;
                    case "rename_saved_search":
                        if (v.object_ids.length === 1) {
                            this.renameSearchUI2(v)
                        } else {
                            throw ("rename_saved_search is called with invalid object_ids information")
                        }
                        break;
                    case "delete_saved_search":
                        this._deleteSearch2(v);
                        break;
                    case "share_saved_search":
                        this._shareSearch(v);
                        break;
                    case "unshare_saved_search":
                        this._unshareSearch(v);
                        break;
                    case "edit_saved_search":
                        this._editSearch(v);
                        break
                }
            } else {
                var y = null;
                if (!m.is(v) || !m.is(v.collection)) {
                    console.error("Missing collection arg !");
                    return
                }
                y = v.collection;
                var w = this;
                var u = [];
                if (!Array.isArray(v)) {
                    u.push(v)
                } else {
                    u = v
                }
                Array.prototype.forEach.call(u, function(z) {
                    switch (z.action_id || v.action_id) {
                        case "run_saved_search":
                            w._runSearch(z.object_id, y);
                            break;
                        case "rename_saved_search":
                            var E = y.getSNSkeleton();
                            if (i.getOption("search_web_in_win")) {
                                var C = document.getElementById(z.object_cid);
                                if (UWA.is(E)) {
                                    var B = E.getIDCardStatus();
                                    if (B === "contracted") {
                                        if (E._isMultiselOn === true && z.event_type === "btnGlobal") {
                                            C = x[0].view ? x[0].view : E._skeleton.container.getElement(".set-detail-view-title");
                                            w.renameSearchUI(z.object_id, C, false, y)
                                        } else {
                                            if (E._skeleton.getViewAt(0).currentViewId == "table") {
                                                var A = E._skeleton.getViewAt(0).contentsViews.table.view.getManager();
                                                C = x[0].view ? x[0].view : A._cellSpan;
                                                w.renameSearchUI(z.object_id, C, false, y)
                                            } else {
                                                C = x[0].view ? x[0].view : C;
                                                w.renameSearchUI(z.object_id, C, false, y)
                                            }
                                        }
                                    } else {
                                        var D = m.extendElement(E._skeleton.container.parentElement).getElement(".right>.skeleton-panel>.facetviews");
                                        w.renameSearchUI(z.object_id, D, true, y)
                                    }
                                }
                            } else {
                                if (UWA.is(x)) {
                                    if (x.length >= 2) {
                                        if (x.length == 2) {
                                            w.renameSearchUI(z.object_id, x[0].getContent ? x[0].getContent() : x[0].view, (!x[1].data) ? true : false, y)
                                        } else {
                                            if (m.is(x[1].getContent())) {
                                                w.renameSearchUI(z.object_id, x[1].getContent ? x[1].getContent() : x[0].view, false, y)
                                            }
                                        }
                                    } else {
                                        if (E._skeleton.getViewAt(0).currentViewId == "table" && !z.target) {
                                            w.renameSearchUI(z.object_id, z.cellInfo.cellView.elements.container, false, y)
                                        } else {
                                            if (z.target) {
                                                w.renameSearchUI(z.object_id, z.target, false, y)
                                            } else {
                                                throw ("invalid ui element data size for rename_saved_search !")
                                            }
                                        }
                                    }
                                } else {
                                    throw ("invalid ui element data for rename_saved_search !")
                                }
                            }
                            break;
                        case "delete_saved_search":
                            w._deleteSearch(z.object_id ? z.object_id : z.id, y);
                            break
                    }
                })
            }
        },
        _displayAlert: function(u, w) {
            if (!m.is(w)) {
                console.error("Bad collection arg !");
                return
            }
            var v = w.getSNSkeleton().getOption("widgetId");
            u.widgetId = v;
            l._displayAlert(u)
        },
        renameSearchUI2: function(F) {
            var x = this;
            F.actionsHelper.hidePopover();
            var y = new p({
                target: F.actionsHelper.getTarget(),
                className: "fav-search-popover",
                position: "bottom",
                title: f.get("rename_fav_search"),
                events: {
                    onHide: function() {
                        this.destroy()
                    }
                }
            });
            F.actionsHelper.setPopover(y);
            var u = UWA.createElement("span", {
                id: "close-popover-icon",
                title: f.get("closeButton"),
                "class": "fonticon fonticon-cancel",
                events: {
                    click: function(G) {
                        G.stopPropagation();
                        F.actionsHelper.hidePopover()
                    }
                }
            }).inject(y.getTitle());
            var B = UWA.createElement("form", {
                "class": "formSaveSearch form-inline"
            });
            var E = UWA.createElement("div", {
                "class": "divNewSearch form-group"
            });
            E.inject(B);
            var w = UWA.createElement("span", {
                id: "fav-search-clear-icon",
                "class": "fonticon fonticon-cancel-circled",
                events: {
                    click: function(G) {
                        G.stopPropagation();
                        A.setValue("");
                        this.hide()
                    }
                }
            }).inject(E);
            var v = F.actionsHelper.getValue({
                id: F.object_ids[0],
                attribute: "ds6w:label"
            });
            var A = new o({
                placeholder: f.get("save_search_default_text"),
                value: v,
                "class": "newSaveSearchName",
                id: "newSaveSearchName",
                maxlength: 256,
                events: {
                    onKeyDown: function(G) {
                        if (!this.getValue()) {
                            w.hide()
                        } else {
                            w.show()
                        }
                        if (G.keyCode === 13) {
                            G.preventDefault();
                            G.stopPropagation();
                            x._renameSearch2(F, this.getValue());
                            F.actionsHelper.hidePopover()
                        }
                    },
                    onChange: function(G) {
                        if (!this.getValue()) {
                            w.hide()
                        } else {
                            w.show()
                        }
                    }
                }
            }).inject(E);
            var D = UWA.createElement("div", {
                "class": "divBtn"
            });
            D.inject(B);
            var z = new j({
                value: f.get("OKButton"),
                className: "primary xsmall okSaveSearch",
                id: "okSaveSearch",
                events: {
                    onClick: function() {
                        x.log("Search name=" + A.getValue());
                        x._renameSearch2(F, A.getValue());
                        F.actionsHelper.hidePopover()
                    }
                }
            }).inject(D);
            var C = new j({
                value: f.get("CancelButton"),
                className: "default xsmall cancelSaveSearch",
                id: "cancelSaveSearch",
                events: {
                    onClick: function() {
                        x.log("Save canceled");
                        F.actionsHelper.hidePopover()
                    }
                }
            }).inject(D);
            y.setBody(B);
            y.show();
            A.focus()
        },
        renameSearchUI: function(u, C, x, y) {
            if (!m.is(y)) {
                console.error("Bad collection arg !");
                return
            }
            var z = this;
            if (y._snSkeleton.popover) {
                y._snSkeleton.popover.hide();
                y._snSkeleton.popover = null
            }
            y._snSkeleton.popover = new p({
                target: C,
                className: "fav-search-popover",
                position: x ? "top" : "bottom",
                title: f.get("rename_fav_search"),
                events: {
                    onHide: function() {
                        this.destroy()
                    }
                }
            });
            var v = UWA.createElement("span", {
                id: "close-popover-icon",
                title: f.get("closeButton"),
                "class": "fonticon fonticon-cancel",
                events: {
                    click: function(H) {
                        H.stopPropagation();
                        y._snSkeleton.popover.hide()
                    }
                }
            }).inject(y._snSkeleton.popover.getTitle());
            var D = UWA.createElement("form", {
                "class": "formSaveSearch form-inline"
            });
            var G = UWA.createElement("div", {
                "class": "divNewSearch form-group"
            });
            G.inject(D);
            var w = UWA.createElement("span", {
                id: "fav-search-clear-icon",
                "class": "fonticon fonticon-cancel-circled",
                events: {
                    click: function(H) {
                        H.stopPropagation();
                        B.setValue("");
                        this.hide()
                    }
                }
            }).inject(G);
            var B = new o({
                placeholder: f.get("save_search_default_text"),
                value: y.get(u).get("ds6w:label"),
                "class": "newSaveSearchName",
                id: "newSaveSearchName",
                maxlength: 256,
                events: {
                    onKeyDown: function(H) {
                        if (!this.getValue()) {
                            w.hide()
                        } else {
                            w.show()
                        }
                        if (H.keyCode === 13) {
                            H.preventDefault();
                            H.stopPropagation();
                            z._renameSearch(u, y.get(u).get("ds6w:label"), this.getValue(), y);
                            y._snSkeleton.popover.hide()
                        }
                    },
                    onChange: function(H) {
                        if (!this.getValue()) {
                            w.hide()
                        } else {
                            w.show()
                        }
                    }
                }
            }).inject(G);
            var F = UWA.createElement("div", {
                "class": "divBtn"
            });
            F.inject(D);
            var A = new j({
                value: f.get("OKButton"),
                className: "primary xsmall okSaveSearch",
                id: "okSaveSearch",
                events: {
                    onClick: function() {
                        z.log("Search name=" + B.getValue());
                        z._renameSearch(u, y.get(u).get("ds6w:label"), B.getValue(), y);
                        y._snSkeleton.popover.hide()
                    }
                }
            }).inject(F);
            var E = new j({
                value: f.get("CancelButton"),
                className: "default xsmall cancelSaveSearch",
                id: "cancelSaveSearch",
                events: {
                    onClick: function() {
                        z.log("Save canceled");
                        y._snSkeleton.popover.hide()
                    }
                }
            }).inject(F);
            y._snSkeleton.popover.setBody(D);
            y._snSkeleton.popover.show();
            B.focus()
        },
        _renameSearch: function(B, w, v, A) {
            var y = this;
            if (!m.is(A)) {
                console.error("Bad collection arg !");
                return
            }
            var u = A.getSearchRessources().getFetchOptions({
                service_name: "renameSavedSearch",
                service_data: {
                    id: B,
                    name: v
                }
            });
            var x = u.url;
            var z = {
                onComplete: function(C, E) {
                    y._displayAlert({
                        message: f.replace(f.get("rename_search_successful"), {
                            old_name: w,
                            new_name: v
                        }),
                        className: "success"
                    }, A);
                    var D = A.get(B);
                    D.set("ds6w:label", v)
                },
                onFailure: function(C) {
                    y._displayAlert({
                        message: f.replace(f.get("rename_search_failure"), {
                            old_name: w,
                            new_name: v
                        }),
                        className: "error"
                    }, A)
                }
            };
            z = UWA.extend(u, z, true);
            b.authenticatedRequest(x, z)
        },
        _renameSearch2: function(x, u) {
            var y = this;
            var w = x.actionsHelper.getValue({
                id: x.object_ids[0],
                attribute: "ds6w:label"
            });

            function v(A) {
                if (A.indexOf("<") >= 0 || A.indexOf(">") >= 0) {
                    A = A.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    A = A.replace(/&lt;/g, '<em style="color:red">&lt;</em>').replace(/&gt;/g, '<em style="color:red">&gt;</em>');
                    var B = f.replace(f.get("rename_search_failure"), {
                        old_name: w,
                        new_name: A
                    });
                    B += "<br>" + f.get("save_search_invalid_character");
                    x.actionsHelper.displayAlert({
                        message: B,
                        className: "error saveSearchAlert"
                    });
                    return false
                }
                return true
            }
            if (!v(u)) {
                return false
            }
            var z = {
                method: "POST",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                },
                data: JSON.stringify({
                    id: x.object_ids[0],
                    name: u
                })
            };
            x.actionsHelper.getServiceURL({
                id: x.object_ids[0],
                onComplete: function(A) {
                    if (UWA.is(A, "string")) {
                        y._initSecurityContext(x, A);
                        a.getSecurityContextPromise().then(function() {
                            var B = a.getSecurityContext();
                            if (B && B.trim().length > 0) {
                                z.headers.SecurityContext = B
                            }
                            z.url = A + "/resources/SNAPI/search_services/updateSearch";
                            z.onComplete = function(C, D) {
                                x.actionsHelper.setLabel({
                                    id: x.object_ids[0],
                                    newLabel: u
                                });
                                x.actionsHelper.displayAlert({
                                    message: f.replace(f.get("rename_search_successful"), {
                                        old_name: w,
                                        new_name: u
                                    }),
                                    className: "success"
                                })
                            }, z.onFailure = function(C) {
                                x.actionsHelper.displayAlert({
                                    message: f.replace(f.get("rename_search_failure"), {
                                        old_name: w,
                                        new_name: u
                                    }),
                                    className: "error"
                                })
                            };
                            b.authenticatedRequest(z.url, z)
                        })
                    }
                }
            })
        },
        _runSearch: function(z, y) {
            var x = this;
            if (!m.is(y)) {
                console.error("Bad collection arg !");
                return
            }
            var A = y.get(z).get("ds6w:label");
            var u = y.getSearchRessources().getFetchOptions({
                service_name: "runSavedSearch",
                service_data: {
                    id: z
                }
            });
            var w = u.url;
            var v = {
                onComplete: function(B, G) {
                    var F = m.Json.decode(B);
                    if (UWA.is(F)) {
                        var D = {};
                        var C = {};
                        try {
                            C = m.Json.decode(F.searchstring);
                            D.search_criteria = C.query;
                            D.originalSearchCriteria = C.originalSearchCriteria
                        } catch (E) {
                            D.search_criteria = F.searchstring
                        }
                        if (m.is(F.name)) {
                            D.search_name = F.name
                        }
                        D.tag_filter = m.Json.decode(F.taggerstring);
                        if (m.is(F.searchOptions)) {
                            if (m.is(F.searchOptions.source)) {
                                D.source = F.searchOptions.source
                            }
                        }
                        D.savedSearch = true;
                        y.getSNSkeleton().getSearchActions().dispatchEvent("onRunSavedSearch", D);
                        x._displayAlert({
                            message: f.replace(f.get("run_search_successful"), {
                                search_name: A
                            }),
                            className: "success"
                        }, y)
                    }
                },
                onFailure: function(B) {
                    x._displayAlert({
                        message: f.replace(f.get("run_search_failure"), {
                            search_name: A
                        }),
                        className: "error"
                    }, y)
                }
            };
            v = UWA.extend(u, v, true);
            b.authenticatedRequest(w, v)
        },
        _runSearch2: function(u) {
            var v = this;
            var w = {
                method: "GET",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                },
                data: "id=" + u.object_ids[0]
            };
            u.actionsHelper.getServiceURL({
                id: u.object_ids[0],
                onComplete: function(x) {
                    if (UWA.is(x, "string")) {
                        v._initSecurityContext(u, x);
                        a.getSecurityContextPromise().then(function() {
                            var y = a.getSecurityContext();
                            if (y && y.trim().length > 0) {
                                w.headers.SecurityContext = y
                            }
                            w.url = x + "/resources/SNAPI/search_services/savedSearch";
                            var z = u.actionsHelper.getValue({
                                id: u.object_ids[0],
                                attribute: "ds6w:label"
                            });
                            w.onComplete = function(A, F) {
                                var E = m.Json.decode(A);
                                if (UWA.is(E)) {
                                    var C = {};
                                    var B = {};
                                    try {
                                        B = m.Json.decode(E.searchstring);
                                        C.search_criteria = B.query;
                                        C.originalSearchCriteria = B.originalSearchCriteria
                                    } catch (D) {
                                        C.search_criteria = E.searchstring
                                    }
                                    if (m.is(E.name)) {
                                        C.search_name = E.name
                                    }
                                    C.tag_filter = m.Json.decode(E.taggerstring);
                                    if (m.is(E.searchOptions)) {
                                        if (m.is(E.searchOptions.source)) {
                                            C.source = E.searchOptions.source
                                        }
                                        if (m.is(E.searchOptions.order_by) && m.is(E.searchOptions.order_field)) {
                                            C.order_by = E.searchOptions.order_by;
                                            C.order_field = E.searchOptions.order_field
                                        }
                                    }
                                    C.savedSearch = true;
                                    var G = q.getSubscriptions({
                                        channel: "3DSearch-TabManager-" + u.widget_id,
                                        topic: "addTab"
                                    });
                                    if (UWA.is(G, "array") && G.length > 0 && true !== u.actionsHelper.isInContextMode() && u.actionsHelper.canOpenATab()) {
                                        q.publish({
                                            channel: "3DSearch-TabManager-" + u.widget_id,
                                            topic: "addTab",
                                            data: {
                                                search_ux_options: {
                                                    search_options: C,
                                                    events: {
                                                        onReady: function() {
                                                            alert("Ready")
                                                        }
                                                    }
                                                }
                                            }
                                        })
                                    } else {
                                        u.actionsHelper.dispatchEvent({
                                            event: "onRunSavedSearch",
                                            params: C
                                        })
                                    }
                                    u.actionsHelper.displayAlert({
                                        message: f.replace(f.get("run_search_successful"), {
                                            search_name: z
                                        }),
                                        className: "success"
                                    })
                                }
                            }, w.onFailure = function(A) {
                                u.actionsHelper.displayAlert({
                                    message: f.replace(f.get("run_search_failure"), {
                                        search_name: z
                                    }),
                                    className: "error"
                                })
                            };
                            b.authenticatedRequest(w.url, w)
                        })
                    }
                }
            })
        },
        _editSearch: function(u) {
            var v = this;
            var w = {
                method: "GET",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                },
                data: "id=" + u.object_ids[0]
            };
            u.actionsHelper.getServiceURL({
                id: u.object_ids[0],
                onComplete: function(x) {
                    if (UWA.is(x, "string")) {
                        v._initSecurityContext(u, x);
                        a.getSecurityContextPromise().then(function() {
                            var y = a.getSecurityContext();
                            if (y && y.trim().length > 0) {
                                w.headers.SecurityContext = y
                            }
                            w.url = x + "/resources/SNAPI/search_services/savedSearch";
                            var z = u.actionsHelper.getValue({
                                id: u.object_ids[0],
                                attribute: "ds6w:label"
                            });
                            w.onComplete = function(D, C) {
                                var F = m.Json.decode(D);
                                if (UWA.is(F)) {
                                    var O = {};
                                    var G = {};
                                    try {
                                        G = m.Json.decode(F.searchstring);
                                        O.search_criteria = G.query;
                                        O.originalSearchCriteria = G.originalSearchCriteria
                                    } catch (I) {
                                        O.search_criteria = F.searchstring
                                    }
                                    var L = s.isActiveWithCurrentVersion([{
                                        R2018x: "FD05"
                                    }, {
                                        R2019x: "FD01"
                                    }, {
                                        R2020x: "GA"
                                    }]);
                                    if ((L == false) && (G.originalSearchCriteria == "#advancedSearch")) {
                                        u.actionsHelper.displayAlert({
                                            message: f.get("modify_search_not_supported"),
                                            className: "error"
                                        });
                                        return
                                    }
                                    if (m.is(F.name)) {
                                        O.search_name = F.name
                                    }
                                    O.tag_filter = m.Json.decode(F.taggerstring);
                                    if (m.is(F.searchOptions)) {
                                        if (m.is(F.searchOptions.source)) {
                                            O.source = F.searchOptions.source
                                        }
                                        if (m.is(F.searchOptions.order_by) && m.is(F.searchOptions.order_field)) {
                                            O.order_by = F.searchOptions.order_by;
                                            O.order_field = F.searchOptions.order_field
                                        }
                                    }
                                    var A = q.getSubscriptions({
                                        channel: "3DSearch-TabManager-" + u.widget_id,
                                        topic: "activateInContextSearch"
                                    });
                                    var P = (false === u.actionsHelper.isAPinnedWidget()) && (UWA.is(A, "array") && A.length > 0);
                                    var B = {
                                        widget_id: c,
                                        default_with_precond: true,
                                        default_search_criteria: O.search_criteria,
                                        precond: undefined,
                                        source: O.source,
                                        tenant: O.tenant,
                                        tag_filter: O.tag_filter,
                                        ORDER_BY: O.order_by,
                                        ORDER_FIELD: O.order_field,
                                        app_socket_id: n,
                                        title: f.replace(f.get("title_modify_savedsearch"), {
                                            search_name: z
                                        }),
                                        mode: "furtive",
                                        show_banned_types: false,
                                        furtive_options: {
                                            min_select: 0
                                        },
                                        UXOptions: {
                                            menuMyFavorites: false,
                                            menuMyContent: false,
                                            dnD: false,
                                            dblClk: false,
                                            localActions: false,
                                            searchRecentContent: false,
                                            globalToolbarActions: {
                                                saveAsFavorite: false,
                                                "export": false,
                                                print: false
                                            }
                                        },
                                        forceWidgetUXRecreation: false,
                                        closeTransient: !P
                                    };
                                    if (G.originalSearchCriteria == "#advancedSearch") {
                                        B.advanced_search = {
                                            showByDefault: false,
                                            exclusive: true,
                                            selection: {}
                                        };
                                        var K = F.taggerstring;
                                        var J = JSON.parse(K);
                                        for (var N in J.localfilters) {
                                            var E = N.split("/");
                                            var M = E[E.length - 1];
                                            if (E.length == 1) {
                                                M = M.substring(5)
                                            }
                                            if (!B.advanced_search.selection[M]) {
                                                B.advanced_search.selection[M] = []
                                            }
                                            if (m.is(J.localfilters[N], "array")) {
                                                J.localfilters[N].forEach(function(Q) {
                                                    B.advanced_search.selection[M].push(Q.object)
                                                })
                                            }
                                        }
                                        B.displayValue = ""
                                    }
                                    u.manageTabContainerHideShow = P;
                                    if (!m.is(v.socket)) {
                                        v.socket = e.createSocket({
                                            socket_id: n,
                                            widgetId: u.actionsHelper.widget_id
                                        });
                                        v.socket.addListener("InContextSearch_Response", v._modifySearch.bind(v, u, G));
                                        v.socket.addListener("onCloseTransient", function(Q) {
                                            if (Q && Q.in_apps_search && Q.in_apps_search.widget_id == c) {
                                                v.socket.dispatchEvent("UnregisterContext", {
                                                    widget_id: c
                                                });
                                                e.deleteSocket(n);
                                                v.socket.disconnect();
                                                delete v.socket;
                                                v.socket = null
                                            }
                                        })
                                    } else {}
                                    if (i.getOption("search_web_in_win") === true) {
                                        B.inContextProtocol_FUN073378 = true;
                                        v.socket.addListener("InContextInit", function() {
                                            InContextSearch({
                                                searchString: O.search_criteria,
                                                tag_filter: O.tag_filter
                                            })
                                        });
                                        activateInContextSearch(B);
                                        if (window.hasOwnProperty("sendNotificationWebInWin") && m.is(sendNotificationWebInWin, "function")) {
                                            sendNotificationWebInWin("UpdateSearchField", JSON.stringify({
                                                search_criteria: O.search_criteria
                                            }))
                                        }
                                    } else {
                                        v.socket.dispatchEvent("RegisterContext", B);
                                        if (P) {
                                            var H = q.subscribe({
                                                channel: "3DSearch-TabManager-" + u.widget_id,
                                                topic: "InContextInit",
                                                callback: function() {
                                                    v.socket.dispatchEvent("InContextSearch", B);
                                                    q.unsubscribe(H)
                                                }
                                            });
                                            q.publish({
                                                channel: "3DSearch-TabManager-" + u.widget_id,
                                                topic: "activateInContextSearch",
                                                data: B
                                            })
                                        } else {
                                            v.socket.dispatchEvent("InContextSearch", B)
                                        }
                                    }
                                }
                            }, w.onFailure = function(A) {
                                u.actionsHelper.displayAlert({
                                    message: f.replace(f.get("fetch_search_failure"), {
                                        search_name: z
                                    }),
                                    className: "error"
                                })
                            };
                            b.authenticatedRequest(w.url, w)
                        })
                    }
                }
            })
        },
        _modifySearch: function(D, x, A) {
            var z = this;
            this.log("_modifySearch");
            if (A.selected_command == "in_app_ok") {
                var B = D.object_ids[0];
                if (!m.is(B, "string")) {
                    return
                }
                var u = D.actionsHelper.getValue({
                    id: B,
                    attribute: "ds6w:label"
                });
                this.log("searchName=" + u);
                var y = A.search_params;
                var v = y.originalSearchCriteria;
                if (x.originalSearchCriteria == "#advancedSearch") {
                    v = "#advancedSearch"
                }
                var C = {
                    query: y.query,
                    originalSearchCriteria: v
                };
                this.log("searchParam.search_criteria=" + y.query);
                this.log("searchParam.tagger_criteria=" + y.refine);
                var w = {
                    method: "POST",
                    headers: {
                        Accept: "application/json, application/xml",
                        "Content-Type": "application/json"
                    },
                    data: {
                        name: u,
                        id: B,
                        searchSpec: C,
                        taggerSpec: y.refine,
                        searchOptions: {},
                        originalSearchCriteria: v
                    }
                };
                if (y.source) {
                    w.data.searchOptions.source = y.source
                }
                if (y.order_by && y.order_field) {
                    w.data.searchOptions.order_by = y.order_by;
                    w.data.searchOptions.order_field = y.order_field
                }
                w.data = JSON.stringify(w.data);
                D.actionsHelper.getServiceURL({
                    id: B,
                    onComplete: function(E) {
                        if (UWA.is(E, "string")) {
                            z._initSecurityContext(D, E);
                            a.getSecurityContextPromise().then(function() {
                                var G = a.getSecurityContext();
                                if (G && G.trim().length > 0) {
                                    w.headers.SecurityContext = G
                                }
                                w.url = E + "/resources/SNAPI/search_services/updateSearch";
                                var H = w.url;
                                var F = {
                                    onComplete: function(I, K) {
                                        var L = m.Json.decode(I);
                                        if (UWA.is(L)) {
                                            var J = {
                                                visible: true,
                                                autoHide: true,
                                                closable: true,
                                                messages: [{
                                                    message: f.replace(f.get("modify_search_successful"), {
                                                        search_name: L.name
                                                    }),
                                                    className: "success saveSearchAlert"
                                                }]
                                            };
                                            new g(J).inject(m.extendElement(document.body), "top")
                                        }
                                    },
                                    onFailure: function(K, L) {
                                        var J = f.replace(f.get("save_search_failure"), {
                                            search_name: u
                                        });
                                        if (m.is(L, "string")) {
                                            try {
                                                var I = JSON.parse(L);
                                                if (m.is(I) && m.is(I.Error)) {
                                                    J += "<br>" + I.Error
                                                }
                                            } catch (N) {
                                                console.error("Error parsing errorObject:", N)
                                            }
                                        }
                                        var M = {
                                            visible: true,
                                            autoHide: false,
                                            closable: true,
                                            messages: [{
                                                message: J,
                                                className: "error saveSearchAlert"
                                            }]
                                        };
                                        new g(M).inject(m.extendElement(document.body), "top")
                                    }
                                };
                                F = UWA.extend(w, F, true);
                                b.authenticatedRequest(H, F)
                            })
                        }
                    }
                })
            }
            if (i.getOption("search_web_in_win") === true) {
                deactivateInContextSearch({
                    donotshowlastsearch: undefined,
                    notify_to_cpp: false
                })
            } else {
                z.socket.dispatchEvent("UnregisterContext", {
                    widget_id: c
                });
                if (true === D.manageTabContainerHideShow) {
                    q.publish({
                        channel: "3DSearch-TabManager-" + D.widget_id,
                        topic: "deactivateInContextSearch"
                    })
                }
            }
            e.deleteSocket(n);
            z.socket.disconnect();
            delete z.socket;
            z.socket = null
        },
        _deleteSearch: function(z, y) {
            var w = this;
            if (!m.is(y)) {
                console.error("Bad collection arg !");
                return
            }
            var x = y.get(z).get("ds6w:label");
            var u = y.getSearchRessources().getFetchOptions({
                service_name: "deleteSearch",
                service_data: {
                    id: z
                }
            });
            var v = u.url;
            var A = {
                onComplete: function(F, D) {
                    var K = y.size();
                    var H = y.get(z);
                    var G = y.indexOf(H);
                    var E = y.getSNSkeleton();
                    if (UWA.is(E)) {
                        var I = E.getIDCardStatus();
                        if (I === "expanded" || I === "collapsed") {
                            var J = E._skeleton;
                            if (K == 1) {
                                J.slideBack()
                            } else {
                                var B = 0;
                                if (G == K - 1) {
                                    B = G - 1
                                } else {
                                    B = G + 1
                                }
                                if (B >= 0) {
                                    var C = y.at(B);
                                    if (UWA.is(C)) {
                                        var L = "/onesearch/";
                                        L += C.id + "/?f=0";
                                        J.setRoute(L)
                                    }
                                }
                            }
                        }
                        y.remove(z)
                    }
                    w._displayAlert({
                        message: f.replace(f.get("delete_search_successful"), {
                            search_name: x
                        }),
                        className: "success"
                    }, y)
                },
                onFailure: function(B) {
                    w._displayAlert({
                        message: f.replace(f.get("delete_search_failure"), {
                            search_name: x
                        }),
                        className: "error"
                    }, y)
                }
            };
            A = UWA.extend(u, A, true);
            b.authenticatedRequest(v, A)
        },
        _deleteSearch2: function(u) {
            var v = this;
            var w = {
                method: "POST",
                headers: {
                    Accept: "application/json, application/xml",
                    "Content-Type": "application/json"
                },
                data: JSON.stringify({
                    id: u.object_ids.join()
                })
            };
            u.actionsHelper.getServiceURL({
                id: u.object_ids[0],
                onComplete: function(x) {
                    if (UWA.is(x, "string")) {
                        v._initSecurityContext(u, x);
                        a.getSecurityContextPromise().then(function() {
                            var y = a.getSecurityContext();
                            if (y && y.trim().length > 0) {
                                w.headers.SecurityContext = y
                            }
                            w.url = x + "/resources/SNAPI/search_services/deleteSearch";
                            var z = u.object_ids.length > 1 ? true : false;
                            var A = u.actionsHelper.getValue({
                                id: u.object_ids[0],
                                attribute: "ds6w:label"
                            });
                            w.onComplete = function(B, C) {
                                u.actionsHelper.deleteResults({
                                    ids: u.object_ids
                                });
                                u.actionsHelper.displayAlert({
                                    message: z ? f.get("delete_search_successful_multi") : f.replace(f.get("delete_search_successful"), {
                                        search_name: A
                                    }),
                                    className: "success"
                                })
                            }, w.onFailure = function(B) {
                                u.actionsHelper.displayAlert({
                                    message: z ? f.get("delete_search_failure_multi") : f.replace(f.get("delete_search_failure"), {
                                        search_name: A
                                    }),
                                    className: "error"
                                })
                            };
                            b.authenticatedRequest(w.url, w)
                        })
                    }
                }
            })
        },
        _shareSearch: function(v) {
            var w = this;
            var y = v.object_ids[0];
            var u = v.actionsHelper.getValue({
                id: y,
                attribute: "ds6w:label"
            });
            var x = {
                method: "POST",
                headers: {
                    Accept: "application/json, application/xml",
                    "Content-Type": "application/json"
                }
            };
            x.data = JSON.stringify({
                id: y
            });
            v.actionsHelper.getServiceURL({
                id: y,
                onComplete: function(z) {
                    if (UWA.is(z, "string")) {
                        w._initSecurityContext(v, z);
                        a.getSecurityContextPromise().then(function() {
                            var B = a.getSecurityContext();
                            if (B && B.trim().length > 0) {
                                x.headers.SecurityContext = B
                            }
                            x.url = z + "/resources/SNAPI/search_services/savedSearch/lifecycle/share";
                            var A = {
                                onComplete: function(C, D) {
                                    v.actionsHelper.displayAlert({
                                        message: f.replace(f.get("share_search_successful"), {
                                            search_name: u
                                        }),
                                        className: "success"
                                    })
                                },
                                onFailure: function(C) {
                                    v.actionsHelper.displayAlert({
                                        message: f.replace(f.get("share_search_failure"), {
                                            search_name: u
                                        }),
                                        className: "error"
                                    })
                                }
                            };
                            A = UWA.extend(x, A, true);
                            b.authenticatedRequest(x.url, A)
                        })
                    } else {}
                }
            })
        },
        _unshareSearch: function(u) {
            var w = this;
            var y = u.object_ids[0];
            var v = u.actionsHelper.getValue({
                id: y,
                attribute: "ds6w:label"
            });
            var x = {
                method: "POST",
                headers: {
                    Accept: "application/json, application/xml",
                    "Content-Type": "application/json"
                }
            };
            x.data = JSON.stringify({
                id: y
            });
            u.actionsHelper.getServiceURL({
                id: y,
                onComplete: function(z) {
                    if (UWA.is(z, "string")) {
                        w._initSecurityContext(u, z);
                        a.getSecurityContextPromise().then(function() {
                            var B = a.getSecurityContext();
                            if (B && B.trim().length > 0) {
                                x.headers.SecurityContext = B
                            }
                            x.url = z + "/resources/SNAPI/search_services/savedSearch/lifecycle/unshare";
                            var A = {
                                onComplete: function(C, D) {
                                    u.actionsHelper.displayAlert({
                                        message: f.replace(f.get("unshare_search_successful"), {
                                            search_name: v
                                        }),
                                        className: "success"
                                    })
                                },
                                onFailure: function(C) {
                                    u.actionsHelper.displayAlert({
                                        message: f.replace(f.get("unshare_search_failure"), {
                                            search_name: v
                                        }),
                                        className: "error"
                                    })
                                }
                            };
                            A = UWA.extend(x, A, true);
                            b.authenticatedRequest(x.url, A)
                        })
                    } else {}
                }
            })
        },
        _initSecurityContext: function(v, u) {
            a.initSecurityContext({
                url: u,
                tenant: v.actionsHelper.getPlatformID({
                    id: v.object_ids[0]
                })
            })
        }
    });
    return d
});
define("DS/SNResultUX/utils/ResultsUtils", ["UWA/Core", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SNVocabAccess"], function(b, c, d) {
    var a = {
        from_filters_to_uql: function(D, m) {
            var A = "",
                F, x, z, u;
            var f = 0;
            for (var E in D) {
                if (E.indexOf("sixw:") === 0) {
                    var h = E.replace("sixw:", "");
                    h = h.split("/").pop();
                    h = "[" + h + "]";
                    F = D[E];
                    var k = "";
                    if (0 < f) {
                        k = " AND "
                    }
                    f++;
                    var o = false;
                    for (z = 0; z < F.length; z++) {
                        x = F[z];
                        if (!b.is(x.type)) {
                            continue
                        }
                        if (0 === z) {
                            if (1 < F.length) {
                                k += "( ";
                                o = true
                            }
                        }
                        if ((0 < z) && o) {
                            k = " OR "
                        }
                        if (x.type === "string") {
                            if (!b.is(x.object)) {
                                continue
                            }
                            var y = x.object;
                            var q = false;
                            var e = h;
                            if (h === "[ds6w:type]") {
                                if (0 <= y.indexOf(":")) {
                                    q = true
                                }
                                if (0 == y.indexOf("ds6wg:")) {
                                    if (c.getOption("SEARCH_INSTANCES")) {
                                        var g = y.split(":");
                                        var t;
                                        if (g.length > 2) {
                                            t = g.pop();
                                            y = g.join(":");
                                            if (t === "Instance") {
                                                y = y.replace("ds6wg:", "reltypes/")
                                            } else {
                                                if (t === "Class") {
                                                    y = y.replace("ds6wg:", "types/")
                                                }
                                            }
                                        } else {
                                            y = g.join(":");
                                            if (true === d.IsClassAnInstance(y)) {
                                                y = y.replace("ds6wg:", "reltypes/")
                                            }
                                        }
                                    } else {
                                        y = y.replace("ds6wg:", "types/")
                                    }
                                    e = "flattenedtaxonomies"
                                }
                            }
                            if (h === "[vpmextension]") {
                                if (0 <= y.indexOf(":")) {
                                    q = true
                                }
                                if (0 == y.indexOf("ds6wg:")) {
                                    y = y.replace("ds6wg:", "interfaces/");
                                    e = "flattenedtaxonomies"
                                }
                            }
                            if (0 == y.indexOf("enum|")) {
                                q = true;
                                y = y.replace("enum|", "")
                            }
                            if (q) {
                                u = e + ':"' + y + '"'
                            } else {
                                u = e + ":(" + y + ")"
                            }
                            A += k + u
                        } else {
                            if (x.type === "date") {
                                if (!b.is(x.object)) {
                                    continue
                                }
                                if (b.is(x.object.from)) {
                                    var l = new Date(x.object.from + " 00:00:00");
                                    var w = new Date(l).toISOString();
                                    u = h + '>="' + w + '"';
                                    A += k + u;
                                    if (b.is(x.object.to)) {
                                        k = " AND "
                                    }
                                }
                                if (b.is(x.object.to)) {
                                    var s = new Date(x.object.to + " 23:59:59");
                                    var r = new Date(s).toISOString();
                                    u = h + '<="' + r + '"';
                                    A += k + u
                                }
                            } else {
                                if (x.type === "double" || x.type === "integer") {
                                    if (!b.is(x.object)) {
                                        continue
                                    }
                                    if (b.is(x.object.from)) {
                                        u = h + ">=" + x.object.from;
                                        A += k + u;
                                        if (b.is(x.object.to)) {
                                            k = " AND "
                                        }
                                    }
                                    if (b.is(x.object.to)) {
                                        u = h + "<=" + x.object.to;
                                        A += k + u
                                    }
                                } else {
                                    if (x.type === "boolean") {
                                        if (!b.is(x.object)) {
                                            continue
                                        }
                                        u = h + ":" + x.object;
                                        A += k + u
                                    }
                                }
                            }
                        }
                        if (o) {
                            if (F.length === (z + 1)) {
                                A += " )"
                            }
                        }
                    }
                } else {
                    if (b.is(D[E], "array") && D[E].length > 0 && b.is(D[E][0]) && b.is(D[E][0].type, "string") && D[E][0].type === "date") {
                        var j = D[E][0].object;
                        if (!b.is(j, "string")) {
                            continue
                        }
                        var k = "";
                        if (0 < f) {
                            k = " AND "
                        }
                        f++;
                        var h = E.split("/").pop();
                        h = "[" + h + "]";
                        var C = j.split("/");
                        var p = C.length;
                        var l = null,
                            s = null,
                            r = null;
                        var B = null,
                            v = 0,
                            n = 1;
                        if (1 === p) {
                            B = parseInt(j);
                            if (!isNaN(B)) {
                                l = new Date(B, 0);
                                s = new Date(B + 1, 0)
                            }
                        } else {
                            if (2 === p) {
                                B = parseInt(C[0]);
                                v = parseInt(C[1]);
                                if (!isNaN(B) && !isNaN(v)) {
                                    l = new Date(B, v - 1);
                                    s = new Date(B, v)
                                }
                            } else {
                                if (3 === p) {
                                    B = parseInt(C[0]);
                                    v = parseInt(C[1]);
                                    n = parseInt(C[2]);
                                    if (!isNaN(B) && !isNaN(v) && !isNaN(n)) {
                                        l = new Date(B, v - 1, n);
                                        s = new Date(B, v - 1, n + 1)
                                    }
                                }
                            }
                        }
                        var w = new Date(l).toISOString();
                        u = h + '>="' + w + '"';
                        A += k + u;
                        k = " AND ";
                        s = new Date(s - 1);
                        r = new Date(s).toISOString();
                        u = h + '<="' + r + '"';
                        A += k + u
                    }
                }
            }
            return A
        }
    };
    return a
});
define("DS/SNResultUX/utils/SearchLocalActions", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "DS/SNInfraUX/SearchSettings", "DS/SNResultUX/utils/SearchServices", "UWA/Promise", "UWA/Class/Collection", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/SearchUtils", "DS/WAFData/WAFData", "DS/SNInfraUX/ServiceDelegationLoader", "DS/SNInfraUX/SearchLogin", ], function(k, l, h, d, n, i, m, a, o, f, j, e, c) {
    var b = UWA.Class.Model.extend({
        idAttribute: "id"
    });
    var g = l.singleton(h, {
        _action_Unselect_All: {
            sourcejs: "DS/SNResultUX/utils/Select_ActionHandler",
            icon: "select-none",
            multisel: true,
            id: "unselect_all",
            title: o.get("unselectAllTitle")
        },
        _action_Select_All: {
            sourcejs: "DS/SNResultUX/utils/Select_ActionHandler",
            icon: "select-all",
            multisel: true,
            id: "select_all",
            title: o.get("selectAllTitle")
        },
        _isGoodInput: function(q, p) {
            if (!UWA.is(q, "array") || q.length < 0) {
                return false
            }
            if (!UWA.is(p, "object") || !UWA.is(p.skeleton)) {
                return false
            }
            return true
        },
        _isSelectionFromSameSource: function(r) {
            var p = new m([], {
                model: b
            });
            var q = new i(function(z, B) {
                var u = "",
                    v = "";
                var x = true;
                var w = {
                    appName: f.SEARCH_APP_ID,
                    objects: []
                };
                var y = function(C) {
                    var D = C.get("ds6w:type_value");
                    var E = {
                        id: C.id,
                        type: D,
                        source: C.getSourceID()
                    };
                    w.objects.push(E);
                    p.add(E)
                };
                var t = r.length;
                for (var s = 0; s < t && x; s++) {
                    var A = r[s];
                    if (k.is(A)) {
                        y(A);
                        if (s === 0) {
                            v = A.getSourceID();
                            u = A.getServiceID();
                            w.platformId = A.getPlatformID()
                        } else {
                            if (u !== A.getServiceID()) {
                                x = false
                            }
                        }
                    }
                }
                if (x) {
                    z({
                        data: w,
                        sourceID: v,
                        serviceID: u,
                        objectsToTreat: p,
                        models: r
                    })
                } else {
                    B({
                        data: w,
                        sourceID: v,
                        serviceID: u,
                        objectsToTreat: p,
                        models: r
                    })
                }
            });
            return q
        },
        _buildEmptyAction: function(p) {
            return {
                actions: [],
                id: p
            }
        },
        _buildEmptyActionsOnFailure: function(q) {
            var p = {
                actions: [],
                status: "failure"
            };
            for (var r = 0; r < q.data.objects.length; r++) {
                p.actions.push(this._buildEmptyAction(q.data.objects[r].id))
            }
            return p
        },
        _addEmptyActions: function(q, u) {
            if (UWA.is(q) && UWA.is(q.actions, "array")) {
                if (u.objectsToTreat.size() !== q.actions.length) {
                    for (var p = 0; p < q.actions.length; p++) {
                        var t = q.actions[p];
                        u.objectsToTreat.remove(u.objectsToTreat.get(t.id))
                    }
                    var s = u.objectsToTreat.toArray();
                    if (UWA.is(s, "array")) {
                        for (var r = 0; r < s.length; r++) {
                            q.actions.push(this._buildEmptyAction(s[r].get("id")))
                        }
                    }
                }
            }
        },
        _addSelectUnselect: function(q, r) {
            if (f.isFUNActive("FUN075064")) {
                if (UWA.is(q) && UWA.is(q.actions, "array")) {
                    for (var p = 0; p < q.actions.length; p++) {
                        var s = q.actions[p].actions;
                        if (r.add_unselectAll) {
                            s.unshift(this._action_Unselect_All)
                        }
                        if (r.add_selectAll) {
                            s.unshift(this._action_Select_All)
                        }
                    }
                }
            }
        },
        _getLanguage: function() {
            var p = f.getLanguage();
            if ("zh" == p) {
                p += "_CN"
            }
            return p
        },
        _treatActionImages: function(p, q) {
            if (p && k.is(p.actions, "array")) {
                p.actions.forEach(function(r) {
                    if (k.is(r.actions, "array")) {
                        var t = r.actions;
                        for (var s = 0; s < t.length; s++) {
                            if (t[s].iconImage) {
                                if (t[s].iconImage.includes("://")) {
                                    t[s].image = t[s].iconImage
                                } else {
                                    t[s].image = q + t[s].iconImage
                                }
                            }
                        }
                    }
                })
            }
        },
        executeWSAction: function(r) {
            if (UWA.is(r)) {
                var q = r.url,
                    u = r.method;
                if (UWA.is(q, "string") && UWA.is(u, "string")) {
                    var s = this;
                    var t = {};
                    t.method = u;
                    t.headers = r.headers || {};
                    t.headers["Accept-Language"] = this._getLanguage();
                    t.url = r.url + "/?oid=" + r.selected_obj;
                    if (UWA.is(r.data, "object") || UWA.is(r.data, "array")) {
                        t.data = JSON.stringify(r.data)
                    } else {
                        if (UWA.is(r.data, "string")) {
                            t.data = r.data
                        }
                    }
                    var p = function(v) {
                        var y = null,
                            x = null;
                        try {
                            var w = JSON.parse(v);
                            y = w.message;
                            if (!UWA.is(y, "string")) {
                                y = "INVALID response";
                                x = "error"
                            }
                            x = w.status;
                            if (!UWA.is(x)) {
                                x = "success"
                            }
                        } catch (z) {
                            y = "INVALID response";
                            x = "error"
                        }
                        r.displayAlert({
                            message: y,
                            className: x
                        })
                    };
                    t.onComplete = function(v) {
                        s.log("WS execution done, inide onComplete");
                        p(v)
                    };
                    t.onFailure = function(v) {
                        s.log("WS execution done, inide onFailure");
                        p(v)
                    };
                    j.authenticatedRequest(t.url, t)
                } else {
                    this.log("invalid execute options, url = " + q + ", method=" + u)
                }
            }
        },
        getActions: function(p) {
            var q = this;
            if (UWA.is(p)) {
                if (!UWA.is(p.data) || !UWA.is(p.data.objects) || (p.data.objects.length === 0)) {
                    if (UWA.is(p.onFailure, "function")) {
                        p.onFailure.call(undefined, {
                            type: "invalid_inputs",
                            error: "invalid inputs"
                        })
                    }
                } else {
                    var r = function(t) {
                        var s = {};
                        s.method = "POST";
                        s.headers = t.headers || {};
                        s.headers.Accept = "application/json";
                        s.headers["Accept-Language"] = q._getLanguage();
                        s.headers["Content-Type"] = "application/json";
                        s.url = t.url;
                        s.data = JSON.stringify(p.data);
                        s.onComplete = function(v) {
                            var u = k.is(v, "string") ? (v.length > 0 ? JSON.parse(v) : {}) : v;
                            if (UWA.is(p.onComplete, "function")) {
                                p.onComplete.call(undefined, u)
                            }
                        };
                        s.onFailure = function(u) {
                            if (UWA.is(p.onFailure, "function")) {
                                p.onFailure.call(undefined, {
                                    type: "web_service_failure",
                                    error: u
                                })
                            }
                        };
                        j.authenticatedRequest(s.url, s)
                    };
                    if (UWA.is(p.serviceID, "string") && p.serviceID.length > 0) {
                        a.getServiceUrl({
                            serviceName: p.serviceID,
                            platformId: p.data.platformId,
                            onComplete: function(s) {
                                e.load({
                                    serviceID: p.serviceID,
                                    platformID: p.data.platformId,
                                    serviceURL: s
                                }).then(function(u) {
                                    if (UWA.is(u.getActions, "function")) {
                                        var t = {
                                            models: p.models,
                                            widget_id: p.widget_id,
                                            data: p.data,
                                            serviceURL: s,
                                            headers: {
                                                Accept: "application/json",
                                                "Accept-Language": q._getLanguage()
                                            },
                                            onComplete: function(v) {
                                                if (UWA.is(p.onComplete, "function")) {
                                                    q._treatActionImages(v, s);
                                                    p.onComplete.call(undefined, v)
                                                }
                                            },
                                            onFailure: function(v) {
                                                if (UWA.is(p.onFailure, "function")) {
                                                    p.onFailure.call(undefined, {
                                                        type: "action_delegation_failure",
                                                        error: v
                                                    })
                                                }
                                            }
                                        };
                                        u.getActions(t)
                                    } else {
                                        if (UWA.is(u.getActionsPath, "function")) {
                                            r({
                                                url: s + u.getActionsPath({
                                                    sourceID: p.sourceID,
                                                    platformID: p.data.platformId
                                                })
                                            })
                                        } else {
                                            if (UWA.is(p.onFailure, "function")) {
                                                p.onFailure.call(undefined, {
                                                    type: "action_delegation_not_impl",
                                                    error: "service delegation for actions not implemented"
                                                })
                                            }
                                        }
                                    }
                                }, function(t) {
                                    e.discover({
                                        platformID: p.data.platformId,
                                        sourceID: p.sourceID
                                    }).then(function(v) {
                                        if (UWA.is(v, "object") && UWA.is(v.APIs, "object")) {
                                            var u = v.APIs.getActionsPath;
                                            if (UWA.is(u, "object") && UWA.is(u.url, "string")) {
                                                r({
                                                    url: u.url,
                                                    headers: u.headers
                                                })
                                            }
                                        }
                                    }, function() {
                                        if (UWA.is(p.onFailure, "function")) {
                                            p.onFailure.call(undefined, {
                                                type: "require_failure",
                                                error: t
                                            })
                                        }
                                    })
                                })
                            }
                        })
                    } else {
                        e.discover({
                            platformID: p.data.platformId,
                            sourceID: p.sourceID
                        }).then(function(t) {
                            if (UWA.is(t, "object") && UWA.is(t.APIs, "object")) {
                                var s = t.APIs.getActionsPath;
                                if (UWA.is(s, "object") && UWA.is(s.url, "string")) {
                                    r({
                                        url: s.url,
                                        headers: s.headers
                                    })
                                }
                            }
                        }, function() {
                            if (UWA.is(p.onFailure, "function")) {
                                p.onFailure.call(undefined, {
                                    type: "require_failure",
                                    error: error
                                })
                            }
                        })
                    }
                }
            }
        },
        computeCtxActions: function(s, r) {
            if (!this._isGoodInput(s, r)) {
                throw ("input is not in expected format")
            }
            var u = this;
            var v = r.skeleton;
            var q = k.is(s, "array") ? s.length : 0;
            var p = k.is(v) && k.is(v._onesearch_collection) && k.is(v._onesearch_collection.totalCount) ? v._onesearch_collection.totalCount : 0;
            var t = undefined;
            if (!d.getOption("search_web_in_win") && (k.is(v) && v._selectionMode_techno !== "oneToOne")) {
                t = {
                    add_selectAll: q !== p,
                    add_unselectAll: true
                }
            }
            this._isSelectionFromSameSource(s).then(function(w) {
                w.data.applicativeInfo = {
                    incontextMode: UWA.is(r.skeleton.getOption("in_apps_search")) ? true : false,
                    clientAppInfo: f.identifyClientInfo(r.skeleton.getOption("addinMode"))
                };
                if (UWA.is(v)) {
                    w.widget_id = v.getOption("widgetId")
                }
                w.onComplete = function(x) {
                    if (x.status === "success") {
                        u._addEmptyActions(x, w);
                        if (UWA.is(t)) {
                            u._addSelectUnselect(x, t)
                        }
                        r.skeleton.setCtxMenuForItemViewOptions({
                            actions_data: x,
                            dropdownOptions: r
                        })
                    } else {
                        var x = u._buildEmptyActionsOnFailure(w);
                        if (UWA.is(t)) {
                            u._addSelectUnselect(x, t)
                        }
                        r.skeleton.setCtxMenuForItemViewOptions({
                            actions_data: x,
                            dropdownOptions: r
                        })
                    }
                };
                w.onFailure = function(y) {
                    if (UWA.is(y) && UWA.is(y.error)) {
                        console.warn("Error during action computation: " + y.error);
                        if (!d.getOption("search_web_in_win")) {
                            if (y.type === "invalid_inputs") {
                                var x = {
                                    actions: [{
                                        actions: []
                                    }]
                                };
                                u._addSelectUnselect(x, {
                                    add_selectAll: true
                                })
                            } else {
                                var x = u._buildEmptyActionsOnFailure(w);
                                if (UWA.is(t)) {
                                    u._addSelectUnselect(x, t)
                                }
                            }
                        }
                        r.skeleton.setCtxMenuForItemViewOptions({
                            actions_data: x,
                            dropdownOptions: r
                        })
                    }
                };
                u.getActions(w)
            }, function(x) {
                var w = u._buildEmptyActionsOnFailure(x);
                if (UWA.is(t)) {
                    u._addSelectUnselect(w, t)
                }
                r.skeleton.setCtxMenuForItemViewOptions({
                    actions_data: w,
                    dropdownOptions: r
                });
                n._displayAlert({
                    message: o.replace(o.get("localActions_multiSource")),
                    className: "error"
                })
            })
        }
    });
    return g
});
define("DS/SNResultUX/views/PCSView", ["UWA/Drivers/Alone", "UWA/Core", "UWA/Class/Model", "UWA/Class/View", "UWA/Class/Collection", "DS/3DXHighcharts/3DXHighcharts", "DS/HighChartsModules/HighCharts_drilldown", "DS/WebappsUtils/Performance", "DS/SNInfraUX/SearchUtils", "text!DS/SNResultUX/assets/PCSView.json", "i18n!DS/SNResultUX/assets/nls/SNResultUX_PCS.json"], function(l, j, e, a, h, g, f, c, i, b, m) {
    var d = function(n) {
        var v = e.extend({
            setup: function() {
                try {
                    var y = JSON.parse(this._attributes.name);
                    this._attributes = j.extend(this._attributes, y, true)
                } catch (x) {}
            }
        });
        var p = JSON.parse(b),
            w = {};
        switch (n) {
            case "columnrange":
                var s = c.getEntriesByType("mark"),
                    r = 0,
                    t = new h(s, {
                        model: v,
                        from_getEntries: true
                    });
                w = j.extend(p[n], w, true);
                w.title.text = m.get("PCSView.columnrange.chart.title");
                w.subtitle.text = m.get("PCSView.columnrange.chart.subtitle");
                w.xAxis.title.text = m.get("PCSView.xAxis.title");
                w.yAxis.title.text = m.get("PCSView.yAxis.title");
                w.xAxis.labels.formatter = function() {
                    return m.get("PCSView.labels." + this.value)
                };
                w.tooltip.formatter = function() {
                    return m.replace(m.get("PCSView.tooltip." + this.key), {
                        duration: (this.point.high - this.point.low)
                    })
                };
                var u = [];
                t.forEach(function(y) {
                    var z = t.where({
                            name: y.get("name"),
                            uuid: y.get("uuid")
                        }),
                        C = z[0].clone();
                    if (z.length === 2 && y.get("status") === "start") {
                        C.set({
                            endTime: z[1].get("startTime")
                        })
                    } else {
                        if (z.length === 1) {
                            C.set({
                                endTime: "NaN"
                            })
                        }
                    }
                    if (UWA.is(C.get("drilldown"))) {
                        C.set({
                            drilldown: C.get("drilldown") + "_" + C.get("uuid")
                        })
                    }
                    if (UWA.is(C.get("drilldown_serie_id"))) {
                        var x = C.get("endTime"),
                            B = C.get("drilldown_serie_id"),
                            A = t.filter(function(D) {
                                return !(D.get("startTime") > x) && D.get("drilldown") === B
                            });
                        if (A.length > 0) {
                            C.set({
                                drilldown_serie_id: A[0].get("drilldown") + "_" + A[0].get("uuid")
                            })
                        }
                    }
                    if (y.get("status") !== "end") {
                        u.push(C)
                    }
                });
                t.reset(u);
                var q = t.pluck("drilldown");
                q.forEach(function(y) {
                    if (y === undefined) {
                        return
                    }
                    w.drilldown.series.push({
                        id: y,
                        data: []
                    });
                    var z = w.drilldown.series.length - 1,
                        x = t.where({
                            drilldown_serie_id: y
                        });
                    x.forEach(function(A) {
                        w.drilldown.series[z].data.push({
                            id: y,
                            name: A.get("name"),
                            low: A.get("startTime"),
                            high: A.get("endTime"),
                            drilldown: A.get("drilldown")
                        })
                    })
                });
                var o = t.reject(function(x) {
                    return UWA.is(x.get("drilldown_serie_id"))
                });
                o.forEach(function(z) {
                    var x = z.get("drilldown"),
                        y = t.max(function(B) {
                            return B.get("drilldown_serie_id") === x ? B.get("endTime") : 0
                        }).get("endTime"),
                        A = {
                            name: z.get("name"),
                            low: z.get("startTime"),
                            high: y,
                            drilldown: z.get("drilldown")
                        };
                    w.series[0].data.push(A)
                });
                break;
            default:
                throw new Error("Invalid chart type")
        }
        return w
    };
    var k = a.extend({
        name: "search_pcs_view",
        highcharts_options: {},
        setup: function(p) {
            var n = this;
            n._parent(p);
            var r = UWA.createElement("div", {
                    "class": "pcs_result_action"
                }).inject(n.container),
                o = UWA.createElement("div", {
                    "class": "pcs_result_charts"
                }).inject(n.container);
            UWA.createElement("span", {
                "class": "pcs_close_btn fonticon-2x fonticon fonticon-back",
                events: {
                    click: function() {
                        n.dispatchEvent("onClose");
                        n.destroy()
                    }
                }
            }).inject(r);
            n.highcharts_options = j.extend(d("columnrange"), n.highcharts_options, true);
            if (p.width && p.height) {
                n.highcharts_options.chart.width = p.width;
                n.highcharts_options.chart.height = p.height
            } else {
                if (p.renderTo) {
                    n.highcharts_options.chart.width = p.renderTo.getSize().width;
                    n.highcharts_options.chart.height = p.renderTo.getSize().height
                }
            }
            n.highcharts_options.chart.renderTo = o;
            var q = new g.Chart(n.highcharts_options);
            if (p.renderTo) {
                this.render().inject(p.renderTo)
            }
        },
        render: function(n) {
            return this
        }
    });
    return k
});
define("DS/SNResultUX/utils/Select_ActionHandler", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events"], function(b, e, a, d) {
    var c = e.singleton(d, a, {
        executeAction: function(f, h) {
            if (!b.is(f, "object") || !b.is(f.object_ids, "array") || !b.is(f.action_id, "string") || !f.actionsHelper) {
                throw ("invalid input to action handler")
            }
            switch (f.action_id) {
                case "select_all":
                    var g = f.actionsHelper;
                    g.selectAll(f);
                    break;
                case "unselect_all":
                    var g = f.actionsHelper;
                    g.unselectAll(f);
                    break
            }
        },
    });
    return c
});
define("DS/SNResultUX/utils/ContentLocationServices", ["UWA/Core", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchVersioning", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchLogin"], function(m, g, k, i, f) {
    var h = {
        R2019x: "BETA3"
    };
    var e = "contentsLocation_FUN072059";
    var j = "ds6w:where/ds6w:context/ds6w:project";
    var c = "ds6w:where/ds6w:source/ds6w:dataSource";
    var d = "ds6w:where/ds6w:context/ds6w:community";
    var b = {};
    var l = 0;
    var a;
    a = {
        transformToDataSourceFacets: function(p, q) {
            var o = p[q];
            var r = "";
            var s = 0;
            if (o.sixw == j) {
                if (UWA.is(o.object, "array") == true) {
                    r = o.object;
                    s = r.indexOf("_drv")
                } else {
                    r = o.object;
                    s = r.indexOf("_drv")
                }
                if (s > 0) {
                    o.object = ["platform", o.object];
                    o.sixw = c;
                    o.dispValue = []
                } else {
                    o.object = ["platform", "3DSpace", o.object];
                    o.sixw = c;
                    o.dispValue = []
                }
            }
            if (o.sixw == d) {
                o.sixw = c;
                o.object = ["platform", "3DSwym", o.object];
                o.dispValue = []
            }
        },
        transformTagsValuesToDataSourceFacets: function(p, o, q, r) {
            var t = p[o[q]][r];
            var s = "";
            var u = 0;
            if (t.sixw == j) {
                if (UWA.is(t.object, "array") == true) {
                    s = t.object;
                    u = s.indexOf("_drv")
                } else {
                    s = t.object;
                    u = s.indexOf("_drv")
                }
                if (u > 0) {
                    t.object = ["platform", t.object];
                    t.sixw = c;
                    t.dispValue = []
                } else {
                    t.object = ["platform", "3DSpace", t.object];
                    t.sixw = c;
                    t.dispValue = []
                }
            }
            if (t.sixw == d) {
                t.object = ["platform", "3DSwym", t.object];
                t.sixw = c;
                t.dispValue = []
            }
        },
        transformFilterSourceToProject: function(t) {
            var B = t.localfilters;
            var A = t.allfilters;
            if (B.hasOwnProperty(c) == true || A.hasOwnProperty(c) == true) {
                var n = 1;
                var u = 1;
                var o = 1;
                var D = 0;
                var v = 0;
                var s = 0;
                var q = 0;
                var y;
                var x = A.length;
                var r = "";
                var C = 0;
                var p = 0;
                var E = b;
                if (UWA.is(B[c], "array") == true && B[c].length > 0 || (UWA.is(A[c], "array") == true && A[c].length)) {
                    for (var z = 0; z < B[c].length; z++) {
                        if (UWA.is(B[c][z].object, "array") == true) {
                            r = [B[c][z].object[0]];
                            C = B[c][z].object.length
                        } else {
                            r = [B[c][z].object];
                            C = 1
                        }
                        if (C == 1 && (r[0] == "platform")) {
                            if (b.hasOwnProperty("3DSpace") == true && b.hasOwnProperty("3DSwym") == true) {
                                B[c][z].object = [b["3DSpace"], b["3DSwym"]];
                                A[c][z].object = [b["3DSpace"], b["3DSwym"]]
                            } else {
                                if (b.hasOwnProperty("3DSpace") == true && b.hasOwnProperty("3DSwym") == false) {
                                    B[c][z].object = [b["3DSpace"]];
                                    A[c][z].object = [b["3DSpace"]]
                                } else {
                                    B[c][z].object = [b["3DSwym"]];
                                    A[c][z].object = [b["3DSwym"]]
                                }
                            }
                        } else {
                            if (r[0] == "GoogleDrive" && C == 1) {
                                B[c][z].object = ["googledrive"];
                                A[c][z].object = ["googledrive"]
                            } else {}
                        }
                        r = [B[c][z].object[1]];
                        if (C == 2 && (r[0] == "3DSpace" || r[0] == "3DSwym" || r[0].indexOf("_drv") > 0)) {
                            if (r[0] == "3DSpace" && b.hasOwnProperty("3DSpace")) {
                                B[c][z].object = [b["3DSpace"]];
                                A[c][z].object = [b["3DSpace"]]
                            } else {
                                if (r[0] == "3DSwym" && b.hasOwnProperty("3DSwym")) {
                                    B[c][z].object = [b["3DSwym"]];
                                    A[c][z].object = [b["3DSwym"]]
                                } else {
                                    var w = r[0];
                                    p = w.indexOf("_drv");
                                    if (p > 0) {
                                        y = A[c][z].object.length;
                                        if (o == 1) {
                                            B[j] = [];
                                            A[j] = [];
                                            o = 6
                                        }
                                        B[j].push(B[c][z]);
                                        D = B[j][q].object.length;
                                        B[j][q].object = B[j][q].object[D - 1];
                                        A[j].push(A[c][z]);
                                        D = A[j][q].object.length;
                                        A[j][q].object = A[j][q].object[D - 1];
                                        q = q + 1
                                    }
                                }
                            }
                        }
                        if (C > 2) {
                            r = [B[c][z].object[1]];
                            if (r[0] == "3DSwym") {
                                y = A[c][z].object.length;
                                if (n == 1) {
                                    B[d] = [];
                                    A[d] = [];
                                    n = 3
                                }
                                B[d].push(B[c][z]);
                                D = B[d][s].object.length;
                                B[d][s].object = B[d][s].object[D - 1];
                                A[d].push(A[c][z]);
                                D = A[d][s].object.length;
                                A[d][s].object = A[d][s].object[D - 1];
                                s = s + 1
                            }
                            if (r[0] == "3DSpace") {
                                y = A[c][z].object.length;
                                if (u == 1) {
                                    B[j] = [];
                                    A[j] = [];
                                    u = 5
                                }
                                B[j].push(B[c][z]);
                                D = B[j][v].object.length;
                                B[j][v].object = B[j][v].object[D - 1];
                                A[j].push(A[c][z]);
                                D = A[j][v].object.length;
                                A[j][v].object = A[j][v].object[D - 1];
                                v = v + 1
                            }
                        }
                    }
                    if (C > 2 || (p > 0 && C == 2)) {
                        delete B[c];
                        delete A[c]
                    }
                }
            }
        },
        updateFilter: function(p, n) {
            var q = [];
            if (p.allfilters.hasOwnProperty(c) == true && Object.keys(p.allfilters).length == 1) {
                for (var o = 0; o < p.allfilters[c].length; o++) {
                    if (UWA.is(p.allfilters[c][o].object, "array") == true) {
                        q[o] = p.allfilters[c][o].object[0]
                    } else {
                        q = p.allfilters[c][o].object
                    }
                }
                n.options.search_options.tag_filter.allfilters = {};
                n.options.search_options.tag_filter.localfilters = {};
                n._search_tag_filter.allfilters = {};
                n._search_tag_filter.localfilters = {}
            } else {
                if (p.allfilters.hasOwnProperty(c) == true && Object.keys(p.allfilters).length > 1) {
                    delete n.options.search_options.tag_filter.allfilters[c];
                    delete n._search_tag_filter.allfilters[c];
                    if (p.localfilters.hasOwnProperty(c) == true) {
                        delete n.options.search_options.tag_filter.localfilters[c];
                        delete n._search_tag_filter.localfilters[c]
                    }
                } else {}
            }
            return q
        },
        getAvblSource: function(p) {
            var n = f.getAvailableSources(p);
            for (var o = 0; o < n.length; o++) {
                if (n[o].status == true) {
                    b[n[o].service] = n[o].name
                }
            }
        },
        transformNlsPropertiesValue: function(n) {
            if (n.hasOwnProperty("ds6w:dataSource") == true) {
                if (n["ds6w:dataSource"].hasOwnProperty("platform/3DSpace") == true) {
                    n["ds6w:dataSource"]["platform/3DSpace"] = n["ds6w:dataSource"]["3DSpace"]
                }
                if (n["ds6w:dataSource"].hasOwnProperty("platform/3DSwym") == true) {
                    n["ds6w:dataSource"]["platform/3DSwym"] = n["ds6w:dataSource"]["3DSwym"]
                }
            }
        },
        prepareNlsPropertiesValueForServer: function(n, p) {
            if (n == "ds6w:dataSource" && (p == "platform/3DSpace" || p == "platform/3DSwym")) {
                var o = p.replace("platform/", "");
                p = o
            }
            return p
        },
        isContentLocationActive: function() {
            if (i.identifyClientInfo().identifier === "3DDashboard") {
                if (g.getOption(e)) {
                    if (k.isActiveWithCurrentVersion(h)) {
                        return true
                    }
                }
            }
            return false
        }
    };
    return a
});
define("DS/SNResultUX/utils/FederatedSearch_parse", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/SearchUtils", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(g, h, e, b, d, c, i) {
    var f = {};
    var a = h.extend(e, {
        name: "DS_SNResultUX_utils_FederatedSearch_parse",
        response_infos: {},
        results: [],
        summaryData: [],
        tagsData: {},
        ids: [],
        isReady: false,
        _isRecentSearch: false,
        _sourceErrorCodeToFilter: ["FS_SOURCE_UNREACHABLE__DNS_UNKNOWN_HOST", "FS_SOURCE_UNREACHABLE__TIMEOUT", "FS_SOURCE_UNREACHABLE__HTTP_NOT_FOUND", "FS_AUTHENTICATION_ERROR__FORBIDDEN"],
        init: function(j) {
            this.setDebugMode(b.getDebugMode());
            this._isRecentSearch = j.isRecentSearch;
            this.results = [];
            this.response_infos = j.federated_response.infos;
            this.summaryData = j.federated_response.facets;
            if (UWA.is(j.federated_response.results)) {
                this._parse(j.federated_response.results)
            }
            this.isReady = true
        },
        getUserLevelAlerts: function() {
            this.log("getUserLevelAlerts on federated service parse");
            var n = [];
            if (UWA.is(this.response_infos.sources)) {
                for (var r = 0; r < this.response_infos.sources.length; r++) {
                    var j = this.response_infos.sources[r];
                    var q = i.get(j.name + ".displayName");
                    if (!g.is(q) || 0 >= q.length) {
                        q = j.name
                    }
                    var o = new Error();
                    var p = (g.is(o) && g.is(o.stack)) ? o.stack : "";
                    var s = "";
                    if (g.is(j.error)) {
                        if (g.is(j.error.errorCode) && (true === this.debugMode || j.name === "3dspace" || j.name === "drive" || j.name === "scientificreferential")) {
                            if ("FS_AUTHENTICATION_ERROR" === j.error.errorCode && j.error.errorMessage.indexOf("User has no preferred Security Context") > -1) {
                                s += i.get("FS_AUTHENTICATION_ERROR_UserHasNoPreferredSecurityContext")
                            } else {
                                var k = i.get(j.error.errorCode + ".code");
                                var m = i.get(j.error.errorCode + ".message");
                                if (k !== j.error.errorCode + ".code") {
                                    s += i.replace(i.get("error_code"), {
                                        errorCode: k
                                    })
                                } else {
                                    s += i.replace(i.get("error_code"), {
                                        errorCode: j.error.errorCode
                                    })
                                }
                                if (m !== j.error.errorCode + ".message") {
                                    s += "<br>" + i.replace(i.get("error_msg"), {
                                        errorMessage: m
                                    })
                                } else {
                                    if (g.is(j.error.errorMessage)) {
                                        s += "<br>" + i.replace(i.get("error_msg"), {
                                            errorMessage: j.error.errorMessage
                                        })
                                    }
                                }
                            }
                        }
                    }
                    if (j.status === false) {
                        if (g.is(j.error)) {
                            if (!g.is(j.error.errorCode) || -1 === this._sourceErrorCodeToFilter.indexOf(j.error.errorCode)) {
                                s = i.replace(i.get("fetchFailure_partial_answer"), {
                                    displayName: q,
                                    message: s
                                });
                                n.push({
                                    className: "warning",
                                    message: s
                                });
                                s += "<br>" + p.toString()
                            }
                        }
                    } else {
                        if (b.options.search_settings.alert_on_sucess === true) {
                            s = i.replace(i.get("fetch_succeed"), {
                                displayName: q,
                                message: s
                            });
                            n.push({
                                className: "info",
                                message: s
                            })
                        }
                    }
                }
            } else {
                var l = {
                    message: i.get("No_Source_Found"),
                    className: "error"
                };
                n.push(l)
            }
            return n
        },
        getAlerts: function() {
            this.log("getAlerts on federated service parse");
            var m = [];
            if (UWA.is(this.response_infos.sources)) {
                for (var j = 0; j < this.response_infos.sources.length; j++) {
                    var l = this.response_infos.sources[j];
                    if (l.status === false) {
                        m.push({
                            className: "warning",
                            message: i.replace(i.get("query_failed"), {
                                source_name: l.name,
                                source_error: (l.error ? l.error.errorMessage : "no error message")
                            })
                        })
                    } else {
                        if (b.options.search_settings.alert_on_sucess === true) {
                            m.push({
                                className: "info",
                                message: i.replace(i.get("query_succeeded"), {
                                    source_name: l.name
                                })
                            })
                        }
                    }
                }
            } else {
                var k = {
                    message: i.get("no_source_found"),
                    className: "error"
                };
                m.push(k)
            }
            return m
        },
        getMatches: function() {
            if (UWA.is(this.response_infos) && UWA.is(this.response_infos.nmatches)) {
                return parseInt(this.response_infos.nmatches)
            } else {
                if (UWA.is(this.response_infos) && UWA.is(this.response_infos.nhits)) {
                    return parseInt(this.response_infos.nhits)
                } else {
                    return 0
                }
            }
        },
        getTags: function() {
            return {
                tagsData: this.tagsData,
                summaryData: this.summaryData
            }
        },
        getResults: function() {
            return this.results
        },
        getAttributesDefinition: function() {
            return f
        },
        getIds: function() {
            return this.ids
        },
        _parse: function(m) {
            this.log("Parse the federated result");
            var r = [],
                n = [],
                j = {},
                o = this,
                k = "Warning:Flattening",
                l = "Warning:JPO",
                q = c.getRegion(),
                p = c.getLanguage(),
                s = b.getOption("dateFormatOption");
            if (g.is(q) && q.length > 0) {
                p += "-" + q
            }
            m.forEach(function(u) {
                var t = {
                        isRecentSearchResult: o._isRecentSearch
                    },
                    w = [],
                    x = "",
                    B = "",
                    y = "",
                    v = "",
                    z = "",
                    C = "";
                var A = u.attributes;
                A.forEach(function(I) {
                    if (k === I.value || l === I.value) {
                        return
                    }
                    var D = I.value,
                        O = g.is(I.dispValue) ? I.dispValue : I.value;
                    var J = g.is(I.type, "string") ? I.type.toLowerCase() : "unknown_type";
                    if ((!g.is(I.format) || I.format !== "internal" || I.type === "string") && g.is(I.value, "string")) {
                        O = c.escapeHtml(O)
                    }
                    if ("date" === J || I.name === "ds6w:created" || I.name === "ds6w:modified") {
                        var L = Date.parse(D);
                        if (isNaN(L)) {
                            O = D
                        } else {
                            O = new Date(L).toLocaleString(p, s);
                            O = O.replace(",", "")
                        }
                    }
                    if (I.name === "resourceid") {
                        t.id = D
                    } else {
                        if (I.name === "ds6w:when/ds6w:modified") {
                            x = D
                        } else {
                            if (I.name === "ds6w:modified") {
                                B = D
                            } else {
                                if (I.name === "ds6w:when/ds6w:created") {
                                    y = D
                                } else {
                                    if (I.name === "ds6w:created") {
                                        v = D
                                    } else {
                                        if (I.name === "ds6w:type") {
                                            z = D
                                        } else {
                                            if (I.name === "ds6w:what/ds6w:type") {
                                                C = D
                                            } else {
                                                if (I.name === "ds6w:where/ds6w:source/ds6w:dataSource") {
                                                    I.type = "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var E = I.name.match(/\/([^/]*)$/);
                    if (g.is(E, "array") && E.length > 1) {
                        E = E[1]
                    } else {
                        E = I.name
                    }
                    f[E] = {
                        type: g.is(I.type, "string") ? I.type.toLowerCase() : null,
                        URI: I.name,
                        format: I.format
                    };
                    if (I.format === "ds6w_facet") {
                        var P = {
                            object: g.clone(D),
                            sixw: I.name,
                            field: I.field,
                            type: I.type
                        };
                        if (typeof O === "undefined" || O === "") {
                            P.dispValue = g.clone(D)
                        } else {
                            P.dispValue = g.clone(O)
                        }
                        w.push(P)
                    }
                    if (t[I.name] !== undefined) {
                        if (!(t[I.name] instanceof Array)) {
                            var H = t[I.name];
                            t[I.name] = [];
                            t[I.name].push(H);
                            var M = t[I.name + "_value"];
                            t[I.name + "_value"] = [];
                            t[I.name + "_value"].push(M)
                        }
                        if (typeof O === "undefined" || O === "") {
                            t[I.name].push(D)
                        } else {
                            t[I.name].push(O)
                        }
                        t[I.name + "_value"].push(D)
                    } else {
                        if (g.is(O, "array")) {
                            t[I.name] = [g.clone(D)];
                            t[I.name + "_value"] = [g.clone(D)]
                        } else {
                            if (typeof O === "undefined" || O === "") {
                                t[I.name] = g.clone(D)
                            } else {
                                t[I.name] = g.clone(O)
                            }
                            t[I.name + "_value"] = g.clone(D)
                        }
                    }
                    var N = null;
                    if (I.format === "ds6w") {
                        N = I.name.replace("ds6w:", "")
                    } else {
                        if (I.format === "ds6w_facet" && I.field !== undefined) {
                            N = I.field.toLowerCase()
                        }
                    }
                    var K = I.name.lastIndexOf("/");
                    if (K >= 0) {
                        var E = I.name.slice(I.name.lastIndexOf("/") + 1, I.name.length);
                        if (g.is(E) && E.length) {
                            t[E] = t[I.name];
                            t[E + "_value"] = t[I.name + "_value"]
                        }
                    }
                    if (N !== null) {
                        if (t[N] !== undefined) {
                            if (!(t[N] instanceof Array)) {
                                var F = t[N];
                                t[N] = [];
                                t[N].push(F);
                                var G = t[N + "_value"];
                                t[N + "_value"] = [];
                                t[N + "_value"].push(G)
                            }
                            if (typeof O === "undefined" || O === "") {
                                t[N].push(D)
                            } else {
                                t[N].push(O)
                            }
                            t[N + "_value"].push(D)
                        } else {
                            if (typeof O === "undefined" || O === "") {
                                t[N] = D
                            } else {
                                t[N] = O
                            }
                            t[N + "_value"] = D
                        }
                    }
                });
                if (x.length === 0 && B.length > 0) {} else {
                    if (x.length > 0 && B.length === 0) {
                        t["ds6w:modified"] = t["ds6w:when/ds6w:modified"];
                        t["ds6w:modified_value"] = t["ds6w:when/ds6w:modified_value"]
                    }
                }
                if (y.length === 0 && v.length > 0) {} else {
                    if (y.length > 0 && v.length === 0) {
                        t["ds6w:created"] = t["ds6w:when/ds6w:created"];
                        t["ds6w:created_value"] = t["ds6w:when/ds6w:created_value"]
                    }
                }
                if (z.length > 0 && 0 === C.length) {
                    t["ds6w:what/ds6w:type"] = t["ds6w:type"];
                    t["ds6w:what/ds6w:type_value"] = t["ds6w:type_value"]
                }
                if (UWA.is(t.id, "string") && t.id.length > 0) {
                    j[c.getTaggerSubject({
                        id: t.id,
                        source: t.sourceid_value
                    })] = w;
                    r.push(t);
                    n.push(t.id)
                } else {
                    o.log("Invalid result object " + JSON.stringify(u))
                }
            });
            this.tagsData = j;
            this.results = r;
            this.ids = n
        }
    });
    return a
});
define("DS/SNResultUX/utils/ConfigActions", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Utils/InterCom", "DS/SNResultUX/utils/SearchServices", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "UWA/Promise", "DS/SNInfraUX/SearchPreferences"], function(h, c, i, j, d, e, k, a, g, f) {
    var b = c.extend({
        name: "Config_Explore_Action",
        _compass_socket: null,
        _action_info: null,
        _role_check_promise: null,
        init: function() {
            this._action_info = [{
                title: "Tree View",
                icon: "network",
                id: "config_explore",
                multisel: false,
                callback: this.launchCustoAction.bind(this)
            }]
        },
        availableForTypes: function() {
            var l = [];
            if (f.getItem("nav_history")) {
                l = ["Product Configuration", "Configuration Feature", "Configuration Option", "VPMCfgConfiguration", "VPMReference"]
            }
            return l
        },
        getActionForObject: function(l, m) {
            return this._action_info
        },
        launchCustoAction: function(m) {
            if (UWA.is(m)) {
                var o = m.actionsHelper;
                var p = m.object_ids[0];
                var l = {
                    protocol: "3DXContent",
                    version: "1.1",
                    source: "X3DSEAR_AP",
                    widgetId: m.widget_id,
                    data: {
                        items: [{
                            envId: o.getPlatformID({
                                id: p
                            }),
                            serviceId: o.getServiceID({
                                id: p
                            }),
                            contextId: "",
                            objectId: p,
                            objectType: o.getValue({
                                id: p,
                                attribute: "ds6w:type"
                            }),
                            displayName: o.getValue({
                                id: p,
                                attribute: "ds6w:label"
                            }),
                            displayIdentifier: o.getValue({
                                id: p,
                                attribute: "ds6w:identifier"
                            }),
                            displayType: o.getValue({
                                id: p,
                                attribute: "ds6w:type"
                            })
                        }]
                    }
                };
                var n = "ConfigActions";
                if (this._compass_socket === null) {
                    this._compass_socket = new i.Socket(n);
                    this._compass_socket.subscribeServer("com.ds.compass", window.parent)
                }
                this._compass_socket.dispatchEvent("onSetX3DContent", l, n);
                e.setContentVisibility("Explore");
                e.instantiateAppInSearch("ExploreList", "ENOSC2D_AP", l, m);
                e.instantiateAppInSearch("Explore3D", "ENOSC3D_AP", l, m)
            } else {
                throw new Error("INVALID data received while trying to execute the whereUsed action")
            }
        }
    });
    return b
});
define("DS/SNResultUX/views/EmptyView", ["DS/W3DXComponents/Views/Temp/TempItemView", "UWA/Core", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "css!DS/SNResultUX/SNResultUX.css", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchDebug", "DS/SNInfraUX/SearchViewServices", "DS/WebappsUtils/WebappsUtils"], function(c, h, j, f, e, g, d, b) {
    var i = "empty-view";
    var a = c.extend(g, {
        uwaClassName: "DS/SNResultUX/views/EmptyView",
        name: i,
        tagName: "div",
        defaultOptions: {
            icon: undefined,
            title: j.get("loading"),
            request_criteria: null
        },
        setup: function(k) {
            this.container.addClassName(this.getClassNames())
        },
        template: function() {
            var l = d.getFailureView();
            var m = '<div class="' + this.getClassNames("-infos") + ' search-empty-view">',
                n = this.options.icon,
                p = j.get("loading"),
                o = this.options.request_criteria_without_precond ? this.options.request_criteria_without_precond.call() : null;
            if (l) {
                m = '<div style="padding-bottom: 15%" class="' + this.getClassNames("-infos") + ' search-empty-view">'
            }
            if (h.is(this.options.getCollection, "function") && h.is(this.options.getCollection().getSNSkeleton, "function") && h.is(this.options.getCollection().getSNSkeleton()._searchActions, "object") && h.is(this.options.getCollection().getSNSkeleton()._searchActions.getEmptyViewMessage, "function")) {
                p = this.options.getCollection().getSNSkeleton()._searchActions.getEmptyViewMessage()
            }
            if (n) {
                m += '<span class="' + this.getClassNames("-icon") + " center-block fonticon fonticon-5x fonticon-" + n + '" ></span>'
            }
            if (l === true) {
                n = [b.getWebappsAssetUrl("SNResultUX", "images/Search_Error_Icon.png")];
                m += "<img src=" + n + "></img>";
                p = j.get("error.msg.display");
                m += '<span class="' + this.getClassNames("-title") + ' center-block">' + p + "</span>";
                m += '<span style="color: #77797c;font-weight: unset" class="' + this.getClassNames("-subtitle") + ' center-block">' + j.get("error.msg.display.cmd") + "</span>"
            } else {
                var q = "";
                if (o && o.service_params) {
                    q = o.service_params.query
                }
                if ((q && q.length && q !== e.SearchTypeEnum.ADVANCED_SEARCH) || (q == e.SearchTypeEnum.MY_RECENT_CONTENT)) {
                    if (p && p !== j.get("loading")) {
                        m += '<span class="' + this.getClassNames("-title") + ' center-block">' + p + "</span>"
                    }
                    if (o.without_precond) {
                        q = o.without_precond
                    }
                    var k = "";
                    if (p == "*") {
                        k = j.get("warning_star")
                    }
                    if (k !== "") {
                        m += '<span class="' + this.getClassNames("-subtitle") + ' center-block">' + j.replace(j.get("qryStr_warning"), {
                            warning: k
                        }) + "</span>"
                    }
                } else {
                    p = j.get("no_criteria");
                    if (p) {
                        m += '<span class="' + this.getClassNames("-title") + ' center-block">' + p + "</span>"
                    }
                }
            }
            m += "</div>";
            return m
        },
    });
    return a
});
define("DS/SNResultUX/views/PropertiesServices", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/ServiceDelegationLoader"], function(g, h, e, a, i, b, d, c) {
    var f = h.singleton(a, e, {
        name: "DS_SNResultUX_utils_PropertiesServices",
        _internal_attr: ["type_icon_url", "id", "resourceid", "resourceid_tagger", "preview_url", "image", "icon", "actions", "subtitle", "icon_source"],
        init: function() {
            this.setDebugMode(b.getDebugMode())
        },
        _HTMLDecode: function(j) {
            if (!j) {
                return j
            }
            j = j.replace(/&amp;/g, "&");
            j = j.replace(/&gt;/g, ">");
            j = j.replace(/&lt;/g, "<");
            j = j.replace(/&quot;/g, '"');
            j = j.replace(/&#039;/g, "'");
            return j
        },
        displaySearchItemProperties: function(l, p, E, D, o) {
            if (!g.is(l) || !g.is(p) || !g.is(o)) {
                return
            }
            var n = false;
            var q = o.getSupportedServicesArray();
            if (g.is(q) && g.is(q.services)) {
                if (q.services.indexOf(D) === -1) {
                    n = true
                }
            }
            if (UWA.is(l.isAShowOnlyObject, "function")) {
                var y = l.isAShowOnlyObject();
                if (y === true) {
                    n = true
                }
            }
            if (n === false) {
                return
            }
            p.set("isTransient", true);
            p.set("type_icon_url", l.get("type_icon_url"));
            p.set("previewUrl", l.get("preview_url"));
            p.set("preview_url", l.get("preview_url"));
            var v = this;
            var w = l.pairs();
            w.sort(function(J, I) {
                if (J[0] > I[0]) {
                    return 1
                } else {
                    if (J[0] < I[0]) {
                        return -1
                    }
                }
                return 0
            });
            var k = [],
                u = [],
                G = [],
                B = false,
                x = false;
            for (var A = 0; A < w.length; A++) {
                var H = w[A][0];
                var C = w[A][1];
                if (C) {
                    var t = H.match(/\/([^/]*)$/);
                    if (t === null) {
                        t = H
                    } else {
                        t = t[1]
                    }
                    if (v._internal_attr.indexOf(H) === -1 && H.indexOf("_value") === -1 && (H.indexOf("ds6w:") !== -1 || H.indexOf("ds6wg:") !== -1) && k.indexOf(t) === -1) {
                        k.push(t);
                        u.push(C);
                        var F = i.getVocabId(t);
                        if (g.is(F)) {
                            if (F.indexOf("ds6wg") !== -1) {
                                B = true
                            } else {
                                if (G.indexOf(F) === -1) {
                                    if (!i.isLoaded(F)) {
                                        G.push(F)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var j = function() {
                var I = {};
                var J = k.length;
                for (var O = 0; O < J; O++) {
                    var K = new E();
                    var L = k[O];
                    K.set("name", L);
                    K.set("path", L);
                    var M = i.getNLSValueForPredicate(L);
                    if (!g.is(M) || M === "") {
                        M = L
                    }
                    K.set("label", M);
                    var P = u[O];
                    var Q = "";
                    if (P instanceof Array) {
                        if (P.length > 0) {
                            for (var N = 0; N < P.length; N++) {
                                Q += v._HTMLDecode(P[N]) + (N === P.length - 1 ? "" : " | ")
                            }
                        }
                        K.set("value", Q)
                    } else {
                        if (P.length > 0) {
                            K.set("value", P);
                            if (L === "ds6w:type") {
                                K.set("urlIcon", l.get("type_icon_url"))
                            } else {
                                if (L === "ds6w:label") {
                                    K.set("sectionIdentityCard", "title")
                                } else {
                                    if (L === "ds6w:created") {
                                        K.set("sectionIdentityCard", "date")
                                    } else {
                                        if (L === "ds6w:responsible") {
                                            K.set("sectionIdentityCard", "ownerName")
                                        }
                                    }
                                }
                            }
                        }
                    }
                    I[L] = K
                }
                I["ds6w:what/ds6w:type_value"] = l.get("ds6w:what/ds6w:type_value");
                p.set(I);
                x = true
            };
            if (B || G.length > 0) {
                var m = function() {
                    if (G.length > 0) {
                        var J = 0;
                        for (var I = 0; I < G.length; I++) {
                            i.loadVocabulary(G[I], function(K) {
                                ++J;
                                if (J === G.length) {
                                    j.call()
                                }
                            })
                        }
                    } else {
                        j.call()
                    }
                };
                if (B) {
                    var z = l.get("ds6w:what/ds6w:type_value");
                    if (!g.is(z)) {
                        z = l.get("ds6w:type_value")
                    }
                    i._asyncCallToPredicatesWS(["ds6wg:" + z]).then(function s(I) {
                        m.call()
                    }, function r() {
                        m.call()
                    })
                } else {
                    m.call()
                }
            } else {
                j.call()
            }
            if (x === false) {
                j.call()
            }
        },
        getPropModelFromSearchItem: function(o, k, n, s) {
            var l = [];
            if (!g.is(o) || !g.is(k) || !g.is(n) || !g.is(s)) {
                return l
            }
            var m = this;
            var q = null;
            var r = "businessobject";
            if (UWA.is(o.IsAnInstance, "function")) {
                if (o.IsAnInstance() === true) {
                    r = "relationship"
                }
            }
            var p = o.getServiceID();
            q = new k({
                metatype: r,
                objectId: o.id,
                source: p,
                tenant: o.getPlatformID()
            });
            m.displaySearchItemProperties(o, q, n, p, s);
            l.push(q);
            var j = o.getPlatformID();
            widget.setValue("x3dPlatformId", j);
            return (l)
        },
        getOptions: function(k) {
            var j = {
                typeOfDisplay: k.EditPropConstants.ALL,
                selectionType: k.EditPropConstants.NO_SELECTION,
                readOnly: true,
                extraNotif: true,
                editMode: true
            };
            var m = function() {
                j.facets = [k.EditPropConstants.FACET_PROPERTIES, k.EditPropConstants.FACET_SWYM_CONTENT, k.EditPropConstants.FACET_SWYM_USER_PROPERTIES, k.EditPropConstants.FACET_SWYM_COMMUNITY_PROPERTIES, k.EditPropConstants.FACET_SWYMCOMMENTS];
                k.onComplete.call(undefined, j)
            };
            var l = this;
            if (UWA.is(k) && UWA.is(k.model)) {
                c.load({
                    serviceID: k.model.getServiceID(),
                    platformID: k.model.getPlatformID()
                }).then(function(n) {
                    if (UWA.is(n.getFacets, "function")) {
                        n.getFacets({
                            model: k.model,
                            constants: k.EditPropConstants,
                            setContext: function(o) {
                                j.context = o
                            },
                            setReadOnly: function(o) {
                                j.readOnly = o
                            },
                            setFacets: function(o) {
                                if (UWA.is(o, "array")) {
                                    j.facets = o;
                                    k.onComplete.call(undefined, j)
                                }
                            },
                            addFacets: function(o) {
                                if (UWA.is(o, "array")) {
                                    k.onAddFacets.call(undefined, o)
                                }
                            }
                        })
                    } else {
                        m()
                    }
                }, function() {
                    m()
                })
            } else {
                m()
            }
        }
    });
    return f
});
define("DS/SNResultUX/views/SearchCounterView", ["UWA/Core", "DS/W3DXComponents/Views/Temp/TempItemView"], function(b, d) {
    var a = "set-detail-view";
    var c = d.extend({
        name: a,
        tagName: "div",
        _totalRecords: 0,
        template: function() {
            return '{{#if title}}<span class="' + this.getClassNames("-title") + '">{{title}}</span><span class="' + this.getClassNames("-count") + '" id="search-nb-result">{{itemsLength}}</span>{{/if}}'
        },
        init: function(e) {
            e = b.clone(e || {}, false);
            ["container", "template", "tagName"].forEach(function(f) {
                delete e[f]
            });
            this._parent.call(this, e);
            if (!(b.is(e) && b.is(e.collection) && b.is(e.collection.totalCount) && e.collection.totalCount >= 0)) {
                this.hide()
            }
        },
        setup: function() {
            this.container.addClassName(this.getClassNames("-container"))
        },
        mixinTemplateHelpers: function() {
            var f = this._parent.apply(this, arguments),
                g = this.collection,
                e = g.totalCount;
            !e && (e = g.size());
            f.itemsLength = e;
            return f
        },
        setOptions: function(e) {
            var f = this;
            this._parent.apply(this, arguments);
            var h = this.collection;
            if (e.title) {
                var g = this.templateHelpers || (this.templateHelpers = {});
                g.title = e.title || g.title;
                if (h) {
                    this.listenTo(h, {
                        onAdd: function() {
                            if (f._totalRecords !== f.collection.totalCount) {
                                this.render.apply(this, arguments);
                                f.show();
                                f.container.setStyle("visibility", "visible")
                            }
                        },
                        onRemove: function() {
                            if (f._totalRecords !== f.collection.totalCount) {
                                this.render.apply(this, arguments);
                                f.show();
                                f.container.setStyle("visibility", "visible")
                            }
                        },
                        onReset: function() {
                            f._totalRecords = 0;
                            this.render.apply(this, arguments);
                            if (b.is(f.collection.totalCount) && f.collection.totalCount >= 0) {
                                f._totalRecords = f.collection.totalCount;
                                f.show();
                                f.container.setStyle("visibility", "visible")
                            } else {
                                f.hide();
                                f.container.setStyle("visibility", "hidden")
                            }
                        },
                        onSync: function() {
                            f._totalRecords = 0;
                            this.render.apply(this, arguments);
                            if (b.is(f.collection.totalCount) && f.collection.totalCount >= 0) {
                                f._totalRecords = f.collection.totalCount;
                                f.show();
                                f.container.setStyle("visibility", "visible")
                            } else {
                                f.container.setStyle("visibility", "hidden")
                            }
                        }
                    })
                }
            } else {
                if (h) {
                    this.stopListening(h)
                }
            }
            return this
        }
    });
    return c
});
define("DS/SNResultUX/utils/SearchSortView", ["UWA/Core", "UWA/Class/Debug", "UWA/Class", "UWA/Controls/Abstract", "DS/MessageBus/MessageBus", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchCom", "DS/WebappsUtils/Performance", "DS/SNResultUX/utils/SearchServices", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/UIKIT/Iconbar"], function(j, h, k, d, c, f, l, e, i, a, m, n, b) {
    var g = d.extend(h, {
        _searchcom_socket: null,
        _view: null,
        _container: null,
        _body: null,
        _defaultItem: [{
            dataIndex: "ds6w:modified",
            type: "num"
        }, {
            dataIndex: "ds6w:label",
            type: "alpha"
        }, {
            dataIndex: "ds6w:created",
            type: "num"
        }, {
            dataIndex: "ds6w:responsible",
            type: "alpha"
        }, {
            dataIndex: "ds6w:type",
            type: "group"
        }, ],
        _listItemExtend: [],
        _activedItem: "",
        _activedItemId: "",
        _activedItemOrder: "",
        _menuIcon: "",
        _subscriptions: null,
        init: function(o) {
            this._parent(o);
            this._subscriptions = {};
            var p = this;
            if (!this._searchcom_socket) {
                this._searchcom_socket = i.createSocket({
                    socket_id: "sortView_socket_" + a.now(),
                    widgetId: o.widgetId
                });
                this._subscriptions.setOrderInGridView = c.subscribe({
                    channel: p.getOption("messagingChannel"),
                    topic: "setOrderInGridView",
                    callback: this.setOrderByExt.bind(this)
                });
                if (this._searchcom_socket) {
                    this._searchcom_socket.addListener("checkNewColomnForSort", this.checkNewColumnForSort.bind(this))
                }
            }
            if (o && o.container) {
                this._container = o.container;
                this._collection = o.collection;
                this.options = o;
                if (!o.defaultSort) {
                    if (e.getOption("apply_sort_on_modified_by_default")) {
                        this.options.defaultSort = {
                            dataIndex: "ds6w:modified",
                            order: "desc",
                            type: "num"
                        }
                    } else {
                        this.options.defaultSort = {
                            dataIndex: "relevance",
                            order: "group",
                            type: "pertinency"
                        };
                        this._activedItem = "relevance"
                    }
                }
                p._setByDefaultSort();
                p.render()
            }
        },
        render: function(o) {
            var p = this;
            this._view = new b({
                renderTo: p._container,
                styles: {
                    padding: "0px",
                    marginBottom: "0px",
                    height: "45px",
                },
                events: {
                    onClick: function(q) {
                        l.loadVocabulary("ds6w", function(r) {
                            if (j.is(r) && r.status === "success") {
                                if (p.getDropdown()) {
                                    p.getDropdown().elements.container.setHTML("");
                                    p.getDropdown().setBody(p._getBody())
                                } else {
                                    setTimeout(function() {
                                        p.getDropdown().elements.container.setHTML("");
                                        p.getDropdown().setBody(p._getBody());
                                        p.updateStateInPanel()
                                    }, 50)
                                }
                                p.updateStateInPanel()
                            }
                            return p._view
                        })
                    }
                },
                items: [{
                    fonticon: p._menuIcon ? p._menuIcon : p._getIconByTypeAndOrder("alpha", "asc"),
                    text: n.get("sortMenuLabel"),
                    content: {
                        type: "dropdown",
                        tag: "ul",
                        options: {
                            className: "dropdown-menu dropdown-menu-root dropdown dropdown-root",
                            events: {
                                onClick: function(r) {
                                    var q = r.target || r.srcElement;
                                    if (q.id && p._allowSort(q.getAttribute("dataIndex"))) {
                                        p._activedItemId = q.id;
                                        p._activedItem = q.getAttribute("dataIndex");
                                        p._activedItemOrder = q.getAttribute("order");
                                        p._menuIcon = q.className;
                                        this.options.target.children[0].className = q.className;
                                        c.publish({
                                            channel: p.getOption("messagingChannel"),
                                            topic: "sortForAllView",
                                            data: {
                                                order_field: q.getAttribute("dataIndex"),
                                                order_by: q.getAttribute("order")
                                            }
                                        })
                                    }
                                }
                            },
                            body: this._getBody()
                        }
                    }
                }]
            })
        },
        updateStateInPanel: function() {
            if (this.getDropdown()) {
                var r = this.getDropdown().elements.container.children[0].children;
                for (var p = 0; p < r.length; p++) {
                    var q = r[p].children[1].children;
                    for (var o = 0; o < q.length; o++) {
                        q[o].removeClassName("sortActived");
                        if (q[o].id === this._activedItemId) {
                            q[o].addClassName("sortActived")
                        }
                    }
                }
            }
        },
        updateMenu: function() {
            this._hide();
            this._i = this._i ? this._i + 1 : 1;
            var o = this;
            setTimeout(function() {
                if (o._view && o._view.elements.container) {}
                if (o._i !== 0) {
                    o._i = 0;
                    o.getDropdown() && o.getDropdown().setBody(o._getBody())
                }
            }, 1000)
        },
        reinitMenu: function() {
            this._hide();
            if (this._view) {}
            this.emptyItemExtend();
            if (!e.getOption("search_web_in_win")) {
                this._setByDefaultSort()
            }
            this.getDropdown() && this.getDropdown().setBody(this._getBody())
        },
        getDropdown: function() {
            if (this._view) {
                return this._view.menu.getItem(0).content.component
            }
        },
        _hide: function() {
            if (this.getDropdown()) {
                this.getDropdown().hide()
            }
        },
        _getBody: function() {
            var o = this;
            this._body = {
                html: []
            };
            this._initDefaultItems();
            this._addFromListExtend();
            return this._body
        },
        addItemExtend: function(p) {
            var r = this._listItemExtend.map(function(s) {
                return s.dataIndex
            });
            var o = [];
            var q = Array.isArray(p) ? p : [p];
            q.forEach(function(s) {
                if (r.indexOf(s.dataIndex) === -1) {
                    o.push(s)
                }
            });
            this._listItemExtend = this._listItemExtend.concat(o)
        },
        removeItemExtend: function(q) {
            var r = this._listItemExtend.map(function(s) {
                return s.dataIndex
            });
            var p = [];
            var o = Array.isArray(q) ? q : [q];
            o.forEach(function(t, s) {
                if (r.indexOf(t.dataIndex) !== -1) {
                    p.push(t.dataIndex)
                }
            });
            this._listItemExtend = this._listItemExtend.filter(function(s) {
                return p.indexOf(s.dataIndex) === -1
            })
        },
        emptyItemExtend: function() {
            this._listItemExtend = []
        },
        _allowSort: function(o) {
            if (this._collection.state.totalRecords <= 1000) {
                return true
            } else {
                switch (o) {
                    case "relevance":
                    case "ds6w:label":
                    case "ds6w:who/ds6w:responsible":
                    case "ds6w:when/ds6w:created":
                    case "ds6w:when/ds6w:modified":
                    case "ds6w:responsible":
                    case "ds6w:created":
                    case "ds6w:modified":
                        return true;
                    default:
                        m._displayAlert({
                            message: n.get("sortLimitByLessThen1000Results"),
                            className: "warning"
                        });
                        return false
                }
            }
        },
        _setByDefaultSort: function() {
            if (this.options.defaultSort && this.options.defaultSort.dataIndex && this.options.defaultSort.order) {
                this._activedItemId = this.options.defaultSort.dataIndex + "-" + this.options.defaultSort.order;
                this._activedItem = this.options.defaultSort.dataIndex;
                this._activedItemOrder = this.options.defaultSort.order;
                this._menuIcon = this._getIconByTypeAndOrder(this.options.defaultSort.type, this.options.defaultSort.order)
            }
        },
        _setOrder: function(p, q, o) {
            this._activedItemId = this._getIdByTypeIndexAndOrder(q, p, o);
            this._activedItem = p;
            this._activedItemOrder = this.options.defaultSort.order;
            this._menuIcon = this._getIconByTypeAndOrder(q, o);
            if (this._view && this._view.elements.container && this._view.elements.container.children[0] && this._view.elements.container.children[0].children[0] && this._view.elements.container.children[0].children[0].children[0]) {
                this._view.elements.container.children[0].children[0].children[0].className = this._menuIcon
            }
            this._hide()
        },
        setOrderByExt: function(q) {
            this._hide();
            var p = this;
            if (q.order_field && q.order_by) {
                var o = this._defaultItem.filter(function(r) {
                    if (r.dataIndex.indexOf("/") !== -1) {
                        return r.dataIndex.split("/")[1] === q.order_field
                    } else {
                        return r.dataIndex === q.order_field
                    }
                });
                o = o ? o[0] : "";
                if (o) {
                    this._setOrder(o.dataIndex, o.type, q.order_by)
                } else {
                    if (!q.nlsName) {
                        p.addItemExtend({
                            dataIndex: q.order_field
                        })
                    } else {
                        p.addItemExtend({
                            dataIndex: q.order_field,
                            nlsName: q.nlsName
                        })
                    }
                    p._setOrder(q.order_field, "", q.order_by);
                    p.updateMenu()
                }
            }
            c.publish({
                channel: p.getOption("messagingChannel"),
                topic: "sortForAllView",
                data: {
                    order_field: q.order_field,
                    order_by: q.order_by
                }
            })
        },
        checkNewColumnForSort: function(s) {
            var r = this;
            if (Array.isArray(s)) {
                if (s.length > 0) {
                    var q = s.map(function(t) {
                        return t.dataIndex
                    });
                    var p = this._defaultItem.concat(this._listItemExtend);
                    var o = [];
                    p.forEach(function(t) {
                        if (q.indexOf(t.dataIndex) === -1) {
                            o.push(t.dataIndex)
                        }
                    });
                    r._defaultItem = r._defaultItem.filter(function(t) {
                        return o.indexOf(t.dataIndex) === -1
                    });
                    r._listItemExtend = r._listItemExtend.filter(function(t) {
                        return o.indexOf(t.dataIndex) === -1
                    });
                    if (o.indexOf(r._activedItem) !== -1) {
                        r._setByDefaultSort()
                    }
                } else {
                    this._listItemExtend = []
                }
                this.updateMenu()
            }
        },
        _addFromListExtend: function() {
            var o = this;
            var p = this._defaultItem.map(function(q) {
                return q.dataIndex
            });
            this._listItemExtend.forEach(function(q) {
                if (p.indexOf(q.dataIndex) === -1) {
                    o._addItem(q.dataIndex, q.type, q.nlsName)
                }
            })
        },
        _addItem: function(p, q, o) {
            var r = {
                tag: "li",
                "class": "item item-template sortPanelRow",
                html: [{
                    tag: "span",
                    "class": "item-text",
                    text: o ? o : l.getNLSValueForPredicate(p)
                }, {
                    tag: "div",
                    "class": "item-text item-icon-group",
                    html: []
                }]
            };
            switch (q) {
                case "alpha":
                    r.html[1].html = [{
                        tag: "span",
                        title: n.get("tooltip_SortAsc"),
                        id: p + "-asc",
                        order: "asc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "asc")
                    }, {
                        tag: "span",
                        title: n.get("tooltip_SortDesc"),
                        id: p + "-desc",
                        order: "desc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "desc")
                    }];
                    break;
                case "num":
                    r.html[1].html = [{
                        tag: "span",
                        title: n.get("tooltip_SortAsc"),
                        id: p + "-asc",
                        order: "asc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "asc")
                    }, {
                        tag: "span",
                        title: n.get("tooltip_SortDesc"),
                        id: p + "-desc",
                        order: "desc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "desc")
                    }];
                    break;
                case "group":
                    r.html[1].html = [{
                        tag: "span",
                        title: n.get("tooltip_SortGroup"),
                        id: p + "-group",
                        order: "asc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "asc")
                    }];
                    break;
                case "pertinency":
                    r.html[1].html = [{
                        tag: "span",
                        title: n.get("tooltip_SortGroup"),
                        id: p + "-group",
                        order: "desc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "asc")
                    }];
                    break;
                default:
                    r.html[1].html = [{
                        tag: "span",
                        title: n.get("tooltip_SortAsc"),
                        id: p + "-asc",
                        order: "asc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "asc")
                    }, {
                        tag: "span",
                        title: n.get("tooltip_SortDesc"),
                        id: p + "-desc",
                        order: "desc",
                        dataIndex: p,
                        "class": this._getIconByTypeAndOrder(q, "desc")
                    }]
            }
            if (this._body && this._body.html) {
                this._body.html.push(r)
            }
        },
        _getIconByTypeAndOrder: function(p, o) {
            switch (p) {
                case "alpha":
                    return "fonticon fonticon-sort-alpha-" + o;
                case "num":
                    return "fonticon fonticon-sort-num-" + o;
                case "group":
                    return "fonticon fonticon-tag-sorting";
                case "pertinency":
                    return "fonticon fonticon-sorting";
                default:
                    if (o) {
                        return "fonticon fonticon-sort-alpha-" + o
                    } else {
                        return "fonticon fonticon-sort-alpha-asc"
                    }
            }
        },
        _getIdByTypeIndexAndOrder: function(q, p, o) {
            switch (q) {
                case "group":
                    return p + "-group";
                default:
                    return p + "-" + o
            }
        },
        _initDefaultItems: function() {
            var p = this;
            var q = [];
            if (j.is(this._collection) && j.is(this._collection.service_parameters, "object") && this._collection.service_parameters.query !== f.SearchTypeEnum.MY_RECENT_CONTENT) {
                q.push({
                    dataIndex: "relevance",
                    type: "pertinency",
                    nls: n.get("defaultSort")
                })
            }
            var o = q.concat(this._defaultItem);
            o.forEach(function(r) {
                p._addItem(r.dataIndex, r.type, r.nls)
            })
        },
        destroy: function() {
            this._searchcom_socket.removeListener("checkNewColomnForSort");
            this._searchcom_socket.disconnect();
            i.deleteSocket(this._searchcom_socket.id);
            this._searchcom_socket = null;
            this._parent()
        }
    });
    return g
});
define("DS/SNResultUX/SearchPQListUX", ["UWA/Core", "UWA/Class", "DS/SNInfraUX/SearchDebug", "DS/UIKIT/Modal", "DS/UIKIT/Scroller", "DS/UIKIT/Autocomplete", "UWA/Promise", "DS/SNInfraUX/SearchSettings", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/PredefinedQueries"], function(j, k, h, e, b, i, g, c, l, a) {
    var d = i.extend({
        getSuggestions: function(m) {
            f.filterPQs(m)
        },
        onHideSuggests: function() {
            if (this.elements.input.value == "") {
                f.filterPQs("")
            }
        },
        reset: function(m) {
            f.filterPQs("");
            this._parent(m)
        }
    });
    var f = k.singleton(h, {
        abbreviationsList: [],
        lAbbreviationsList: [],
        labelList: [],
        llabelList: [],
        liList: [],
        PQs: [],
        PQUxPC: g.deferred(),
        init: function() {},
        showPQSelector: function(m) {
            var o = m.pqSelectionCallback;
            var q = m.pqAccessMap;
            var p = m.resources;
            var n = this;
            if (!this.PQUxBuilding) {
                this.PQUxBuilding = true;
                a.getPQFetchPromise().then(function() {
                    n.pqSelectionHandler = o;
                    n.pqAccessMap = q;
                    var y = a.getPQs();
                    var u = a.getPQNLS();
                    if (!j.is(y) || !j.is(u)) {
                        console.error("No PQ to display !");
                        return
                    }
                    n.load(y, u);
                    var x = UWA.createElement("div", {
                        styles: {
                            height: "100%"
                        },
                    });
                    var A = UWA.createElement("table", {
                        styles: {
                            height: "100%",
                            width: "100%"
                        }
                    }).inject(x);
                    var t = UWA.createElement("tbody").inject(A);
                    var v = UWA.createElement("tr").inject(t);
                    var s = UWA.createElement("tr", {
                        styles: {
                            height: "100%"
                        }
                    }).inject(t);
                    var r = UWA.createElement("div", {
                        styles: {
                            height: "100%",
                            "padding-top": "10px",
                        },
                        "class": "pqListDivP"
                    }).inject(s);
                    var w = UWA.createElement("div").inject(v);
                    var z = new d().inject(w);
                    n.createPQList(n.labelList, n.abbreviationsList, r);
                    n.pqModalDialog = new e({
                        id: "search-pq-help-panel",
                        className: "search-pq-help-panel",
                        closable: true,
                        header: l.get("title_pq_ux_dialog"),
                        body: x,
                        footer: "",
                        events: {
                            onHide: function() {},
                            onShow: function() {
                                var B = this.elements.body.getDimensions().width;
                                if (B < 450) {
                                    B = 578
                                }
                                this.elements.body.setStyle("height", B);
                                z.elements.input.focus()
                            }
                        }
                    }).inject(document.body);
                    n.PQUxPC.resolve()
                })
            }
            this.PQUxPC.promise.then(function() {
                n.pqModalDialog.show()
            })
        },
        load: function(n, r) {
            if (!j.is(n)) {
                throw new Error("Invalid value for PQs in SearchPQListUX.load !")
            }
            if (!j.is(r)) {
                throw new Error("Invalid value for PQsNLS in SearchPQListUX.load !")
            }
            n.PQ.sort(function(v, t) {
                var u = r[v.pqid + ".Title"];
                var s = r[t.pqid + ".Title"];
                if (v.custom == t.custom) {
                    return (u > s) - (s > u)
                }
                if (v.custom == true && t.custom == undefined) {
                    return -1
                }
                if (v.custom == undefined && t.custom == true) {
                    return 1
                }
            });
            for (var p = 0, q = n.PQ.length; p < q; p++) {
                var m = n.PQ[p];
                if (j.is(m)) {
                    this.abbreviationsList.push(m.abbreviations);
                    this.lAbbreviationsList.push(m.abbreviations.toLowerCase());
                    var o = r[m.pqid + ".Title"];
                    this.labelList.push(o);
                    if (o) {
                        this.llabelList.push(o.toLowerCase())
                    } else {
                        this.llabelList.push(o)
                    }
                    this.PQs.push(m)
                }
            }
        },
        createPQList: function(x, q, r) {
            var u = this;
            var y = function(M) {
                u.setSelectedPrefix(M.target.getAttribute("prfix") + ":")
            };
            var C = a.getPQNLS();
            var s = UWA.createElement("div", {
                styles: {
                    height: "100%",
                },
                "class": "pqListDiv"
            }).inject(r);
            var A = UWA.createElement("table", {
                styles: {}
            }).inject(s);
            for (var G = 0; G < q.length; G++) {
                var t = true;
                if (UWA.is(u.pqAccessMap) && UWA.is(u.pqAccessMap[u.PQs[G].pqid])) {
                    t = u.pqAccessMap[u.PQs[G].pqid]
                }
                if (t) {
                    var H = q[G].split(",");
                    var v = x[G];
                    var B = {};
                    if (G % 2 == 0) {
                        B.background = "#F0F0F0"
                    } else {
                        B.background = "#FfFfFf"
                    }
                    var z = UWA.createElement("tr", {
                        styles: B
                    }).inject(A);
                    var J = UWA.createElement("table", {
                        styles: {
                            width: "100%",
                            "table-layout": "fixed"
                        }
                    }).inject(z);
                    this.liList[G] = z;
                    var m = UWA.createElement("tbody").inject(J);
                    var n = UWA.createElement("tr").inject(m);
                    var w = {
                        "word-wrap": "break-word"
                    };
                    var p = UWA.createElement("td", {
                        styles: w,
                        "class": "pq-line",
                        id: v
                    }).inject(n);
                    var o = UWA.createElement("span", {
                        html: v,
                        "class": "pq-label"
                    }).inject(p);
                    var L = UWA.createElement("span", {
                        styles: {
                            "float": "right",
                            "text-align": "right",
                            "word-break": "break-all"
                        },
                        "class": "pq-abreviation-list"
                    }).inject(p);
                    for (var F = H.length - 1; F >= 0; F--) {
                        var E = H[F];
                        var I = UWA.createElement("span", {
                            styles: {
                                "float": "right",
                            }
                        }).inject(L);
                        var D = UWA.createElement("span", {
                            html: "&nbsp;&nbsp;",
                            styles: {
                                "float": "right",
                            }
                        }).inject(I);
                        var K = UWA.createElement("a", {
                            html: E + ":",
                            events: {
                                click: y
                            },
                            styles: {},
                            "class": "pq-abreviation",
                            id: E + ":"
                        }).inject(I);
                        K.setAttributes({
                            prfix: E
                        })
                    }
                }
            }
            new b({
                element: s
            }).inject(r)
        },
        filterPQs: function(q) {
            var p = this;
            var o = 0;
            var n = [];
            if (!q || q.replace(/\s+/g, "") === "") {
                this.liList.forEach(function(r, s) {
                    var t = p.abbreviationsList[s];
                    if (j.is(t)) {
                        r.show();
                        if (o % 2 == 0) {
                            r.setStyle("background", "#F0F0F0")
                        } else {
                            r.setStyle("background", "#FfFfFf")
                        }
                        o++
                    }
                })
            } else {
                var m = q.toLowerCase();
                this.liList.forEach(function(r, t) {
                    var u = p.lAbbreviationsList[t];
                    var s = p.llabelList[t];
                    if (j.is(s) && j.is(u)) {
                        if (s.indexOf(m) > -1 || u.indexOf(m) > -1) {
                            r.show();
                            if (o % 2 == 0) {
                                r.setStyle("background", "#F0F0F0")
                            } else {
                                r.setStyle("background", "#FfFfFf")
                            }
                            o++
                        } else {
                            r.hide()
                        }
                    }
                })
            }
        },
        setSelectedPrefix: function(m) {
            this.pqModalDialog.hide();
            this.pqSelectionHandler.call(undefined, m)
        }
    });
    return f
});
define("DS/SNResultUX/views/SearchHistoryTree", ["UWA/Core", "UWA/Class/View", "UWA/Utils/InterCom", "DS/WebappsUtils/WebappsUtils", "DS/UIKIT/Tooltip", "DS/etree/syncwidget", "DS/egraph/core", "DS/egraph/utils", "DS/egraph/views", "DS/etree/iact", "DS/TreeModel/TreeDocument", "DS/TreeModel/TreeNodeModel", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchSettings", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "css!egraph/views", "css!etree/syncviews", "css!etree/basicviews", "css!egraph/views_default", "css!DS/etree/overviewui.css"], function(n, d, o, g, l, m, f, b, e, c, a, h, j, i, q) {
    var p = d.extend({
        _treeDocument: null,
        _graph: null,
        _lastNode: null,
        _searchNode: null,
        _currentSelectNode: null,
        _lastSelectNode: null,
        _listOfTreeGraph: null,
        _stopCreated: false,
        _ifHaveExploreOrRelatedNode: false,
        _fullsize: true,
        _container: null,
        _compass_socket: null,
        _AlReadyRender: false,
        customNodeView: function k() {
            var s = function(C) {
                var A;
                var B = C.nodeView;
                var D = C.nodeModel;
                A = B.querySelector(".etree-sync-node-icon");
                if (n.is(A)) {
                    A.classList.remove("hidden")
                }
                if (D.options.icons && D.options.icons.length > 0) {
                    A.style.backgroundImage = 'url("' + D.options.icons[0] + '")'
                } else {
                    if (A) {
                        A.classList.add("hidden")
                    }
                }
                B.querySelector(".etree-sync-node-label").textContent = D.options.label;
                if (f.inPathSet(C.changes, "data", "data", "_isHighlighted") || f.inPathSet(C.changes, "data", "data", "_isSelected")) {
                    if (D._isHighlighted || D._isSelected) {
                        B.classList.add("highlighted")
                    } else {
                        B.classList.remove("highlighted")
                    }
                }
                A = B.querySelector(".fonticon.fonticon-filter");
                if (n.is(A) && n.is(D.options.filter) && D.options.filter === true) {
                    A.style.visibility = "visible"
                } else {
                    if (n.is(A)) {
                        A.style.visibility = "hidden"
                    }
                }
            };
            var u = {};
            var r = function r() {
                e.HTMLNodeView.call(this)
            };
            b.inherit(r, e.HTMLNodeView);
            r.prototype.buildNodeElement = function w() {
                var A = document.createElement("div");
                A.innerHTML = ['<div class="etree-sync-node" draggable="true">', '  <div class="etree-sync-node-widget template1">', '    <div class="etree-sync-node-header">', '      <div class="etree-sync-node-icon"></div>', '      <div class="etree-sync-node-label">noname</div>', '      <div class="fonticon fonticon-filter"></div>', "    </div>", '    <div class="etree-sync-node-content">', '       <div class="etree-sync-node-description">desc</div>', "    </div>", "  </div>", "</div>"].join("\n");
                return A.querySelector(".etree-sync-node").cloneNode(true)
            };
            r.prototype.onmodifyDisplay = function t(D, B) {
                var A;
                var C = D.data.data;
                e.HTMLNodeView.prototype.onmodifyDisplay.apply(this, arguments);
                A = n.extendElement(this.display.elt);
                s({
                    nodeModel: C,
                    nodeView: A,
                    changes: B
                });
                A.querySelector(".etree-sync-node-description").textContent = C.options.description
            };
            var z = function z() {
                e.HTMLNodeView.call(this)
            };
            b.inherit(z, e.HTMLNodeView);
            z.prototype.buildNodeElement = function w() {
                var A = document.createElement("div");
                A.innerHTML = ['<div class="etree-sync-node" draggable="true">', '  <div class="etree-sync-node-widget template2">', '      <div class="fonticon fonticon-filter"></div>', '      <div class="etree-sync-node-icon"></div>', '      <div class="etree-sync-node-label">noname</div>', '      <div class="etree-sync-node-content"></div>', "  </div>", "</div>"].join("\n");
                return A.querySelector(".etree-sync-node").cloneNode(true)
            };
            z.prototype.onmodifyDisplay = function t(D, B) {
                var A;
                var C = D.data.data;
                e.HTMLNodeView.prototype.onmodifyDisplay.apply(this, arguments);
                A = n.extendElement(this.display.elt);
                s({
                    nodeModel: C,
                    nodeView: A,
                    changes: B
                });
                A.querySelector(".etree-sync-node-content").textContent = C.options.description
            };
            var y = function y() {
                e.HTMLNodeView.call(this)
            };
            b.inherit(y, e.HTMLNodeView);
            y.prototype.buildNodeElement = function w(B) {
                if (!n.is(B) || !n.is(B.data)) {
                    return
                }
                var A = document.createElement("div");
                A.innerHTML = ['<div class="etree-sync-node" draggable="true">', '  <div class="etree-sync-node-widget template3">', '      <div class="etree-sync-node-icon"></div>', '      <div class="etree-sync-node-label">noname</div>', '      <div class="etree-sync-node-firstcontent">', '        <div class="etree-sync-node-firstcontent-label1">No Children</div>', '        <div class="etree-sync-node-firstcontent-label2">No results</div>', "      </div>", '      <div class="etree-sync-node-secondcontent">', '       <div class="etree-sync-node-secondcontent-label1">No Parents</div>', '       <div class="etree-sync-node-secondcontent-label2">No results</div>', "      </div>", "  </div>", "</div>"].join("\n");
                return A.querySelector(".etree-sync-node").cloneNode(true)
            };
            y.prototype.onmodifyDisplay = function t(D, B) {
                var A;
                var C = D.data.data;
                e.HTMLNodeView.prototype.onmodifyDisplay.apply(this, arguments);
                A = n.extendElement(this.display.elt);
                s({
                    nodeModel: C,
                    nodeView: A,
                    changes: B
                });
                if (C.options.childrenlabel && C.options.childrenlabel.length > 0) {
                    A.getElement(".etree-sync-node-firstcontent-label1").textContent = C.options.childrenlabel;
                    A.getElement(".etree-sync-node-firstcontent-label2").textContent = C.options.childrenresults
                }
                if (C.options.parentslabel && C.options.parentslabel.length > 0) {
                    A.getElement(".etree-sync-node-secondcontent-label1").textContent = C.options.parentslabel;
                    A.getElement(".etree-sync-node-secondcontent-label2").textContent = C.options.parentsresults
                }
                if (C.options.rootslabel && C.options.rootslabel.length > 0) {
                    A.getElement(".etree-sync-node-thirdcontent-label1").textContent = C.options.rootslabel;
                    A.getElement(".etree-sync-node-thirdcontent-label2").textContent = C.options.rootsresults
                }
            };
            var x = function x() {
                e.HTMLNodeView.call(this)
            };
            b.inherit(x, e.HTMLNodeView);
            x.prototype.buildNodeElement = function w(B) {
                if (!n.is(B) || !n.is(B.data)) {
                    return
                }
                var A = document.createElement("div");
                A.innerHTML = ['<div class="etree-sync-node" draggable="true">', '  <div class="etree-sync-node-widget template4">', '      <div class="etree-sync-node-label">noname</div>', '      <div class="etree-sync-node-firstcontent">', '        <span class="fonticon fonticon-network"></span>', '        <span class="item-text-first" style="text-align: center;">Structure</span>', "      </div>", '      <div class="etree-sync-node-secondcontent">', '        <span class="fonticon fonticon-component"></span>', '        <span class="item-text-second" style="text-align: center;">Related</span>', "      </div>", "  </div>", "</div>"].join("\n");
                return A.querySelector(".etree-sync-node").cloneNode(true)
            };
            x.prototype.onmodifyDisplay = function t(D, B) {
                var A;
                var C = D.data.data;
                e.HTMLNodeView.prototype.onmodifyDisplay.apply(this, arguments);
                A = n.extendElement(this.display.elt);
                s({
                    nodeModel: C,
                    nodeView: A,
                    changes: B
                });
                if (C.options.childrenlabel && C.options.childrenlabel.length > 0) {
                    A.getElement(".item-text-first").textContent = C.options.childrenlabel
                }
                if (C.options.parentslabel && C.options.parentslabel.length > 0) {
                    A.getElement(".item-text-second").textContent = C.options.parentslabel
                }
            };
            u.newNodeView = function v(A) {
                var B = A.data;
                if (B.options.type === "type1") {
                    return new r()
                } else {
                    if (B.options.type === "type2") {
                        return new z()
                    } else {
                        if (B.options.type === "type3") {
                            return new y()
                        } else {
                            return new x()
                        }
                    }
                }
            };
            return u
        },
        render: function(r, v) {
            var t = this;
            if (!n.is(r) || t._container !== null || t._AlReadyRender === true) {
                return
            }
            t._listOfTreeGraph = [];
            t._AlReadyRender = true;
            t._container = r;
            t._graph = new m.SyncEGraphTree(t._container, {
                orientation: m.OrientationMode.ROOT_ON_LEFT,
                nodeView: t.customNodeView(),
                fittingArea: {
                    paddingLeft: -25,
                    paddingRight: 0,
                    paddingTop: -25,
                    paddingBottom: 0
                }
            });
            t._graph.widget.document.nodeHeight = 90;
            t._graph.widget.document.nodeWidth = 130;
            t._graph.setModel(t.getTreeDocument());
            t._graph.expandAll();
            t._graph.widget.sm.rootState.movePredicate = function u() {
                return false
            };
            t._graph.widget.sm.rootState.onmousedown = function(y, w) {
                if (w.dom.className.contains("item-text-first") || w.dom.className.contains("fonticon fonticon-network") || w.dom.className.contains("item-text-second") || w.dom.className.contains("fonticon fonticon-component")) {
                    if (w.inside && w.button === 1) {
                        if (n.is(w.grElt) && n.is(w.grElt.data) && n.is(w.grElt.data.data)) {
                            var x = w.grElt.data.data;
                            if (x) {
                                if (w.dom.className.contains("item-text-first") || w.dom.className.contains("fonticon fonticon-network")) {
                                    if (n.is(x.options) && n.is(x.options.onClickchildren, "function")) {
                                        x.options.onClickchildren.call(t, x)
                                    }
                                } else {
                                    if (w.dom.className.contains("item-text-second") || w.dom.className.contains("fonticon fonticon-component")) {
                                        if (n.is(x.options) && n.is(x.options.onClickparents, "function")) {
                                            x.options.onClickparents.call(t, x)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return {}
                }
                return c.RootState.prototype.onmousedown.apply(this, arguments)
            };
            var s = new UWA.Element("div", {
                "class": "fonticon fonticon-resize-full",
            });
            s.inject(t._container);
            new l({
                position: "bottom",
                target: s,
                body: q.get("relation.maxminTooltip")
            });
            s.onclick = function() {
                if (t._fullsize === true) {
                    t._container.style.height = "100%";
                    t._fullsize = false;
                    this.removeClassName("fonticon fonticon-resize-full");
                    this.addClassName("fonticon fonticon-resize-small")
                } else {
                    t._container.style.height = "100px";
                    t._fullsize = true;
                    this.removeClassName("fonticon fonticon-resize-small");
                    this.addClassName("fonticon fonticon-resize-full")
                }
            }
        },
        getTreeDocument: function() {
            var r = this;
            if (r._treeDocument === null) {
                this._treeDocument = new a({
                    useAsyncPreExpand: true,
                    shouldAcceptDrag: function() {
                        return false
                    },
                    shouldAcceptDrop: function() {
                        return false
                    }
                });
                r._treeDocument.getXSO().onAdd(function(s) {
                    r.onSelected(s)
                })
            }
            return r._treeDocument
        },
        addSearchModel: function(s) {
            var w = this;
            if (!n.is(s)) {
                return
            }
            var r = w._treeDocument;
            if (!n.is(r)) {
                r = w.getTreeDocument()
            }
            var x = false;
            if (n.is(s.refine) && s.refine === true) {
                x = true;
                if (n.is(s.searchParam) && n.is(s.searchParam.adv_search) && s.searchParam.adv_search === true) {
                    if (w._lastNode === null) {
                        x = false
                    } else {
                        if (w._lastNode && w._lastNode._options.SNtype !== "Search") {
                            x = false
                        }
                    }
                }
            } else {
                if (w._lastNode) {
                    if (w._lastNode._options.SNtype === "Search") {
                        x = true
                    }
                }
            }
            if (x === false) {
                r.prepareUpdate();
                s.type = "type1";
                s.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Search.png")];
                s.useAsyncPreExpand = false;
                s.label = q.get("search.box");
                s.description = s.description;
                s.SNtype = "Search";
                var t = new h(s);
                r.addRoot(t);
                r.pushUpdate();
                w._lastNode = t;
                w._searchNode = t;
                var v = {
                    SNtype: "Search",
                    contextid: s.contextid,
                    widgetAppId: s.widgetAppId
                };
                j.setContentVisibility(v);
                w._currentSelectNode = null;
                w._lastSelectNode = null;
                if (w._graph) {
                    w._graph.expandAll()
                }
            } else {
                if (w._currentSelectNode && w._currentSelectNode._options.SNtype === "Children") {
                    var u = w._currentSelectNode._options.description;
                    if (n.is(s.count)) {
                        u = u.replace(/[0-9]/, s.count)
                    }
                    w._currentSelectNode.updateOptions({
                        searchParam: s.searchParam,
                        description: u,
                        filter: s.filter,
                    })
                } else {
                    if (w._searchNode) {
                        w._searchNode.updateOptions({
                            description: s.description,
                            searchParam: s.searchParam,
                            filter: s.filter
                        });
                        w._lastNode = w._searchNode
                    }
                }
            }
            return w._lastNode
        },
        addSearchSelectModel: function(A) {
            var z = this;
            var u = z._treeDocument;
            if (!n.is(u)) {
                u = z.getTreeDocument()
            }
            var t = z._searchNodebyIdInSameBranch(A.id);
            if (n.is(t) && t !== null) {
                return
            }
            var w = false;
            var r = true;
            var v = false;
            if (UWA.is(A) && !UWA.is(A, "object")) {
                w = true;
                v = true;
                if (z._lastSelectNode) {
                    z._lastSelectNode.removeChildren();
                    z._lastNode = z._lastSelectNode
                }
            } else {
                if (z._lastNode && z._lastNode._options.SNtype === "Select") {
                    if (z._lastNode.getChildren() === null) {
                        w = true
                    }
                } else {
                    if (z._currentSelectNode && ((z._currentSelectNode._options.SNtype === "Search") || (z._currentSelectNode._options.SNtype === "Children"))) {
                        z._lastNode = z._currentSelectNode
                    } else {
                        if (z._lastNode && z._lastNode._options.SNtype === "Children") {
                            if (z._lastNode.getChildren() === null && !n.is(z._lastNode._isSelected)) {
                                w = true;
                                if (z._lastSelectNode) {
                                    z._lastSelectNode.removeChildren();
                                    z._lastNode = z._lastSelectNode
                                }
                            }
                        } else {
                            if (z._lastNode && z._lastNode._options.SNtype === "") {
                                w = true;
                                if (z._lastSelectNode) {
                                    z._lastSelectNode.removeChildren();
                                    z._lastNode = z._lastSelectNode
                                }
                            }
                        }
                    }
                }
            }
            if (w === true) {
                if (v === true) {
                    z._lastSelectNode.updateOptions({
                        description: A + q.get("relation.selected"),
                        id: null,
                        model: null
                    })
                } else {
                    z._lastSelectNode.updateOptions({
                        description: A.description,
                        id: A.id,
                        model: A.model
                    })
                }
                z._lastNode = z._lastSelectNode;
                r = false
            } else {
                var x = i.getOption("nav_history_parallel");
                if (x === false) {
                    r = true;
                    if (z._currentSelectNode && z._currentSelectNode._options.SNtype === "Search") {
                        if (z._currentSelectNode.hasChildren()) {
                            var s = z._currentSelectNode.getChildren()[0];
                            z._removeAllNodeWithWidget(s);
                            s.updateOptions({
                                description: A.description,
                                id: A.id,
                                model: A.model
                            });
                            z._lastNode = s;
                            r = false
                        }
                    }
                }
                if (r === true) {
                    A.SNtype = "Select";
                    A.type = "type1";
                    A.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Select.png")];
                    A.useAsyncPreExpand = false;
                    A.description = A.description;
                    A.label = q.get("select.box");
                    u.prepareUpdate();
                    var y = new h(A);
                    z._lastNode.addChild(y);
                    z._lastNode = y;
                    z._lastSelectNode = z._lastNode;
                    z._currentSelectNode = null;
                    u.pushUpdate();
                    if (z._graph) {
                        z._graph.expandAll()
                    }
                }
            }
            return z._lastNode
        },
        removeLastSelectNode: function() {
            var s = this;
            if (s._lastNode) {
                if (s._lastNode._options.SNtype === "Select") {
                    var u = true;
                    var w = s._lastNode.getChildren();
                    if (w) {
                        var t = w.length;
                        var v = null;
                        for (var r = 0; r < t; r++) {
                            v = w[r];
                            if (v && n.is(v._options) && n.is(v._options.SNtype) && v._options.SNtype === "Children" && n.is(v._isSelected)) {}
                        }
                        if (v) {
                            u = false
                        }
                    }
                    if (u === true) {
                        s._lastNode = s._lastNode.getParent();
                        s._lastNode.removeChildren()
                    }
                } else {
                    if (s._lastNode._options.SNtype === "Children") {
                        u = true;
                        if (s._currentSelectNode && s._currentSelectNode._options.SNtype === "Children") {
                            u = false
                        } else {
                            if (s._currentSelectNode && s._currentSelectNode._options.SNtype === "Select") {
                                u = false
                            } else {
                                if (!n.is(s._lastNode._isSelected)) {
                                    u = true
                                }
                            }
                        }
                        if (u === true) {
                            if (s._lastSelectNode) {
                                s._lastNode = s._lastSelectNode.getParent();
                                s._lastNode.removeChildren()
                            }
                        }
                    }
                }
            }
        },
        addRelationsModel: function(w) {
            var z = this;
            var G = function(R) {
                if (!n.is(R)) {
                    return
                }
                var Q = R.getParent();
                if (Q) {
                    Q.removeChild(R);
                    z._lastNode = Q
                }
            };
            var I = i.getOption("nav_history_related");
            if (I === false) {
                if (n.is(w) && n.is(w.model) && n.is(w.model.fromApp) && w.model.fromApp === true) {
                    var L = w.model;
                    var F = null;
                    var K = {
                        type: "type4",
                        SNtype: "Children",
                        useAsyncPreExpand: false,
                        contextid: w.contextid,
                        widgetAppId: w.widgetAppId,
                    };
                    K.label = L.displayName;
                    K.childrenlabel = q.get("tree.box");
                    K.parentslabel = q.get("graph.box");
                    K.model = L;
                    K.id = L.id;
                    var O = function(S) {
                        var T = S.id;
                        var Q = {
                            protocol: "3DXContent",
                            version: "1.1",
                            source: "X3DSEAR_AP",
                            widgetId: w.widgetAppId,
                            data: {
                                items: [{
                                    envId: S.getPlatformID(),
                                    serviceId: S.getServiceID,
                                    contextId: "",
                                    objectId: T,
                                    objectType: S.get("ds6w:type_value"),
                                    displayName: S.displayName,
                                    displayType: S.get("ds6w:type")
                                }]
                            }
                        };
                        var R = "HistoryActions";
                        if (z._compass_socket === null) {
                            z._compass_socket = new o.Socket(R);
                            z._compass_socket.subscribeServer("com.ds.compass", window.parent)
                        }
                        z._compass_socket.dispatchEvent("onSetX3DContent", Q, R);
                        return Q
                    };
                    var D = {
                        description: L.displayName,
                        widgetAppId: w.widgetAppId,
                        contextid: w.contextid
                    };
                    K.onClickparents = function(S) {
                        if (!n.is(S)) {
                            return
                        }
                        G(S);
                        var R = z.addRelationalModel(D);
                        var T = O(S.options.model);
                        var Q = {
                            historyNode: R,
                            nav_history: true
                        };
                        j.setContentVisibility("Relational");
                        j.instantiateAppInSearch("Relational", "ENORIPE_AP", T, Q)
                    };
                    K.onClickchildren = function(S) {
                        if (!n.is(S)) {
                            return
                        }
                        G(S);
                        var R = z.addExploreModel(D);
                        var T = O(S.options.model);
                        var Q = {
                            historyNode: R,
                            nav_history: true
                        };
                        j.setContentVisibility("Explore");
                        j.instantiateAppInSearch("ExploreList", "ENOSC2D_AP", T, Q);
                        j.instantiateAppInSearch("Explore3D", "ENOSC3D_AP", T, Q)
                    };
                    var x = null;
                    var N = z._lastNode;
                    if (n.is(z._lastNode._options.id)) {
                        x = z._lastNode._options.id
                    }
                    if (z._currentSelectNode !== null && n.is(z._currentSelectNode._options.id)) {
                        x = z._currentSelectNode._options.id;
                        N = z._currentSelectNode
                    }
                    if (!n.is(N)) {
                        return
                    }
                    if (!n.is(x)) {
                        return
                    }
                    if (x === w.model.id) {
                        if (z._lastNode.hasChildren() === true) {
                            var y = z._lastNode.getChildren();
                            if (y) {
                                var C = y.length;
                                var M = null;
                                for (var J = 0; J < C; J++) {
                                    M = y[J];
                                    if (M && n.is(M._options)) {
                                        if (M._options.SNtype !== "Relational" || M._options.SNtype !== "Explore") {
                                            return
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var A = z.getTreeDocument();
                    if (!n.is(A)) {
                        return
                    }
                    A.prepareUpdate();
                    z._removeAllNodeWithWidget(N);
                    F = new h(K);
                    N.addChild(F);
                    if (F !== null) {
                        z._lastNode = F
                    }
                    A.pushUpdate();
                    z._currentSelectNode = null;
                    if (z._graph) {
                        z._graph.expandAll()
                    }
                    return F
                }
            } else {
                if (I === true) {
                    var E = false;
                    if (z._currentSelectNode && z._currentSelectNode._options.SNtype === "Select") {
                        E = false
                    } else {
                        if (z._lastNode && !(z._lastNode._options.SNtype === "Select")) {
                            E = true
                        }
                    }
                    if (E === true) {
                        return
                    }
                    if (!n.is(w) && !n.is(w.model)) {
                        return
                    }
                    var x = null;
                    var N = z._lastNode;
                    if (n.is(z._lastNode._options.id)) {
                        x = z._lastNode._options.id
                    }
                    if (x === null && z._currentSelectNode !== null && n.is(z._currentSelectNode._options.id)) {
                        x = z._currentSelectNode._options.id;
                        N = z._currentSelectNode
                    }
                    if (!n.is(N)) {
                        return
                    }
                    if (!n.is(x)) {
                        return
                    }
                    if (x !== w.model.id) {
                        return
                    }
                    var A = z.getTreeDocument();
                    if (!n.is(A)) {
                        return
                    }
                    if (!n.is(w, "object")) {
                        return
                    }
                    var H = function(R) {
                        var S = [];
                        var V = N.getChildren();
                        if (V) {
                            var T = V.length;
                            var U = null;
                            for (var Q = 0; Q < T; Q++) {
                                U = V[Q];
                                if (U && n.is(U._options) && n.is(U._options.relation)) {
                                    S.push(U._options.relation)
                                }
                            }
                        }
                        return S
                    };
                    var G = function(R) {
                        if (!n.is(R)) {
                            return
                        }
                        var Q = R.getParent();
                        if (Q) {
                            Q.removeChild(R);
                            z._lastNode = Q
                        }
                    };
                    var B = H();
                    if (n.is(B)) {
                        if (B.length === 2) {
                            return
                        } else {
                            if (B.length === 1) {
                                if (B[0] === "") {
                                    return
                                }
                            }
                        }
                    }
                    var v = function(R, S) {
                        var Q = q.get("relation.result");
                        if (R.info.length > 1) {
                            Q = q.get("relation.results")
                        }
                        switch (R.id) {
                            case "parents":
                                S.parentslabel = q.get("relation.parents.label");
                                S.parentsresults = R.info.length + Q;
                                S.parentsdescription = q.get("relation.parents.description");
                                S.onClickparents = function(T) {
                                    if (!n.is(T)) {
                                        return
                                    }
                                    G(T);
                                    T.options.relation = "parents";
                                    T.options.ids = T.options.relations[T.options.relation];
                                    z.onSelected(z.addRelationModel(T))
                                };
                                break;
                            case "children":
                                S.childrenlabel = q.get("relation.children.label");
                                S.childrenresults = R.info.length + Q;
                                S.childrendescription = q.get("relation.children.description");
                                S.onClickchildren = function(T) {
                                    if (!n.is(T)) {
                                        return
                                    }
                                    G(T);
                                    T.options.relation = "children";
                                    T.options.ids = T.options.relations[T.options.relation];
                                    z.onSelected(z.addRelationModel(T))
                                };
                                break;
                            case "simulations":
                                S.label = q.get("relation.simulations.label");
                                S.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Simulations.png")];
                                S.description = q.get("relation.simulations.description");
                                break;
                            case "configurations":
                                S.label = q.get("relation.configurations.label");
                                S.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Configurations.png")];
                                S.description = q.get("relation.configurations.description");
                                break
                        }
                    };
                    var F = null;
                    var P = null;
                    var K = {
                        type: "type2",
                        SNtype: "",
                        ids: null,
                        relation: "",
                        relations: w,
                        useAsyncPreExpand: false,
                        contextid: w.contextid,
                        widgetAppId: w.widgetAppId,
                        description: q.get("relation.norelated")
                    };
                    K.label = w.model.get("ds6w:type");
                    K.icons = [w.model.get("preview_url")];
                    var t = false;
                    for (var u in w) {
                        if (B.indexOf(u) === -1) {
                            var s = w[u];
                            if (UWA.is(s, "array") && s.length > 0) {
                                var r = s.length;
                                if (u === "drawings") {
                                    P = {
                                        SNtype: "Children",
                                        ids: s,
                                        type: "type2",
                                        relation: "drawings",
                                        useAsyncPreExpand: false,
                                        contextid: w.contextid,
                                        widgetAppId: w.widgetAppId,
                                        label: q.get("relation.drawings.label"),
                                        icons: [g.getWebappsAssetUrl("SNResultUX", "images/Box_Drawings.png")],
                                        description: r + (r > 1 ? q.get("relation.results") : q.get("relation.result"))
                                    };
                                    t = true
                                } else {
                                    t = true;
                                    K.type = "type3";
                                    K.SNtype = "Children";
                                    v.call(undefined, {
                                        id: u,
                                        info: s
                                    }, K)
                                }
                            }
                        }
                    }
                    if (t === false && B.length > 0) {
                        return z._lastNode
                    }
                    A.prepareUpdate();
                    F = new h(K);
                    N.addChild(F);
                    if (F !== null) {
                        z._lastNode = F
                    }
                    if (P !== null) {
                        F = new h(P);
                        N.addChild(F);
                        z._lastNode = F
                    }
                    A.pushUpdate();
                    z._currentSelectNode = null;
                    if (z._graph) {
                        z._graph.expandAll()
                    }
                }
            }
            return F
        },
        addRelationModel: function(t) {
            var w = this;
            var u = false;
            if (!n.is(t) || !n.is(t.options) || !n.is(t.options.relations)) {
                return
            }
            var s = w.getTreeDocument();
            if (!n.is(s)) {
                return
            }
            s.prepareUpdate();
            var z = function(D, E) {
                var C = q.get("relation.result");
                if (D.info.length > 1) {
                    C = q.get("relation.results")
                }
                switch (D.id) {
                    case "parents":
                        E.label = q.get("relation.parents.label");
                        E.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Parents.png")];
                        E.description = D.info.length + C;
                        break;
                    case "children":
                        E.label = q.get("relation.children.label");
                        E.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Children.png")];
                        E.description = D.info.length + C;
                        break;
                    case "drawings":
                        E.label = q.get("relation.drawings.label");
                        E.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Drawings.png")];
                        E.description = D.info.length + C;
                        break;
                    case "simulations":
                        E.label = q.get("relation.simulations.label");
                        E.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Simulations.png")];
                        E.description = D.info.length + C;
                        break;
                    case "configurations":
                        E.label = q.get("relation.configurations.label");
                        E.icons = [g.getWebappsAssetUrl("SNResultUX", "images/Box_Configurations.png")];
                        E.description = D.info.length + C;
                        break
                }
            };
            var r = w._lastNode;
            var v = null;
            var A = t.options.relations;
            var y = t.options.relation;
            var B = A[y];
            if (UWA.is(B, "array") && B.length > 0) {
                var x = {
                    SNtype: "Children",
                    ids: B,
                    type: "type2",
                    relation: y,
                    useAsyncPreExpand: false,
                    contextid: A.contextid,
                    widgetAppId: A.widgetAppId
                };
                z.call(undefined, {
                    id: y,
                    info: B
                }, x);
                v = new h(x);
                r.addChild(v)
            }
            if (v !== null) {
                w._lastNode = v
            }
            s.pushUpdate();
            w._currentSelectNode = null;
            if (w._graph) {
                w._graph.expandAll()
            }
            return v
        },
        addExploreModel: function(s) {
            var u = this;
            var r = u._treeDocument;
            u.HideContainers();
            if (!n.is(r)) {
                r = u.getTreeDocument()
            }
            s.SNtype = "Explore";
            s.type = "type1";
            s.label = q.get("tree.box");
            s.icons = [g.getWebappsAssetUrl("SNResultUX", "images/I_TreeListView.png")];
            s.useAsyncPreExpand = false;
            s.description = s.description;
            var t = new h(s);
            if (n.is(u._lastNode)) {
                u._removeChildrenNode();
                r.prepareUpdate();
                u._lastNode.addChild(t);
                r.pushUpdate();
                u._lastNode = t;
                u._listOfTreeGraph.push(t);
                u._ifHaveExploreOrRelatedNode = true;
                u._currentSelectNode = null;
                if (u._graph) {
                    u._graph.expandAll()
                }
            }
            return t
        },
        addRelationalModel: function(s) {
            var u = this;
            var r = u._treeDocument;
            if (!n.is(r)) {
                r = u.getTreeDocument()
            }
            u.HideContainers();
            s.SNtype = "Relational";
            s.type = "type1";
            s.label = q.get("graph.box");
            s.icons = [g.getWebappsAssetUrl("SNResultUX", "images/I_GraphView.png")];
            s.useAsyncPreExpand = false;
            s.description = s.description;
            var t = new h(s);
            if (n.is(u._lastNode)) {
                r.prepareUpdate();
                u._removeChildrenNode();
                u._lastNode.addChild(t);
                r.pushUpdate();
                u._lastNode = t;
                u._listOfTreeGraph.push(t);
                u._ifHaveExploreOrRelatedNode = true;
                u._currentSelectNode = null;
                if (u._graph) {
                    u._graph.expandAll()
                }
            }
            return t
        },
        onSelected: function(u) {
            if (!n.is(u)) {
                return
            }
            var t = this;
            var s = u.options;
            if (n.is(s)) {
                t._currentSelectNode = u;
                var r = u;
                while (r && r._options && !(r._options.SNtype === "Search")) {
                    r = r.getParent();
                    if (r._options.SNtype === "Explore" || r._options.SNtype === "Relational") {
                        t._ifHaveExploreOrRelatedNode = true
                    }
                }
                if (r) {
                    t._searchNode = r
                }
                r = u;
                while (r && r.getChildren()) {
                    r = r.getChildren()[0];
                    if (r._options.SNtype === "Explore" || r._options.SNtype === "Relational") {
                        t._ifHaveExploreOrRelatedNode = true
                    }
                }
                if (r) {
                    t._lastNode = r
                }
                t.dispatchEvent("onSelected", s)
            }
        },
        HideContainers: function() {
            var r = this;
            if (!n.is(r._listOfTreeGraph)) {
                return
            }
            r._listOfTreeGraph.forEach(function(s) {
                if (n.is(s._options) && n.is(s._options.containers)) {
                    s._options.containers.forEach(function(t) {
                        t.setStyle("display", "none")
                    })
                }
            })
        },
        ShowContainers: function(r) {
            var s = this;
            if (!n.is(r)) {
                return
            }
            s.HideContainers();
            if (n.is(r.containers)) {
                r.containers.forEach(function(t) {
                    t.setStyle("display", "block")
                })
            }
        },
        stopCreation: function(r) {
            var s = this;
            s._stopCreated = r
        },
        ifcanCreated: function() {
            var r = this;
            return (!r._stopCreated)
        },
        _removeChildrenNode: function() {
            var s = this;
            if (n.is(s._lastNode)) {
                if (s._lastNode._options.SNtype === "Children" || s._lastNode._options.SNtype === "") {
                    if (s._lastSelectNode) {
                        var r = s._lastSelectNode;
                        while (r && r.getChildren()) {
                            r = r.getChildren()[0];
                            if (r._options.SNtype === "Children" && n.is(r._isSelected)) {
                                r = null
                            }
                        }
                        if (r) {
                            s._lastSelectNode.removeChildren();
                            s._lastNode = s._lastSelectNode
                        }
                    }
                }
            }
        },
        _searchNodebyIdInSameBranch: function(t) {
            if (!n.is(t)) {
                return
            }
            var u = this;
            if (!n.is(u._lastNode)) {
                return
            }
            var s = t;
            var r = u._lastNode;
            while (r) {
                if (s && n.is(r._options.id) && r._options.id.indexOf(s) !== -1) {
                    return r
                } else {
                    r = r.getParent()
                }
            }
        },
        _removeAllNodeWithWidget: function(u) {
            var v = this;
            var y = u.getChildren();
            if (y) {
                var w = y.length;
                var x = null;
                for (var t = 0; t < w; t++) {
                    x = y[t];
                    if (x && n.is(x._options)) {
                        v._removeAllNodeWithWidget(x);
                        if (n.is(x._options.widgets, "array")) {
                            var s = x._options.widgets.length;
                            for (var t = s - 1; t >= 0; t--) {
                                var r = x._options.widgets[t];
                                if (n.is(r)) {
                                    r.destroy()
                                }
                            }
                        }
                        u.removeChild(x)
                    }
                }
            }
        },
        cleanAll: function() {
            var t = this;
            var r = t._treeDocument;
            if (r) {
                var s = r.getRoots();
                if (s) {
                    t._removeAllNodeWithWidget(s[0])
                }
                r.removeRoots();
                r.empty()
            }
            j.setContentVisibility("Search");
            t._lastNode = null;
            t._searchNode = null;
            t._currentSelectNode = null;
            t._lastSelectNode = null;
            t._lastSelectNode = null;
            t._listOfTreeGraph = []
        },
        navhistorycontextifcreateaNewTab: function() {
            var r = this;
            var s = false;
            if (n.is(r._listOfTreeGraph) && r._listOfTreeGraph.length > 0) {
                s = true
            }
            return (s)
        }
    });
    return p
});
define("DS/SNResultUX/utils/SearchDoubleClickHandler", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "DS/SNInfraUX/SearchSettings", "UWA/Promise", "UWA/Class/Collection", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/ServiceDelegationLoader"], function(g, h, e, b, f, j, a, d, c) {
    var i = h.singleton(e, {
        handle: function(u) {
            if (UWA.is(u.skeleton) && UWA.is(u.id)) {
                var n = u.skeleton;
                this.log("double click event received for " + u.id);
                var v = n.getOption("in_apps_search");
                if (v && v.UXOptions && v.UXOptions.dblClk === false) {
                    return
                }
                var q = n.getCollection();
                if (UWA.is(q)) {
                    var r = this;
                    var p = q.get(u.id);
                    if (UWA.is(p)) {
                        var l = function() {
                            r.onDoubleClick({
                                appID: d.SEARCH_APP_ID,
                                model: p,
                                onComplete: function(w) {
                                    if (UWA.is(w) && UWA.is(w.id, "string") && UWA.is(w.sourceJS, "string")) {
                                        if (w.sourceJS.length > 0) {
                                            require([w.sourceJS], function(x) {
                                                x.executeAction({
                                                    action_id: w.id,
                                                    actionsHelper: n._getActionsHelper(),
                                                    object_ids: [u.id],
                                                    widget_id: n.getOption("widgetId")
                                                })
                                            })
                                        }
                                    } else {
                                        r._logNoActionOrError({
                                            type: "bad JS impl",
                                            error: "BAD action information to handle double click"
                                        })
                                    }
                                },
                                onFailure: function(w) {
                                    r._logNoActionOrError(w)
                                }
                            })
                        };
                        var m = UWA.is(n.getOption("in_apps_search"));
                        var s = b.getOption("search_web_in_win");
                        var k = ("SavedSearch" === p.get("ds6w:type_value")) && ("3DSpace" === p.getServiceID());
                        if (k) {
                            l()
                        } else {
                            if (s) {
                                var o = {
                                    objectId: p.get("id")
                                };
                                n._searchcom_socket.dispatchEvent("onDispatchToWin", {
                                    notif_name: "onDoubleClick",
                                    notif_parameters: JSON.stringify(o),
                                }, "search_web_in_win")
                            } else {
                                if (m) {
                                    if (g.is(v.multiSel) && v.multiSel == false) {
                                        var t = n.getOption("observable");
                                        if (t) {
                                            t.dispatchInContextSelection(v.app_socket_id)
                                        }
                                    } else {
                                        r._logNoActionOrError({
                                            message: "no action on double click during in-context mode as the multi-selection is possible"
                                        })
                                    }
                                } else {
                                    l()
                                }
                            }
                        }
                    }
                }
            }
        },
        onDoubleClick: function(l) {
            var m = this;
            if (UWA.is(l)) {
                var k = l.model;
                if (UWA.is(k)) {
                    if ((k.getServiceID, "function") && (k.getPlatformID, "function")) {
                        var n = k.getServiceID(),
                            o = k.getPlatformID();
                        a.getServiceUrl({
                            serviceName: n,
                            platformId: o,
                            onComplete: function(p) {
                                c.load({
                                    serviceID: n,
                                    platformID: o,
                                    serviceURL: p
                                }).then(function(r) {
                                    if (UWA.is(r.getDoubleClickAction, "function")) {
                                        var q = {
                                            model: k,
                                            appID: l.appID,
                                            onComplete: function(s) {
                                                if (UWA.is(l.onComplete, "function")) {
                                                    l.onComplete.call(undefined, s)
                                                }
                                            },
                                            onFailure: function(s) {
                                                if (UWA.is(l.onFailure, "function")) {
                                                    l.onFailure.call(undefined, {
                                                        type: "double_click_action_delegation_failure",
                                                        error: s
                                                    })
                                                }
                                            }
                                        };
                                        r.getDoubleClickAction.call(undefined, q)
                                    }
                                }, function(q) {
                                    if (UWA.is(l.onFailure, "function")) {
                                        l.onFailure.call(undefined, {
                                            type: "require_failure",
                                            error: q
                                        })
                                    }
                                })
                            }
                        })
                    }
                }
            }
        },
        _logNoActionOrError: function(k) {
            if (UWA.is(k.error)) {
                console.log(k.type);
                console.log(k.error)
            } else {
                that.log(k.message)
            }
        }
    });
    return i
});
define("DS/SNResultUX/views/Play3DServices", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events", "UWA/Promise", "DS/SNInfraUX/SearchUtils", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "DS/SNInfraUX/ServiceDelegationLoader"], function(h, i, f, b, g, d, a, c) {
    var e = i.singleton(b, f, {
        is3DPlayAvailable: function(j) {
            return new g(function(p, o) {
                if (!h.is(j) || !h.is(j.get, "function")) {
                    if (h.is(o, "function")) {
                        o()
                    }
                }
                if (h.is(j.collection) && h.is(j.collection.service_parameters) && (h.is(j.collection.service_parameters.query) && d.SearchTypeEnum.MY_RECENT_CONTENT === j.collection.service_parameters.query)) {
                    console.warn("Play3D disabled as object is not indexed !");
                    if (h.is(o, "function")) {
                        o()
                    }
                }
                var n = j.getServiceID();
                var k = j.get("ds6w:type_value");
                if (!h.is(k)) {
                    if (h.is(o, "function")) {
                        o()
                    }
                }
                var l = j.get("play3d");
                if (h.is(l)) {
                    if (h.is(p, "function") && (h.is(o, "function"))) {
                        l ? p() : o()
                    }
                } else {
                    var q = j.getPlatformID();
                    var m = function(r) {
                        require(["DS/3DPlay/ExperiencesList"], function(s) {
                            if (h.is(s.dtypes[k])) {
                                j.set("play3d", true);
                                if (h.is(p, "function")) {
                                    p()
                                }
                            } else {
                                var t = {
                                    provider: "EV6",
                                    tenant: q,
                                    serverurl: r.serviceURL,
                                    physicalid: j.id,
                                    dtype: j.get("ds6w:type_value"),
                                    requiredAuth: "passport",
                                    requestsOptions: {
                                        authentication: "passport"
                                    }
                                };
                                s.getExperienceFromPLMType(t, function(u) {
                                    if (h.is(u)) {
                                        j.set("play3d", true);
                                        if (h.is(p, "function")) {
                                            p()
                                        }
                                    } else {
                                        j.set("play3d", false);
                                        if (h.is(o, "function")) {
                                            o()
                                        }
                                    }
                                })
                            }
                        })
                    };
                    a.getServiceUrl({
                        serviceName: n,
                        platformId: q,
                        onComplete: function(r) {
                            if (UWA.is(r, "string")) {
                                c.load({
                                    serviceID: n,
                                    platformID: q,
                                    serviceURL: r
                                }).then(function(s) {
                                    if (UWA.is(s.is3DPlayAvailable, "function")) {
                                        s.is3DPlayAvailable.call(undefined, {
                                            model: j,
                                            serviceURL: r,
                                            onComplete: function(t) {
                                                if (UWA.is(t, "object") && t.availability === true) {
                                                    j.set("play3d", true);
                                                    p()
                                                } else {
                                                    j.set("play3d", false);
                                                    o()
                                                }
                                            }
                                        })
                                    } else {
                                        m({
                                            serviceURL: r
                                        })
                                    }
                                }, function() {
                                    m({
                                        serviceURL: r
                                    })
                                })
                            }
                        }
                    })
                }
            })
        },
        get3DPlayOptions: function(j, p) {
            if (UWA.is(j) && UWA.is(p, "function")) {
                var l = j.getServiceID();
                var n = j.getPlatformID();
                if (UWA.is(l, "string") && UWA.is(n, "string")) {
                    var o = {
                        input: {
                            asset: {},
                            usage: "preview"
                        },
                        options: {
                            loading: "autoplay",
                            tenant: n
                        },
                        lang: d.getLanguage()
                    };
                    var k = function(q) {
                        playOptions.input.asset.serverurl = q;
                        playOptions.input.asset.provider = "EV6", playOptions.input.asset.physicalid = j.id, playOptions.input.asset.dtype = j.get("ds6w:type_value"), playOptions.input.asset.requiredAuth = "passport", playOptions.input.asset.requestsOptions = {
                            authentication: "passport"
                        }, playOptions.input.asset.filename = null, playOptions.input.asset.format = null
                    };
                    var m = function(q) {
                        k();
                        if (l === "geoservice") {
                            o.input.asset.provider = "GEOVIA";
                            p.call(undefined, o)
                        }
                    };
                    a.getServiceUrl({
                        serviceName: l,
                        platformId: n,
                        onComplete: function(q) {
                            if (UWA.is(q, "string")) {
                                c.load({
                                    serviceID: l,
                                    platformID: n,
                                    serviceURL: q
                                }).then(function(r) {
                                    if (UWA.is(r.get3DPlayOptions, "function")) {
                                        r.get3DPlayOptions.call(undefined, {
                                            defaultPlayOptions: o,
                                            model: j,
                                            serviceURL: q,
                                            onComplete: function(s) {
                                                p.call(undefined, s)
                                            },
                                            onFailure: function(s) {
                                                console.log("get3DPlayOptions FAILED for " + l);
                                                p.call(undefined, o)
                                            }
                                        })
                                    } else {
                                        if (UWA.is(r.get3DPlayProvider, "function")) {
                                            k(o, q);
                                            o.input.asset.provider = r.get3DPlayProvider.call(undefined);
                                            p.call(undefined, o)
                                        } else {
                                            k(q);
                                            p.call(undefined, o)
                                        }
                                    }
                                }, function() {
                                    k(q);
                                    p.call(undefined, o)
                                })
                            }
                        }
                    })
                }
            }
        }
    });
    return e
});
define("DS/SNResultUX/views/SearchHeaderCmd", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events", "DS/UIKIT/Tooltip", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(c, g, b, f, d, e) {
    var a = g.extend(f, b, {
        render: function(h) {
            if (!c.is(h)) {
                return null
            }
            var j = this;
            j.headerscontent = UWA.createElement("div", {
                "class": "searchHeaderCmd_content"
            });
            j.headerscontent.inject(h, "before");
            j.headerhistory = UWA.createElement("div", {
                "class": "searchHeaderCmd_content_Header"
            });
            j.headerhistory.inject(j.headerscontent);
            var l = UWA.createElement("span", {
                id: "History",
                "class": "fonticon fonticon-navigation-history"
            }).inject(j.headerhistory);
            var k = new d({
                position: "bottom",
                target: l,
                body: e.get("actions.History.toolTip")
            });
            l.addEvent("click", function(m) {
                j.dispatchEvent("onHistoryAction");
                m.stopPropagation()
            });
            j.headerinformationpanel = UWA.createElement("div", {
                "class": "searchHeaderCmd_content_Header"
            });
            j.headerinformationpanel.inject(j.headerscontent);
            var i = UWA.createElement("span", {
                id: "InfoPanel",
                "class": "fonticon fonticon-info"
            }).inject(j.headerinformationpanel);
            k = new d({
                position: "bottom",
                target: i,
                body: e.get("actions.InfoPanel.toolTip")
            });
            i.addEvent("click", function(m) {
                j.dispatchEvent("onInformationPanelAction");
                m.stopPropagation()
            })
        }
    });
    return a
});
define("DS/SNResultUX/webinwin/WebInWinTaggerProxy", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "DS/MessageBus/MessageBus", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchCom"], function(c, g, a, h, f, e) {
    var d = false;
    var b = g.extend(a, {
        _index_notif: 0,
        _searchcom_socket: null,
        _filters: null,
        _proxyId: "Universal_SearchCtx_Proxy",
        _contextId: null,
        _socket_id: "",
        init: function(i) {
            if (!c.is(i, "object") || !c.is(i.widgetId, "string") || !c.is(i.events.addFilterChangeListener, "function") || !c.is(i.events.addCriteriaChangeListener, "function")) {
                throw ("E_INVALIDARG: in init !")
            }
            var k = this;
            this.setDebugMode(f.getDebugMode());
            this._socket_id = "webinwinproxy_socket_" + i.widgetId + "_" + i.proxyId;
            this._searchcom_socket = e.createSocket({
                socket_id: this._socket_id
            });
            i.event_id = "createProxy";
            i.proxyId = i.proxyId || this._proxyId;
            this._proxyId = i.proxyId;
            this._contextId = i.contextId;
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: i
            };
            this._dispatchEvent(j);
            this._searchcom_socket.addListener("onFilterChange", function(l) {
                if (!c.is(l) || !c.is(l.allfilters) || !c.is(l.localfilters)) {
                    console.warn("Error, expect to have parameters.allfilters and parameters.localfilter arg !!!")
                }
                k._filters = l;
                i.events.addFilterChangeListener.call(null, l)
            });
            this._searchcom_socket.addListener("_internalFilterChangeListener", function(l) {
                if (!c.is(l) || !c.is(l.allfilters) || !c.is(l.localfilters)) {
                    console.warn("Error, expect to have parameters.allfilters and parameters.localfilter arg !!!")
                }
                k._filters = l
            });
            this._searchcom_socket.addListener("addFilterChangeListener", function(l) {
                if (!c.is(l) || !c.is(l.allfilters) || !c.is(l.localfilters)) {
                    console.warn("Error, expect to have parameters.allfilters and parameters.localfilter arg !!!")
                }
                k._filters = l;
                i.events.addFilterChangeListener.call(null, l)
            });
            this._searchcom_socket.addListener("addPLMUpdateListener", function(l) {
                if (!c.is(l) || !c.is(l.allfilters) || !c.is(l.localfilters)) {
                    console.warn("Error, expect to have parameters.allfilters and parameters.localfilter arg !!!")
                }
                k._filters = l;
                i.events.addPLMUpdateListener.call(null, l)
            });
            this._searchcom_socket.addListener("addRequestSuggestsListener", function(l) {
                if (!c.is(l) || !c.is(l.allfilters) || !c.is(l.localfilters)) {
                    console.warn("Error, expect to have parameters.allfilters and parameters.localfilter arg !!!")
                }
                k._filters = l;
                i.events.addRequestSuggestsListener.call(null, l)
            });
            this._searchcom_socket.addListener("addCriteriaChangeListener", function(l) {
                if (!c.is(l)) {
                    console.warn("Error, expect to have valid parameters arg !!!")
                }
                k._filters = l;
                i.events.addCriteriaChangeListener.call(null, l)
            });
            this._searchcom_socket.addListener("addVisibilityChangeListener", function(l) {
                if (!c.is(l)) {
                    console.warn("Error, expect to have valid parameters arg !!!")
                }
                d = l
            });
            this.log("WebInWinTaggerProxy.createProxy sent")
        },
        toggleProxyFocus: function(i) {
            this.log("WebInWinTaggerProxy.toggleProxyFocus sent");
            var k = {
                event_id: "toggleProxyFocus",
                status_focus: i,
                proxyId: this._proxyId
            };
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: k
            };
            this._dispatchEvent(j)
        },
        getCurrentFilter: function() {
            this.log("WebInWinTaggerProxy.getCurrentFilter");
            return this._filters
        },
        getDisplayStatus: function() {
            this.log("WebInWinTaggerProxy.getDisplayStatus");
            return c.clone(d)
        },
        clearLocalFilter: function() {
            if (UWA.is(this._filters), "object") {
                this._filters = {}
            }
            this.log("WebInWinTaggerProxy.clearLocalFilter sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "clearLocalFilter",
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i)
        },
        setLocalFilter: function(i, k) {
            this.log("WebInWinTaggerProxy.setLocalFilter sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "setLocalFilter",
                    options: i,
                    warn: k,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        setTags: function(j, i, l) {
            this.log("WebInWinTaggerProxy.setTags sent");
            var k = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "setTags",
                    tagsdata: j,
                    summaryData: i,
                    attribute: l,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(k)
        },
        addSubjects: function(i) {
            this.log("WebInWinTaggerProxy.addSubjects sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "addSubjects",
                    tagsdata: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        setCriteria: function(i) {
            this.log("WebInWinTaggerProxy.setCriteria sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "setCriteria",
                    suggestedArray: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        updateCriteria: function(i) {
            this.log("WebInWinTaggerProxy.updateCriteria sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "updateCriteria",
                    suggestedArray: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        updatePLMSuggestions: function(i) {
            this.log("WebInWinTaggerProxy.updatePLMSuggestions sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "updatePLMSuggestions",
                    suggestedArray: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        updateSuggestions: function(i) {
            this.log("WebInWinTaggerProxy.updateSuggestions sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "updateSuggestions",
                    suggestedArray: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        removeCriteria: function(i) {
            this.log("WebInWinTaggerProxy.removeCriteria sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "removeCriteria",
                    predicatesToRemove: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        displayCriteria: function(j) {
            this.log("WebInWinTaggerProxy.displayCriteria sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "displayCriteria",
                    proxyId: this._proxyId,
                    checkIsACriteria: j
                }
            };
            this._dispatchEvent(i)
        },
        unsetTags: function() {
            this.log("WebInWinTaggerProxy.unsetTags sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "unsetTags",
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i)
        },
        focusOnSubjects: function(i, j, l) {
            this.log("WebInWinTaggerProxy.focusOnSubjects sent");
            var k = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "focusOnSubjects",
                    subjectsURI: i,
                    persistTags: j,
                    dataSources: l,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(k)
        },
        unfocus: function() {
            this.log("WebInWinTaggerProxy.focusOnSubjects sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "unfocus",
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i)
        },
        die: function() {
            this.log("WebInWinTaggerProxy.die sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "die",
                    proxyId: this._proxyId
                }
            };
            var j;
            if (UWA.is(this._contextId)) {
                i.notif_parameters.contextId = this._contextId;
                j = h.getSubscriptions({
                    channel: this._contextId,
                    topic: "WebInWinTaggerProxy_die"
                })
            }
            if (UWA.is(j, "array") && j.length > 0) {
                h.publish({
                    channel: this._contextId,
                    topic: "WebInWinTaggerProxy_die",
                    data: i
                })
            } else {
                this._dispatchEvent(i)
            }
            e.deleteSocket(this._socket_id)
        },
        setPredicates: function(i) {
            this.log("WebInWinTaggerProxy.setPredicates sent");
            var j = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "setPredicates",
                    predicates: i,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(j)
        },
        toggleDisplayAll: function(j) {
            this.log("WebInWinTaggerProxy.toggleDisplayAll sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "toggleDisplayAll",
                    force: j,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i)
        },
        toggleDisplayAllCriteria: function(j) {
            this.log("WebInWinTaggerProxy.toggleDisplayAllCriteria sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "toggleDisplayAllCriteria",
                    force: j,
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i)
        },
        activate: function() {
            this.log("WebInWinTaggerProxy.activate sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "activate",
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i);
            e.deleteSocket(this._socket_id)
        },
        deactivate: function() {
            this.log("WebInWinTaggerProxy.deactivate sent");
            var i = {
                notif_name: "event4taggerWebInWin",
                notif_parameters: {
                    event_id: "deactivate",
                    proxyId: this._proxyId
                }
            };
            this._dispatchEvent(i);
            e.deleteSocket(this._socket_id)
        },
        _dispatchEvent: function(i) {
            if (!c.is(i, "object") || !c.is(i.notif_parameters, "object")) {
                throw ("E_INVALIDARG: in _dispatchEvent !")
            }
            var j = i;
            j.notif_parameters.index_notif = this._index_notif;
            this._searchcom_socket.dispatchEvent("onDispatchToWin", j);
            this._index_notif = this._index_notif + 1
        }
    });
    return b
});
define("DS/SNResultUX/views/SearchContentSet", ["UWA/Core", "DS/W3DXComponents/ContentSet", "DS/SNInfraUX/SearchSettings"], function(d, c, e) {
    var b = "search-content-set";

    function a(g, i) {
        var h;
        if (g) {
            h = g[i];
            if (d.is(h, "function")) {
                h = h.call(g)
            }
        }
        return h
    }
    var f = c.extend({
        name: b,
        test: false,
        buildMultiselOnCheck: function(h) {
            if (this.multiselHeaderView) {
                var l = this.contentsViews[this.currentViewId].nestedView;
                var m = l.getSelectionState();
                if (m.isActive) {
                    if (!d.is(h, "array")) {
                        if (l.isSelected(h)) {
                            l.removeSelection(h)
                        } else {
                            l.addSelection(h)
                        }
                    } else {
                        for (var k = 0; k < h.length; k++) {
                            if (l.isSelected(h[k])) {} else {
                                l.addSelection(h[k])
                            }
                        }
                    }
                } else {
                    if (!d.is(h, "array")) {
                        if (d.is(h) && !l.isSelected(h)) {
                            l.addSelection(h);
                            l.activateMultisel(false)
                        } else {
                            l.deactivateMultisel();
                            this.multiselHeaderView.dispatchEvent("onMultiselOff")
                        }
                    } else {
                        for (var g = 0; g < h.length; g++) {
                            if (d.is(h[g]) && !l.isSelected(h[g])) {
                                l.addSelection(h[g])
                            }
                        }
                    }
                }
                this.multiselHeaderView.buildMultisel(m);
                if (l.selectionIsEmpty() && !m.wasExplicitlyActivated) {
                    l.deactivateMultisel()
                }
            }
        },
        _initMultiselHeaderView: function() {
            if (!this.getOption("actions").collection) {
                return
            }
            var k = {},
                l = "onItemViewSelect",
                j = this,
                h, i;
            var g = a(this, "multiselHeader");
            i = this._multiselHeaderViewEvents = {
                onMultiselOn: function() {
                    var n = this.contentsViews[this.currentViewId];
                    if (this.currentViewId !== "table" && UWA.is(this.contentsViews.table)) {
                        var m = this.contentsViews.table;
                        m.nestedView.activateMultisel()
                    }
                    n.nestedView.activateMultisel(true);
                    this.dispatchEvent("onMultiselOn", arguments)
                },
                onMultiselOff: function() {
                    var n = this.contentsViews[this.currentViewId];
                    if (this.currentViewId !== "table" && UWA.is(this.contentsViews.table)) {
                        var m = this.contentsViews.table;
                        m.nestedView.deactivateMultisel()
                    }
                    n.nestedView.deactivateMultisel();
                    this.dispatchEvent("onMultiselOff", arguments)
                },
                onActionClick: function() {
                    Array.prototype.unshift.call(arguments, this.actionsView);
                    this.dispatchEvent("onActionClick", arguments)
                }
            };
            if (e.getOption("actionsProtocol_FUN065512")) {
                i.onActionClickDotted = function() {
                    var n = j.getSelection();
                    if (UWA.is(n, "array")) {
                        if (UWA.is(j.collection)) {
                            var m = j.collection.getSNSkeleton();
                            if (UWA.is(m)) {
                                m.buildMultiselActions(n)
                            }
                        }
                    }
                }
            }
            h = this.multiselHeaderView = new g(this.getMultiselHeaderViewOptions());
            this.listenTo(h, i);
            return h
        },
        getMultiselHeaderViewOptions: function() {
            var g = this._parent.apply(this, arguments);
            if (!d.is(g)) {
                g = {}
            }
            g["data-rec-id"] = true;
            return g
        },
        getActionsViewOptions: function() {
            var h = this;
            var g = this._parent();
            g.filterer = function(k) {
                var m = h.collection._snSkeleton._searchActions.displayMode;
                if (!d.is(m)) {
                    return true
                }
                var j = k.get("icon");
                var l = k.get("displayMode");
                var n = k.get("id");
                var i = true;
                if (!d.is(l, "string")) {
                    i = true
                } else {
                    if (l === "AllView") {
                        i = true
                    } else {
                        if (l.search(m) >= 0) {
                            i = true
                        } else {
                            i = false
                        }
                    }
                }
                return i
            };
            return g
        },
        onRender: function() {
            var g = this;
            this.addEvent("onItemRendered", function() {
                var j = g.collection._snSkeleton._searchActions;
                if (d.is(j)) {
                    j.setSearchContentSetDivContainer(this.container);
                    var i = j.displayMode;
                    if (d.is(i, "string")) {
                        j.setDisplayMode(i)
                    }
                }
                var h = d.extendElement(this.container).getElement(".search-content-set-header");
                this.collection._snSkeleton.options.observable.setSearchContentSetHeader(h);
                if (d.is(h) && d.is(h.hide, "function") && (!d.is(this.collection.totalCount) || this.collection.totalCount < 0) && !e.getOption("deactivateHideToolbar")) {
                    h.hide()
                }
            });
            this._parent()
        }
    });
    return f
});
define("DS/SNResultUX/views/SearchGridScrollView", ["UWA/Core", "UWA/Class/Options", "UWA/Class/Listener", "DS/SNInfraUX/SearchCom", "DS/SNResultUX/utils/SearchServices", "DS/W3DXComponents/Views/Layout/GridScrollView", "DS/WebappsUtils/Performance"], function(d, b, g, c, h, i, a) {
    var e = "search-grid_view";
    var f = i.extend(b, g, {
        name: e,
        _searchcom_socket: null,
        init: function(j) {
            var k = this;
            this._parent.call(this, j);
            if (!d.is(this._searchcom_socket)) {
                this._searchcom_socket = c.createSocket({
                    socket_id: "search_skeleton_" + a.now()
                })
            }
            this._searchcom_socket.addListener("onSelectShift", k.onSelectShiftCallback.bind(k))
        },
        onSelectShiftCallback: function(n, j, q) {
            console.log("DS/SNResultUX/views/SearchGridScrollView onSelectShiftCallback");
            var l = -1;
            var o = -1;
            var k = this.collection.find(function(r) {
                return r.get("id") === n[0].id
            });
            l = this.collection.indexOf(k);
            var p = this.collection.find(function(r) {
                return r.get("id") === n[1].id
            });
            o = this.collection.indexOf(p);
            var m = null;
            if (o < l) {
                m = o;
                o = l;
                l = m
            }
            if ((l === -1) || (o == -1) || h.isEqualPreviousSlice(l, o)) {
                return
            }
            h.setPreviousSlice(l, o);
            this.dispatchEvent("onItemViewCheck", [null, this.collection.slice(l + 1, o)]);
            if (this.collection._snSkeleton) {
                this.collection._snSkeleton._shiftTransaction = false
            }
        }
    });
    return f
});
define("DS/SNResultUX/models/SearchItemModel", ["UWA/Core", "UWA/Class/Model", "DS/W3DXComponents/Collections/ActionsCollection", "DS/SNInfraUX/SearchUtils", "DS/SNResultUX/utils/ResultUX_customization", "DS/SNInfraUX/SearchLogin", "DS/SNInfraUX/SearchSettings"], function(d, c, b, e, a, g, f) {
    var h = c.extend({
        _isRecentSearch: false,
        setup: function(j, k) {
            var m = this;
            this.actions = new b([], {
                parent: this
            });
            this.action_ids = [];
            if (d.is(j)) {
                if (j.hasOwnProperty("session_object")) {
                    this.session_object = true;
                    delete j.session_object
                }
                if (j.hasOwnProperty("isRecentSearchResult")) {
                    this._isRecentSearch = j.isRecentSearchResult;
                    delete j.isRecentSearchResult
                }
            }
            var i = true;
            var l = null;
            if (d.is(this.collection)) {
                if (this.collection._isAHelper === true) {
                    i = false
                }
                l = this.collection._ctx_options
            }
            if (true == this.isAShowOnlyObject()) {
                i = false
            }
            if (i) {
                a.getAvailableActions({
                    attributes: j
                }, function(n) {
                    n.forEach(function(o) {
                        if (m.action_ids.indexOf(o.id) === -1) {
                            m.action_ids.push(o.id);
                            m.actions.push(o)
                        }
                    });
                    if (!m._attributes.actions || m._attributes.actions.length === 0) {
                        m._attributes.actions = m.actions.pluck("title")
                    }
                }, {
                    inCtxOptions: l
                })
            }
            this._parent(j, k)
        },
        getFederatedSource: function() {
            return d.is(this.collection) ? this.collection.search_ressources : null
        },
        get: function(i) {
            return this._parent(e.getURIToUse(i))
        },
        set: function(n, p, l) {
            var k;
            if (d.is(n, "object")) {
                var o = Object.keys(n);
                k = {};
                for (var m = 0, j = o.length; m < j; m++) {
                    k[e.getURIToUse(o[m])] = n[o[m]]
                }
                l = p || {}
            } else {
                k = {};
                k[e.getURIToUse(n)] = p;
                l = l || {}
            }
            return this._parent(k, l)
        },
        getSourceID: function() {
            var i = this.get("sourceid_value");
            if (d.is(i, "string") && i.length > 0) {
                return i.split(":")[0]
            } else {
                console.error("sourceid not found OR not in the expected format")
            }
        },
        getServiceID: function() {
            return g.getServiceFromSource(this.getSourceID())
        },
        getPlatformID: function() {
            var i = "OnPremise";
            var j = this.get("sourceid_value");
            if (d.is(j, "string") && j.length > 0) {
                var k = j.split(":");
                if (k.length > 1) {
                    i = k[1]
                }
            } else {
                console.error("sourceid not found OR not in the expected format")
            }
            return i
        },
        getType: function() {
            return this.get("ds6w:type_value")
        },
        isARecentSearchResult: function() {
            return this._isRecentSearch
        },
        isAShowOnlyObject: function() {
            var i = this.get("showonly");
            if (true === f.getOption("showOnlySupport")) {
                if (d.is(i, "string") && "true" === i) {
                    return true
                } else {
                    return false
                }
            }
            return false
        },
        IsAnInstance: function() {
            if (f.getOption("SEARCH_INSTANCES") === true) {
                var i = this.get("ds6wg:isAnInstance_value");
                if (i === "Instance") {
                    return true
                }
            }
            return false
        }
    });
    return h
});
define("DS/SNResultUX/views/LightBoxView", ["UWA/Class/Debug", "UWA/Core", "UWA/Controls/Abstract", "DS/UIKIT/Spinner", "DS/Utilities/Utils", "DS/Tree/LightBoxView", "DS/Controls/TooltipModel", "DS/SNResultUX/views/Play3DServices", "DS/SNResultUX/views/PropertiesServices", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(e, h, c, b, j, a, i, d, f, k) {
    var g = c.extend(e, {
        _player3D: null,
        _LightBoxPanel: null,
        _model: null,
        _parentContainer: null,
        _treeDocument: null,
        _informationPanel: null,
        _channelView: null,
        _treeListView: null,
        _collection: null,
        _mySpinner: null,
        _viewerElement: null,
        _firstInit: true,
        _is3DPlay: false,
        _debounced3DPlayerLoad: null,
        init: function(n) {
            this._parent(n);
            var o = this;
            o._parentContainer = n.parentContainer;
            o._model = n.model;
            o._treeDocument = n.treeDocument;
            o._treeListView = n.treeListView;
            o._collection = n.collection;
            o._widget_id = n.widget_id;
            o._debounced3DPlayerLoad = j.debounce(function(q) {
                if (!UWA.is(q)) {
                    return
                }
                if (q._is3DPlay) {
                    q.load3DPlayer(q._model)
                }
            }, 300);
            var m = o._collection.indexOf(o._model);
            if (m === -1) {
                m = 0
            }
            if (m >= 0) {
                var p = null;
                var l = o._treeDocument.getRoots();
                if (UWA.is(l, "array")) {
                    if (m < l.length) {
                        p = l[m];
                        if (UWA.is(p)) {
                            p.select();
                            d.is3DPlayAvailable(o._model).then(function() {
                                console.warn("Selected object is 3DPlay available")
                            }, function() {
                                console.warn("Selected object is NOT 3DPlay available")
                            })
                        }
                    }
                }
            }
        },
        onDestroy: function() {
            if (h.is(this._informationPanel)) {
                this._informationPanel.dispose()
            }
            if (h.is(this._player3D)) {
                this._player3D.dispose()
            }
            if (h.is(this._LightBoxPanel)) {
                this._LightBoxPanel.dispose()
            }
            if (h.is(this._channelView)) {
                this._channelView.dispose()
            }
            if (h.is(this._mySpinner)) {
                this._mySpinner.destroy();
                this._mySpinner = null
            }
            _player3D = null;
            _LightBoxPanel = null;
            _model = null;
            _informationPanel = null;
            this.container.empty();
            return this._parent.apply(this, arguments)
        },
        _initPlayer: function() {
            var n = this;
            if (n._player3D !== null && n._LightBoxPanel !== null) {
                return
            }
            var m = [];
            m.push({
                type: "check",
                icon: {
                    iconName: "info",
                    fontIconFamily: WUXManagedFontIcons.font3DS,
                    fontIconSize: "2x"
                },
                tooltipInfos: new i({
                    shortHelp: k.get("actions.InfoPanel.toolTip"),
                    mouseRelativePosition: false
                }),
                callback: n.onInfoclick.bind(this)
            });
            n._LightBoxPanel = new a({
                target: n._parentContainer,
                treeDocument: n._treeDocument,
                height: "auto",
                toolbar: m,
                bigPicturePath: n.CustoonbigPicturePath.bind(this),
                onRightViewRequest: n.onCustoonRightViewRequest.bind(this),
                onTitleRequest: n.onCustoTitleRequest.bind(this),
                onMainViewRequest: n.onCustoMainViewRequest.bind(this)
            });
            var o = n._LightBoxPanel.getRightDockingElement();
            if (h.is(o)) {
                o.collapsibleFlag = false;
                o.dockingZoneSize = 420;
                o.minSize = 250;
                o.visibleDockingZoneFlag = false
            }
            n._treeDocument.getXSO().onAdd(function(p) {
                n.onSelected(p)
            });
            n._LightBoxPanel.addEventListener("close", function(p) {
                n.dispatchEvent("onLightBoxPanelClose")
            });
            n._channelView = n._LightBoxPanel.getGridView();
            if (n._channelView !== null) {
                n._channelView.options.selection.canMultiSelect = false;
                n._channelView.onCellRequest(function(q) {
                    var p = q.nodeModel;
                    q.cellView.elements.container.setAttribute("draggable", "false");
                    q.cellView.setTitle(p.options._attributes["ds6w:label"]);
                    q.cellView.setSubtitle(p.options._attributes["ds6w:responsible"]);
                    q.cellView.setPicture(p.options._attributes.preview_url);
                    q.cellView.setIcon(p.options._attributes.type_icon_url);
                    if (p.isSelected()) {
                        q.cellView.highlight()
                    }
                });
                n._channelView.onInfiniteScrollAsync(function() {
                    if (n._collection !== null) {
                        if (n._collection._search_in_progress === false) {
                            if (n._collection.hasNextPage()) {
                                n._collection.getNextPage({
                                    remove: false,
                                    onComplete: function() {
                                        n._channelView.infiniteScrollAsyncProcessDone();
                                        n._collection.generateTreeModel();
                                        n._toggleLoader()
                                    },
                                    onFailure: function(p) {
                                        n._channelView.infiniteScrollAsyncProcessDone()
                                    }
                                })
                            } else {
                                n._channelView.infiniteScrollAsyncProcessDone()
                            }
                        }
                    }
                })
            }
            var l = n._LightBoxPanel.getBottomDockingElement();
            if (l !== null) {
                l.addEventListener("collapse", function() {
                    if (h.is(n._informationPanel)) {
                        n._informationPanel.onResize()
                    }
                });
                l.addEventListener("expand", function() {
                    if (h.is(n._informationPanel)) {
                        n._informationPanel.onResize()
                    }
                })
            }
        },
        onInfoclick: function() {
            var n = this;
            if (n._LightBoxPanel !== null) {
                var o = n._LightBoxPanel.getRightDockingElement();
                if (o !== null) {
                    if (n._informationPanel === null) {
                        n.onCustoonRightViewRequest()
                    }
                    var l = o.visibleDockingZoneFlag;
                    o.visibleDockingZoneFlag = !l;
                    if (o.visibleDockingZoneFlag === true) {
                        if (h.is(n._informationPanel)) {
                            n._informationPanel.onResize()
                        }
                    }
                    var m = n._widget_id;
                    if (h.is(m) && h.is(UWA.Widgets) && h.is(UWA.Widgets.instances)) {
                        UWA.Widgets.instances.forEach(function(p) {
                            if (p.id === m) {
                                if (!l === true) {
                                    p.setValue("previewPanelState_Info", true)
                                } else {
                                    p.setValue("previewPanelState_Info", false)
                                }
                            }
                        })
                    } else {
                        if (!l === true) {
                            widget.setValue("previewPanelState_Info", true)
                        } else {
                            widget.setValue("previewPanelState_Info", false)
                        }
                    }
                }
            }
        },
        onCustoMainViewRequest: function(o) {
            var n = this;
            if (o !== null && o.nodeModel !== null) {
                var m = o.nodeModel;
                n._model = m.options;
                if (n._model !== null) {
                    var p = {
                        id: n._model.id
                    };
                    var l = n._model.collection.where(p);
                    if (h.is(l) && l.length > 0) {
                        n._model = l[0]
                    }
                }
            }
            if (n._viewerElement === null) {
                n._viewerElement = UWA.createElement("div").inject(o.nodeView);
                n._viewerElement.setStyle("display", "none")
            }
            if (n._LightBoxPanel !== null && n._LightBoxPanel.visibleFlag === false) {
                return
            }
            n.onMainViewDisplay(o)
        },
        onMainViewDisplay: function(m) {
            var l = this;
            d.is3DPlayAvailable(l._model).then(function() {
                l._is3DPlay = true;
                if (l._viewerElement !== null) {
                    l._viewerElement.setStyle("display", "inline")
                }
                if (l._player3D === null) {
                    d.get3DPlayOptions(l._model, function(n) {
                        require(["DS/3DPlayHelper/3DPlayHelper"], function(o) {
                            n.container = l._viewerElement;
                            l._player3D = new o(n);
                            if (l._firstInit === true) {
                                l.setChannelPosition()
                            }
                            l._firstInit = false
                        })
                    })
                } else {
                    l._debounced3DPlayerLoad.call(l, l)
                }
            }, function() {
                l._is3DPlay = false;
                if (l._viewerElement !== null) {
                    l._viewerElement.setStyle("display", "none")
                }
                var n = m.view.bigPicturePath(m);
                m.nodeView.setStyles({
                    backgroundImage: "url(" + n + ")",
                    backgroundSize: "contain",
                    backgroundRepeat: "no-repeat",
                    backgroundPosition: "50% 50%"
                });
                if (l._firstInit === true) {
                    l.setChannelPosition()
                }
                l._firstInit = false
            })
        },
        load3DPlayer: function(l) {
            if (!h.is(l)) {
                return
            }
            var m = this;
            d.get3DPlayOptions(l, function(n) {
                m._player3D.load(n)
            })
        },
        onCustoTitleRequest: function(n) {
            var m = this;
            var l = n.nodeModel;
            n.nodeView.setContent(l.options._attributes["ds6w:label"])
        },
        onSelected: function(o) {
            var m = this;
            m._model = o.options;
            if (m._model !== null) {
                var n = {
                    id: m._model.id
                };
                var l = m._model.collection.where(n);
                if (h.is(l) && l.length > 0) {
                    m._model = l[0];
                    d.is3DPlayAvailable(m._model).then(function() {
                        console.warn("Selected object is 3DPlay available")
                    }, function() {
                        console.warn("Selected object is NOT 3DPlay available")
                    })
                }
            }
        },
        activate_deactivate: function(n) {
            var p = this;
            if (p._LightBoxPanel === null) {
                return
            }
            var o = p._LightBoxPanel.visibleFlag;
            if (o === true) {
                p._LightBoxPanel.visibleFlag = false
            } else {
                var m = p._collection.indexOf(p._model);
                if (m >= 0) {
                    var l = p._treeDocument.getRoots();
                    if (UWA.is(l, "array")) {
                        if (m < l.length) {
                            var q = l[m];
                            if (UWA.is(q)) {
                                q.unselect()
                            }
                        }
                    }
                }
                p._model = null;
                if (h.is(n) && n !== null) {
                    p._model = n
                }
                var m = p._collection.indexOf(p._model);
                if (m === -1) {
                    m = 0
                }
                if (m >= 0) {
                    var q = null;
                    var l = p._treeDocument.getRoots();
                    if (UWA.is(l, "array")) {
                        if (m < l.length) {
                            q = l[m];
                            if (UWA.is(q)) {
                                q.select()
                            }
                        }
                    }
                    p.onMainViewDisplay({
                        nodeModel: q,
                        nodeView: p._LightBoxPanel.elements.mainViewContent,
                        view: p._LightBoxPanel
                    });
                    p._LightBoxPanel.visibleFlag = true;
                    p.setChannelPosition(q)
                }
            }
        },
        setChannelPosition: function(p) {
            var q = this;
            var r = p;
            if (!h.is(r)) {
                var o = q._collection.indexOf(q._model);
                if (o === -1) {
                    o = 0
                }
                if (o >= 0) {
                    var r = null;
                    var n = q._treeDocument.getRoots();
                    if (UWA.is(n, "array")) {
                        if (o < n.length) {
                            r = n[o]
                        }
                    }
                }
            }
            if (!h.is(q._channelView)) {
                return
            }
            var m = q._channelView.getScroller();
            if (h.is(m)) {
                var l = q._channelView.options.defaultCellWidth * q._channelView.options.model.indexOf(r);
                m.getContent().scrollLeft = l
            }
        },
        CustoonbigPicturePath: function(n) {
            var m = this;
            var l = n.nodeModel;
            if (!h.is(l)) {
                return (model._attributes.preview_url)
            }
            return l.options._attributes.preview_url
        },
        onCustoonRightViewRequest: function(m) {
            var l = this;
            if (h.is(l._informationPanel)) {
                l._informationPanel.destroy();
                l._informationPanel = null
            }
            if (UWA.is(l._model)) {
                require(["DS/EditPropWidget/EditPropWidget", "DS/EditPropWidget/models/EditPropModel", "DS/EditPropWidget/constants/EditPropConstants", "DS/EditPropWidget/models/EditPropAttributeModel", "DS/EditPropWidget/constants/ConstantsMapping"], function(r, q, p, n, o) {
                    f.getOptions({
                        model: l._model,
                        EditPropConstants: p,
                        onComplete: function(t) {
                            l._informationPanel = new r(t);
                            if (h.is(m) && h.is(m.nodeView) && h.is(m.nodeView.setContent)) {
                                m.nodeView.setContent(l._informationPanel)
                            }
                            var s = f.getPropModelFromSearchItem(l._model, q, n, o);
                            l._informationPanel.initDatas(s)
                        },
                        onAddFacets: function(s) {
                            if (UWA.is(l._informationPanel)) {
                                l._informationPanel.addFacets(s)
                            }
                        }
                    })
                })
            }
        },
        _toggleLoader: function() {
            var m = this;
            var l = m._channelView.getContent();
            if (UWA.is(m._mySpinner)) {
                m._mySpinner.toggle()
            } else {
                var n = UWA.createElement("div", {
                    "class": "datagrid-loader"
                });
                n.setStyle("text-align", "center");
                n.setStyle("position", "relative");
                n.setStyle("top", "-12px");
                n.inject(l);
                m._mySpinner = new b().inject(n).show()
            }
        },
        changeModel: function(l) {
            var m = this;
            if (!UWA.is(l) || !m._LightBoxPanel) {
                return
            }
            m._treeDocument = l;
            m._LightBoxPanel.setProperties({
                treeDocument: m._treeDocument
            });
            m._treeDocument.getXSO().onAdd(function(n) {
                m.onSelected(n)
            })
        }
    });
    return g
});
define("DS/SNResultUX/views/InformationsPanelView", ["UWA/Class/Debug", "UWA/Core", "UWA/Controls/Abstract", "DS/UIKIT/Alert", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/SNResultUX/views/PropertiesServices", "DS/i3DXCompassServices/i3DXCompassPubSub", "DS/SNInfraUX/SearchPreferences"], function(g, i, a, d, c, e, h, j, f) {
    var b = a.extend(g, {
        _informationPanel: null,
        _rightDockingElement: null,
        _rootView: null,
        _lastSelectedItem: null,
        init: function(k) {
            this._parent(k);
            var l = this;
            l._rootView = k.parentContainer;
            l._lastSelectedItem = k.lastSelectedItem
        },
        destroy: function() {
            if (i.is(this._rightDockingElement)) {
                this._rightDockingElement.destroy()
            }
            if (i.is(this._informationPanel)) {
                this._informationPanel.destroy()
            }
            this._rightDockingElement = null;
            this._informationPanel = null;
            return this._parent.apply(this, arguments)
        },
        _initInformationsPanel: function() {
            var k = this;
            if (k._rootView === null) {
                return
            }
            if (k._rightDockingElement !== null && k._informationPanel !== null) {
                return
            }
            if (k._informationPanel === null) {
                require(["DS/Windows/DockingElement"], function(l) {
                    k._rightDockingElement = new l({
                        side: WUXDockAreaEnum.RightDockArea,
                        dockingZoneSize: 420,
                        minSize: 250
                    });
                    var n = null;
                    if (f.getItem("nav_history")) {
                        var n = k._rootView.getParent();
                        k._rightDockingElement.collapsibleFlag = false;
                        k._rightDockingElement.freeZoneContent = k._rootView;
                        k._rightDockingElement.inject(n);
                        k._rightDockingElement.addEventListener("expand", function() {
                            k.updateDimension(this)
                        });
                        k.dispatchEvent("onLightBoxPanelCreated");
                        k._updateInformationsPanel()
                    } else {
                        var m = k._rootView.getElement(".search-content-set-contents");
                        var n = k._rootView.container.getParent();
                        m.addClassName("informationPanel_opened");
                        k.updateDimension(m);
                        m.addEvents({
                            resize: function() {
                                k.updateDimension(this)
                            }
                        });
                        k._rightDockingElement.collapsibleFlag = false;
                        k._rightDockingElement.freeZoneContent = k._rootView.container;
                        k._rightDockingElement.inject(n);
                        k._rightDockingElement.addEventListener("expand", function() {
                            k.updateDimension(this)
                        });
                        k.dispatchEvent("onLightBoxPanelCreated");
                        k._updateInformationsPanel()
                    }
                })
            }
        },
        _updateInformationsPanel: function() {
            var k = this;
            if (k._informationPanel) {
                k._informationPanel.destroy();
                k._informationPanel = null
            }
            require(["DS/EditPropWidget/EditPropWidget", "DS/EditPropWidget/models/EditPropModel", "DS/EditPropWidget/constants/EditPropConstants", "DS/EditPropWidget/models/EditPropAttributeModel", "DS/EditPropWidget/constants/ConstantsMapping"], function(p, o, n, l, m) {
                h.getOptions({
                    model: k._lastSelectedItem,
                    EditPropConstants: n,
                    onComplete: function(r) {
                        k._informationPanel = new p(r);
                        k._rightDockingElement.dockingZoneContent = k._informationPanel.getContent().getContent();
                        var q = h.getPropModelFromSearchItem(k._lastSelectedItem, o, l, m);
                        k._informationPanel.initDatas(q)
                    },
                    onAddFacets: function(q) {
                        if (UWA.is(k._informationPanel)) {
                            k._informationPanel.addFacets(q)
                        }
                    }
                })
            })
        },
        setInfomationPanelObject: function(k) {
            var l = this;
            l._lastSelectedItem = k;
            if (l.getvisibleFlag() === false) {
                return
            }
            l._updateInformationsPanel()
        },
        switchvisibleFlag: function() {
            var k = this;
            if (k._rightDockingElement !== null) {
                if (k._rightDockingElement.visibleDockingZoneFlag === true) {
                    k._rightDockingElement.visibleDockingZoneFlag = false
                } else {
                    var l = k._rootView.getElement(".search-content-set-contents");
                    l.addClassName("informationPanel_opened");
                    k._rightDockingElement.visibleDockingZoneFlag = true;
                    k.setInfomationPanelObject(k._lastSelectedItem)
                }
            }
        },
        switchViewMode: function() {
            var k = this;
            if (k._rightDockingElement !== null) {
                k._rightDockingElement.freeZoneContent = null;
                if (f.getItem("nav_history") || f.getItem("integratedSearch")) {
                    k._rightDockingElement.freeZoneContent = k._rootView
                } else {
                    k._rightDockingElement.freeZoneContent = k._rootView.container
                }
                k._rightDockingElement._applyFreeZoneContent()
            }
        },
        getvisibleFlag: function() {
            var k = this;
            var l = false;
            if (k._rightDockingElement !== null) {
                l = k._rightDockingElement.visibleDockingZoneFlag
            }
            return l
        },
        hideAndclean: function() {
            var k = this;
            if (k._rightDockingElement !== null) {
                k._rightDockingElement.visibleDockingZoneFlag = false;
                k.setInfomationPanelObject(null)
            }
        },
        updateDimension: function(k) {
            if (k === null) {
                return
            }
            var l = k.getParent();
            if (l !== null) {
                var n = l.getChildren();
                if (n.length !== 0) {
                    var o = n[0];
                    if (o !== null) {
                        var m = o.getSize();
                        if (m.height > 45) {
                            k.setAttribute("style", "height: calc(100% - 90px)")
                        } else {
                            k.setAttribute("style", "height: calc(100% - 45px)")
                        }
                    }
                }
                if (this._informationPanel) {
                    this._informationPanel.onResize()
                }
            }
        }
    });
    return b
});
define("DS/SNResultUX/utils/SearchViewOptions", ["UWA/Core", "UWA/Class/Debug", "UWA/Class", "DS/WebappsUtils/WebappsUtils", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/SNResultUX/utils/ResultUX_customization", "DS/SNInfraUX/PredicatesNLS", "DS/UIKIT/DropdownMenu", "text!DS/SNInfraUX/assets/SearchColumnCustoAdmin.json", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(m, j, n, e, g, h, f, o, k, b, p) {
    var a = null;
    var i = null;
    var l = null;
    var d = null;
    var c = n.singleton(j, {
        tmp_idx: 0,
        _viewData: null,
        init: function(s) {
            this._adminCusto = JSON.parse(b);
            if (m.is(this._adminCusto, "object") && m.is(this._adminCusto.CustoAliasDefinitions, "array")) {
                var q = this._adminCusto.CustoAliasDefinitions;
                d = [];
                for (var r = 0; r < q.length; r++) {
                    if (m.is(q[r].aliasId, "string")) {
                        var v = q[r].viewDefinition;
                        for (var u = 0; u < v.length; u++) {
                            if (m.is(v[u].dataType) && d.indexOf(v[u].dataType) === -1) {
                                d.push(v[u].dataType)
                            }
                        }
                    }
                }
            }
            a = [{
                dataIndex: "ds6w:label",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:what/ds6w:label"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:type",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:type"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:description",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:what/ds6w:description"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:identifier",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:what/ds6w:identifier"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:modified",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:modified"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:created",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:created"),
                minWidth: 40
            }, {
                dataIndex: "ds6w:responsible",
                isSortable: true,
                text: o.getNLSValueForPredicate("ds6w:responsible"),
                minWidth: 40
            }];
            this.setDebugMode(g.options.search_settings.debug_mode);
            var t = "";
            if (m.is(s) && m.is(s.activeTenant, "string") && s.activeTenant.length > 0) {
                t = s.activeTenant
            }
            if (m.is(this._cstoreSources, "array") && this._cstoreSources.length > 0) {
                t = this._cstoreSources[0].tenantId
            }
            var w = this;
            h.isRoleAvailable(["CSV"], t, function(x) {
                if (true == x) {
                    a = [{
                        dataIndex: "ds6w:label",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:what/ds6w:label"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:type",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:type"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:description",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:what/ds6w:description"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:identifier",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:what/ds6w:identifier"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:modified",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:modified"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:created",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:created"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6wg:revision",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6wg:revision"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:status",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:status"),
                        minWidth: 40
                    }, {
                        dataIndex: "ds6w:responsible",
                        isSortable: true,
                        text: o.getNLSValueForPredicate("ds6w:responsible"),
                        minWidth: 40
                    }]
                }
                a = w.getCustoCellRequest(a)
            });
            a = this.getCustoCellRequest(a)
        },
        setContextOptions: function(q) {
            i = UWA.clone(q)
        },
        getContextOptions: function() {
            return i
        },
        getItemViewOptions: function(q) {
            var r = {
                mapping: this._getMapping(),
                resources: q
            };
            return r
        },
        getDataGridViewHeaders: function(B) {
            var z = "ds6w";
            if (!o.isLoaded(z)) {
                if (UWA.is(B, "function")) {
                    o.loadVocabulary(z, B)
                }
            }
            var v = [];
            var x = null;
            if (m.is(i)) {
                var t = i.columns;
                var y = i.columnsDisplayVals;
                if (!m.is(t) || !m.is(y)) {
                    return a
                }
                if (t.length <= 0 || (t.length === 1 && t[0] === "") || y.length <= 0 || (y.length === 1 && y[0] === "") || t.length !== y.length) {
                    return a
                }
                for (var w = 0; w < t.length; w++) {
                    var s = t[w];
                    var u = y[w];
                    v.push({
                        dataIndex: s,
                        isSortable: true,
                        minWidth: 40,
                        text: u
                    })
                }
            } else {
                if (f.getDataGridViewColumns() && !(m.is(this._adminCusto, "object") && m.is(this._adminCusto.CustoAliasDefinitions, "array"))) {
                    var t = f.getDataGridViewColumns();
                    for (var w = 0; w < t.length; w++) {
                        var s = t[w];
                        var u = o.getNLSValueForPredicate(s);
                        v.push({
                            dataIndex: h.getURIToUse(s),
                            isSortable: true,
                            minWidth: 40,
                            text: u
                        })
                    }
                } else {
                    if (m.is(this._adminCusto, "object") && m.is(this._adminCusto.CustoAliasDefinitions, "array")) {
                        var t = [];
                        var q = this._adminCusto.CustoAliasDefinitions;
                        for (var w = 0; w < q.length; w++) {
                            if (m.is(q[w].aliasId, "string") && q[w].aliasId === "The_Default_Columns") {
                                t = q[w].viewDefinition;
                                break
                            }
                        }
                        if (t.length > 0) {
                            if (d.length > 0) {
                                var C = o._asyncCallToPredicatesWS(d).then(function A(D) {
                                    for (var F = 0; F < t.length; F++) {
                                        var I = t[F];
                                        var H = o.getNLSValueForPredicate(I.uri);
                                        if (m.is(I.dataType) && (H.startsWith("ds6wg") || H.startsWith("ds6w"))) {
                                            if (m.is(D.classPredicates)) {
                                                for (var G = 0; G < D.classPredicates.length; G++) {
                                                    for (var E = 0; E < D.classPredicates[G].vocabularyPredicateInfo.length; E++) {
                                                        if (D.classPredicates[G].vocabularyPredicateInfo[E].uri === I.uri) {
                                                            H = D.classPredicates[G].vocabularyPredicateInfo[E].nlsName;
                                                            break
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        v.push({
                                            dataIndex: I.uri,
                                            isSortable: true,
                                            minWidth: 40,
                                            text: H,
                                            width: I.width
                                        })
                                    }
                                }, function r() {
                                    console.log("promisePredicate fail !")
                                })
                            } else {
                                for (var w = 0; w < t.length; w++) {
                                    var s = t[w];
                                    var u = o.getNLSValueForPredicate(s.uri);
                                    v.push({
                                        dataIndex: s.uri,
                                        isSortable: true,
                                        minWidth: 40,
                                        text: u,
                                        width: s.width
                                    })
                                }
                            }
                        } else {
                            x = a
                        }
                    } else {
                        x = a
                    }
                }
            }
            if (!m.is(x)) {
                x = this.getCustoCellRequest(v);
                if (!m.is(x) && x.length < 1) {
                    x = a
                }
            }
            if (UWA.is(B, "function")) {
                B.call(undefined, x)
            }
            return x
        },
        getDataGridViewHeadersForInApps: function(y) {
            var x = "ds6w";
            if (!o.isLoaded(x)) {
                if (UWA.is(y, "function")) {
                    o.loadVocabulary(x, y)
                }
            }
            var t = [];
            var v = null;
            if (m.is(i)) {
                var r = i.columns;
                var w = i.columnsDisplayVals;
                if (!m.is(r) || !m.is(w)) {
                    return a
                }
                if (r.length <= 0 || (r.length === 1 && r[0] === "") || w.length <= 0 || (w.length === 1 && w[0] === "") || r.length !== w.length) {
                    return a
                }
                for (var u = 0; u < r.length; u++) {
                    var q = r[u];
                    var s = w[u];
                    t.push({
                        dataIndex: q,
                        isSortable: true,
                        minWidth: 40,
                        text: s
                    })
                }
            } else {
                v = null
            }
            if (!m.is(v)) {
                v = this.getCustoCellRequest(t)
            }
            if (UWA.is(y, "function")) {
                y.call(undefined, v)
            }
            return v
        },
        getCustoCellRequest: function(q) {
            if (!m.is(q, "array")) {
                throw ("E_INVALIDARG: bad columns given to getCustoCellRequest method !")
            }
            if (q.length > 0) {
                q[0].onCellRequest = function(t) {
                    if (t.nodeModel instanceof Object) {
                        var r = t.nodeModel.options.grid.type_icon_url;
                        var s = t.nodeModel.options.grid[t.dataIndex];
                        t.cellView.getContent().innerHTML = '<img class="type-icon-datagrid" src="' + r + '" draggable="false"/>' + s
                    }
                }
            }
            return q
        },
        initColumnsTreeList: function(r, q) {
            if (!m.is(r, "object")) {
                throw ("E_INVALIDARG: bad gridOptions given to initColumnsTreeList method !")
            }
            if (!m.is(r.columns, "array")) {
                throw ("E_INVALIDARG: bad gridOptions.columns given to initColumnsTreeList method !")
            }
            if (!m.is(q, "object")) {
                throw ("E_INVALIDARG: bad options given to initColumnsTreeList method !")
            }
            r.columns.splice(0, 0, {
                text: "",
                dataIndex: "tree",
                isHidden: true
            });
            if (!h.isFUNActive("FUN075064")) {
                r.columns.splice(0, 0, {
                    text: "",
                    dataIndex: "selection",
                    type: "selection",
                    width: 24,
                    isHidden: q.selectionMode_techno === "oneToOne"
                })
            } else {
                r.columns.splice(0, 0, {
                    dataIndex: "selection_search",
                    width: 24,
                    isResizable: false,
                    isSortable: false,
                    isHidden: q.selectionMode_techno === "oneToOne",
                    setValue: function(s) {
                        s.nodeModel.selectionChangeIsFromUI();
                        if (s.value) {
                            s.manager.getNodesXSO().add(s.nodeModel)
                        } else {
                            s.manager.getNodesXSO().remove(s.nodeModel)
                        }
                        s.manager.updateRowViewWithException(s.nodeModel, s.dataIndex)
                    },
                    getValue: function(s) {
                        return s.nodeModel.isSelected()
                    },
                    onCellChange: function(s) {
                        return s.event.target.dsModel.checkFlag
                    },
                    onCellRequest: function(t) {
                        var s = t.cellView.reuseCellContent("checkbox_search");
                        if (t.isHeader) {
                            s.currentNodeModel = null;
                            s.ignoreUpdate = true;
                            s.visibleFlag = false;
                            s.visibleFlag = true;
                            s.mixedState = t.manager.getNodesXSO().get().length > 0 && !t.manager.isEveryVisibleNodeSelected();
                            s.checkFlag = t.manager.isEveryVisibleNodeSelected() || (t.manager.getNodesXSO().get().length > 0 && !t.manager.isEveryVisibleNodeSelected());
                            s.ignoreUpdate = false
                        } else {
                            s.currentNodeModel = t.nodeModel;
                            s.checkFlag = t.manager.getNodesXSO().isIn(t.nodeModel);
                            s.mixedState = false
                        }
                    }
                })
            }
            r.columns.splice(2, 0, {
                dataIndex: "actions",
                isSortable: false,
                isDraggable: false,
                text: p.get("actions.title"),
                actions: true,
                width: 60,
                onCellRequest: function(y) {
                    if (y.nodeModel instanceof Object) {
                        var s = y.nodeModel.options.actions;
                        var x = y.nodeModel.options.collection;
                        if (g.getOption("search_web_in_win") || (g.getOption("actionsProtocol_FUN065512"))) {
                            if ((!y.isHeader)) {
                                var v = '<span style="font-size:18px; color:gray;" class="fonticon fonticon-2x fonticon-down-open" data-rec-id="dropdown-icon-';
                                if (m.is(y.virtualRowID) && m.is(x.at(y.virtualRowID))) {
                                    v += x.at(y.virtualRowID).get("id")
                                }
                                v += '"></span>';
                                y.cellView.getContent().setHTML(v);
                                var t = x.at(y.virtualRowID);
                                if (UWA.is(t)) {
                                    var u = "mouseup";
                                    y.cellView.getContent().getChildren()[0].addEvent(u, function(A) {
                                        if (A) {
                                            A.cancelBubble = true
                                        }
                                        if (A && A.stopPropagation) {
                                            A.stopPropagation()
                                        }
                                        if (A && A.preventDefault) {
                                            A.preventDefault()
                                        }
                                        var z = y.parent.options.onContextualEvent;
                                        z.callback.call(z["this"], {
                                            treeview: y
                                        })
                                    })
                                }
                            }
                        } else {}
                        if (y.cellView.getContent().getChildren().length !== 0) {
                            var w = y.cellView.getContent().getChildren()[0].addClassName("column-action");
                            if (!y.manager.multiselMode) {
                                w.style.display = ""
                            } else {
                                w.style.display = "none"
                            }
                        }
                    }
                }
            });
            return r
        },
        getTableViewHeaders: function() {
            return this.getDataGridViewHeaders()
        },
        getXMLViewOptions: function() {
            var q = {
                default_mapping: function(s) {
                    var r = s;
                    if (s.indexOf("/") != -1) {
                        r = s.substring(s.lastIndexOf("/") + 1)
                    }
                    return r
                }
            };
            return q
        },
        _getMapping: function() {
            var r = this,
                q = f.getMapping();
            q.title = function() {
                var s = this.model || this;
                return s.get("ds6w:label")
            };
            q.subtitle = function() {
                var u = this.model || this;
                var t = "";
                var v = u.get("ds6w:who/ds6w:responsible");
                if (m.is(v, "string") && v.length > 0) {
                    t += v
                }
                var s = u.get("ds6w:modified");
                if (m.is(s, "string") && s.length > 0) {
                    if (t.length > 0) {
                        t += " - "
                    }
                    t += s
                }
                var w = r._retrieveSource(u);
                if (m.is(w, "string") && w.length > 0) {
                    if (t.length > 0) {
                        t += " - "
                    }
                    t += w
                }
                return t
            };
            q.content = function() {
                var t = this.model || this;
                var v = "";
                var s = t.get("ds6w:identifier"),
                    u = t.get("ds6w:description");
                if (m.is(s, "string") && s.length > 0) {
                    v += s
                }
                if (m.is(u, "string") && u.length > 0) {
                    if (v.length > 0) {
                        v += "<br/>"
                    }
                    v += u
                }
                return v
            };
            q.date = function() {
                var s = this.model || this;
                return s.get("ds6w:modified")
            };
            q.source = function() {
                var s = this.model || this;
                return r._retrieveSource(s)
            };
            q.ownerName = function() {
                var s = this.model || this;
                return s.get("owner")
            };
            q.icon_source = function() {
                var s = this.model || this,
                    t = m.is(s) ? s.get("source_icon_url") : "";
                if (!m.is(t, "string")) {
                    t = ""
                }
                return t
            };
            return q
        },
        _retrieveSource: function(q) {
            if (!m.is(q, "object")) {
                throw ("E_INVALIDARG: bad model given to _retrieveSource method !")
            }
            var r = q.get("ds6w:where/ds6w:context/ds6w:project");
            if (r === undefined || !m.is(r, "string") || r.length === 0) {
                r = q.get("ds6w:where/ds6w:context/ds6w:community");
                if (!m.is(r, "string") || r.length === 0) {
                    r = ""
                }
            }
            return r
        },
        setViewData: function(q) {
            this._viewData = q
        },
        getViewData: function() {
            return this._viewData
        }
    });
    return c
});
var widget = null;
define("DS/SNResultUX/views/PropertiesView", ["DS/SNInfraUX/SearchSettings", "DS/SNResultUX/utils/SearchViewOptions", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/SearchUtils", "DS/UIKIT/Alert", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "UWA/Core", "UWA/Widget", "UWA/Class/Debug", "DS/Handlebars/Handlebars", "UWA/Class/Collection", "DS/W3DXComponents/Views/Temp/TempItemView", "DS/W3DXComponents/Skeleton", "UWA/Utils/Client", "UWA/Controls/Scroller", "css!DS/SNResultUX/SNResultUX.css"], function(l, b, q, a, j, k, i, p, c, t, f, u, h, d, n, o, g) {
    widget = new c();
    var s = a.getLanguage();
    widget.lang = s;
    var m = "properties";
    var r = ["type_icon_url", "id", "resourceid", "resourceid_tagger", "preview_url", "image", "icon", "actions", "subtitle", "icon_source"];
    var e = h.extend(t, {
        name: m,
        tagName: "div",
        template: function() {
            var w = this;
            var v;
            if ((w.model.id.indexOf("swym:") !== 0) && (l.getOption("search_web_in_win") !== true) && (p.is(w._newEdit) && w._newEdit === true)) {
                v = '<div class="' + w.getClassNames("-sub-container") + ' propertiesDiv"><div class="properties-body"></div></div>'
            } else {
                v = '<div class="' + w.getClassNames("-sub-container") + ' propertiesDiv"><table class="table properties-body"></table></div>'
            }
            return v
        },
        setup: function() {
            this.setDebugMode(l.getDebugMode());
            this.container.addClassName(this.getClassNames("-container"));
            this.useNewEditProp(function(v) {
                console.log("Use new Property tab=" + v)
            })
        },
        _HTMLDecode: function(v) {
            if (!v) {
                return v
            }
            v = v.replace(/&amp;/g, "&");
            v = v.replace(/&gt;/g, ">");
            v = v.replace(/&lt;/g, "<");
            v = v.replace(/&quot;/g, '"');
            v = v.replace(/&#039;/g, "'");
            return v
        },
        hasPARRole: function(y) {
            var x = this;
            var v = l.getOption("PARRole");
            if (p.is(v)) {
                if (true === v) {
                    x._hasPARRole = true
                } else {
                    x._hasPARRole = false
                }
                y(x._hasPARRole);
                return
            }
            if (!p.is(x._hasPARRole)) {
                x._hasPARRole = false;
                try {
                    a.getGrantedRoles(function(A) {
                        for (var z = 0; z < A.length; z++) {
                            if (A[z] && A[z].id === "PAR") {
                                x._hasPARRole = true;
                                x._newPropertyReadOnly = false
                            }
                        }
                        y(x._hasPARRole)
                    })
                } catch (w) {
                    x._hasPARRole = false;
                    y(x._hasPARRole)
                }
            } else {
                y(x._hasPARRole)
            }
        },
        useNewEditProp: function(x) {
            var v = this;
            if (!p.is(v._newEdit)) {
                v._newEdit = false;
                var w = l.getOption("NewPropertiesTabUIMode");
                if (p.is(w)) {
                    v._newEdit = true;
                    v._newPropertyReadOnly = true;
                    if ("Edit" === w) {
                        v._newPropertyReadOnly = false
                    }
                    x(v._newEdit);
                    return
                }
                v.hasPARRole(function(y) {
                    if (true === y) {
                        v._newEdit = true
                    }
                    x(v._newEdit);
                    return
                })
            } else {
                x(v._newEdit)
            }
        },
        onRender: function() {
            this.log("onRender the PropertiesView");
            var v = this;
            v.useNewEditProp(function(F) {
                if ((v.model.id.indexOf("swym:") !== 0) && (l.getOption("search_web_in_win") !== true) && (F === true)) {
                    var N = v.container.getElement(".properties-sub-container"),
                        G = v.container.getElement(".properties-body");
                    if (l.getOption("search_web_in_win") !== true) {
                        require(["DS/PlatformAPI/PlatformAPI"], function(S) {
                            var U = {
                                paths: []
                            };
                            U.attributes = {};
                            U.version = "1.1";
                            var R = [];
                            R[0] = v.model.id;
                            U.paths[0] = R;
                            var T = "DS/PADUtils/PADCommandProxy/select";
                            S.publish(T, U)
                        })
                    }
                    if (!p.is(N)) {
                        throw ("Unable to find scrollListContainer")
                    }
                    if (p.is(G)) {
                        v._container = G;
                        require(["DS/EditPropWidget/EditPropWidget", "DS/EditPropWidget/constants/EditPropConstants", "DS/EditPropWidget/models/EditPropModel"], function(W, S, U) {
                            var R = new W({
                                typeOfDisplay: S.ONLY_EDIT_PROPERTIES,
                                selectionType: S.NO_SELECTION,
                                readOnly: v._newPropertyReadOnly,
                                extraNotif: true,
                                editMode: true,
                                events: {
                                    onNotification: function(Y) {
                                        if (Y.eventID === "error") {
                                            var X = "You are not allowed to do that modification";
                                            if (Y.msg.length > 0) {
                                                X = Y.msg
                                            }
                                            if (X.length > 0) {
                                                v._alert = new j({
                                                    className: "search-alert",
                                                    visible: true,
                                                    autoHide: false,
                                                    closable: true,
                                                    messages: X
                                                }).inject(v._container, "top")
                                            }
                                        }
                                        if (Y.eventID === "success") {
                                            var X = "You are allowed to do that modification";
                                            if (Y.msg.length > 0) {
                                                X = Y.msg
                                            }
                                            if (X.length > 0) {
                                                v._alert = new j({
                                                    className: "search-alert",
                                                    visible: true,
                                                    autoHide: false,
                                                    closable: true,
                                                    messages: X
                                                }).inject(v._container, "top")
                                            }
                                        }
                                    }
                                }
                            });
                            R.inject(v._container);
                            v._container.addEvents({
                                resize: function() {
                                    R.onResize()
                                }
                            });
                            var V = [];
                            var T = new U({
                                metatype: "businessobject",
                                objectId: v.model.id
                            });
                            V.push(T);
                            R.initDatas(V)
                        })
                    } else {
                        throw new Error("Cannot find element editproperties-tbody in the DOM")
                    }
                } else {
                    console.log("swym data");
                    var N = v.container.getElement(".properties-sub-container"),
                        G = v.container.getElement(".properties-body"),
                        L = p.createElement,
                        E = L("thead", {
                            html: {
                                tag: "tr",
                                html: [{
                                    tag: "th",
                                    text: i.get("skeleton.facets.properties.propertyKey")
                                }, {
                                    tag: "th",
                                    text: i.get("skeleton.facets.properties.valueKey")
                                }]
                            }
                        }).inject(G),
                        K = L("tbody").inject(G);
                    if (!p.is(N)) {
                        throw ("Unable to find scrollListContainer")
                    }
                    N.addClassName("properties-sub-container-std");
                    if (p.is(G)) {
                        var D = v.model.pairs();
                        D.sort(function(S, R) {
                            if (S[0] > R[0]) {
                                return 1
                            } else {
                                if (S[0] < R[0]) {
                                    return -1
                                }
                            }
                            return 0
                        });
                        var x = [],
                            B = [],
                            P = [],
                            J = false;
                        for (var I = 0; I < D.length; I++) {
                            var Q = D[I][0];
                            var M = D[I][1];
                            if (M) {
                                var C = Q.match(/\/([^/]*)$/);
                                if (C === null) {
                                    C = Q
                                } else {
                                    C = C[1]
                                }
                                if (r.indexOf(Q) === -1 && Q.indexOf("_value") === -1 && (Q.indexOf("ds6w:") !== -1 || Q.indexOf("ds6wg:") !== -1) && x.indexOf(C) === -1) {
                                    x.push(C);
                                    B.push(M);
                                    var O = q.getVocabId(C);
                                    if (p.is(O)) {
                                        if (O.indexOf("ds6wg") !== -1) {
                                            J = true
                                        } else {
                                            if (P.indexOf(O) === -1) {
                                                if (!q.isLoaded(O)) {
                                                    P.push(O)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        var w = function() {
                            for (var T = 0; T < x.length; T++) {
                                var S = q.getNLSValueForPredicate(x[T]);
                                if (!p.is(S) || S === "") {
                                    S = x[T]
                                }
                                var R = L("tr", {
                                    html: {
                                        tag: "td",
                                        text: S
                                    }
                                }).inject(K);
                                var V = "";
                                var W = B[T];
                                var U = "";
                                if (W instanceof Array) {
                                    if (W.length > 0) {
                                        for (var X = 0; X < W.length; X++) {
                                            U += v._HTMLDecode(W[X]) + (X === W.length - 1 ? "" : " | ")
                                        }
                                        V = L("td", {
                                            title: U,
                                            text: U
                                        }).inject(R)
                                    }
                                } else {
                                    if (W.length > 0) {
                                        V = L("td", {
                                            title: v._HTMLDecode(W),
                                            text: v._HTMLDecode(W)
                                        }).inject(R)
                                    }
                                }
                            }
                        };
                        if (J || P.length > 0) {
                            var y = function() {
                                if (P.length > 0) {
                                    var S = 0;
                                    for (var R = 0; R < P.length; R++) {
                                        q.loadVocabulary(P[R], function(T) {
                                            ++S;
                                            if (S === P.length) {
                                                w.call()
                                            }
                                        })
                                    }
                                } else {
                                    w.call()
                                }
                            };
                            if (J) {
                                var H = v.model.get("ds6w:what/ds6w:type_value");
                                if (!p.is(H)) {
                                    H = v.model.get("ds6w:type_value")
                                }
                                q._asyncCallToPredicatesWS(["ds6wg:" + H]).then(function A(R) {
                                    y.call()
                                }, function z() {
                                    y.call()
                                })
                            } else {
                                y.call()
                            }
                        } else {
                            w.call()
                        }
                        new o(N, {
                            bounce: true,
                            momentum: true,
                            scrollableX: false,
                            scrollbarH: false,
                            scrollDrag: !(((n.Platform.windows || n.Platform.win32 || n.Platform.win64) && n.Engine.chrome && !n.Features.touchEvents) || (n.Engine.ie && n.Platform.tablet)),
                            useNative: n.Engine.ie && n.Platform.tablet,
                            useTransform: (n.Platform.macintel || n.Platform.mac || n.Engine.ie) ? false : o.prototype.defaultOptions.useTransform,
                            scrollbar: {
                                autoHide: false,
                                opacity: 1,
                                padding: 5,
                                bgColor: "transparent",
                                barColor: "#E2E4E3"
                            },
                        })
                    } else {
                        throw new Error("Cannot find element properties-tbody in the DOM")
                    }
                }
            })
        },
        _getValueWithMapping: function(x, w, v) {
            var y;
            if (x in v && p.is(v[x], "function")) {
                var z = {
                    model: w
                };
                y = v[x].call(z)
            } else {
                y = w.get(x);
                if (y === undefined) {
                    y = ""
                }
            }
            return y
        }
    });
    e.facet_name = m;
    e.is_facet_avalailable = function(v) {
        return true
    };
    e.facet_idcard = function() {
        return {
            text: i.get("skeleton.facets.properties"),
            icon: "doc-text",
            handler: d.getRendererHandler(m)
        }
    };
    e.facet_options = function() {
        return {
            view: e,
            collection: u,
            fetchMode: "never"
        }
    };
    return e
});
define("DS/SNResultUX/views/Play3DView", ["DS/SNInfraUX/SearchSettings", "DS/SNResultUX/utils/SearchViewOptions", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "UWA/Class/Debug", "DS/Handlebars/Handlebars", "UWA/Class/Collection", "UWA/Promise", "UWA/Core", "DS/W3DXComponents/Views/Temp/TempItemView", "DS/W3DXComponents/Skeleton", "DS/SNInfraUX/SearchUtils"], function(f, c, m, h, b, e, j, k, d, a, g) {
    var l = "play3d";
    var i = d.extend(h, {
        name: l,
        tagName: "div",
        player3D: null,
        template: function() {
            var n = '<div class="' + this.getClassNames("-sub-container") + '">';
            return n
        },
        init: function(n) {
            var o = this;
            ["container", "template", "tagName", "domEvents"].forEach(function(p) {
                delete n[p]
            });
            this._parent.call(this, n)
        },
        setup: function() {
            this.setDebugMode(f.getDebugMode());
            this.container.addClassName(this.getClassNames("-container"))
        },
        onRender: function() {
            this.log("onRender 3DPlay");
            this._initPlayer()
        },
        onDestroy: function() {
            if (k.is(this.player3D)) {
                this.player3D.dispose()
            }
            this.container.empty();
            return this._parent.apply(this, arguments)
        },
        _initPlayer: function() {
            var n = this.model;
            var p = {
                container: this.container,
                input: {
                    asset: {
                        provider: "EV6",
                        serverurl: n.getFederatedSource().get3DSpaceUrl(),
                        physicalid: n.id,
                        dtype: n.get("ds6w:what/ds6w:type_value"),
                        requiredAuth: "passport",
                        requestsOptions: {
                            authentication: "passport"
                        }
                    },
                    usage: "preview"
                },
                options: {
                    loading: "autoplay"
                },
                lang: g.getLanguage()
            };
            var o = this;
            require(["DS/3DPlayHelper/3DPlayHelper"], function(s) {
                var q = n.getServiceID();
                var r = n.getPlatformID();
                if (UWA.is(q, "string") && UWA.is(r, "string")) {
                    p.input.asset.tenant = r;
                    if (f.getOption("search_web_in_win")) {
                        o.player3D = new s(p)
                    } else {
                        require(["DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices"], function(t) {
                            t.getServiceUrl({
                                serviceName: q,
                                platformId: r,
                                onComplete: function(u) {
                                    if (UWA.is(u, "string")) {
                                        p.input.asset.serverurl = u;
                                        o.player3D = new s(p)
                                    }
                                }
                            })
                        })
                    }
                }
            })
        }
    });
    i.facet_name = l;
    i.is_facet_avalailable = function(p) {
        if (!k.is(p)) {
            return false
        }
        if (k.is(p.collection) && k.is(p.collection.service_parameters) && (k.is(p.collection.service_parameters.query) && g.SearchTypeEnum.MY_RECENT_CONTENT === p.collection.service_parameters.query)) {
            console.warn("Play3D disabled as object is not indexed !");
            return false
        }
        var q = false;
        if (!k.is(p.get, "function")) {
            return false
        }
        var n = p.get("ds6w:what/ds6w:type_value");
        if (!k.is(n)) {
            n = p.get("ds6w:type_value")
        }
        if (!k.is(n)) {
            return q
        }
        var o = p.get("play3d");
        if (k.is(o)) {
            return o
        } else {
            if (p.play_status_computaion === "underway") {
                return q
            }
        }
        console.log("starting the 3dplay tab availability computation for this object");
        p.play_status_computaion = "underway";
        require(["DS/3DPlay/ExperiencesList"], function(s) {
            console.log("DS/3DPlay/ExperiencesList LOADED");
            if (k.is(s.dtypes[n])) {
                p.set("play3d", true);
                p.play_status_computaion = "ended"
            } else {
                var u = p.getServiceID();
                var v = p.getPlatformID();
                if (UWA.is(u, "string") && UWA.is(v, "string")) {
                    var t = {
                        provider: "EV6",
                        physicalid: p.id,
                        dtype: p.get("ds6w:what/ds6w:type_value"),
                        requiredAuth: "passport",
                        requestsOptions: {
                            authentication: "passport"
                        }
                    };
                    var r = function() {
                        var y = new j(function(A, z) {
                            s.getExperienceFromPLMType(t, function(B) {
                                if (k.is(B)) {
                                    A()
                                } else {
                                    z()
                                }
                            })
                        }).then(function x() {
                            p.set("play3d", true);
                            p.play_status_computaion = "ended"
                        }, function w() {
                            p.set("play3d", false);
                            p.play_status_computaion = "ended"
                        })
                    };
                    if (f.getOption("search_web_in_win")) {
                        if (k.is(p.getFederatedSource) && k.is(p.getFederatedSource().get3DSpaceUrl())) {
                            t.serverurl = p.getFederatedSource().get3DSpaceUrl();
                            t.tenant = v;
                            r()
                        }
                    } else {
                        require(["DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices"], function(w) {
                            w.getServiceUrl({
                                serviceName: u,
                                platformId: v,
                                onComplete: function(x) {
                                    if (UWA.is(x, "string")) {
                                        t.tenant = v;
                                        t.serverurl = x;
                                        r()
                                    }
                                }
                            })
                        })
                    }
                }
            }
        });
        return q
    };
    i.facet_idcard = function() {
        return {
            text: m.get("skeleton.facets.play3d"),
            icon: "eye",
            handler: a.getRendererHandler(l)
        }
    };
    i.facet_options = function() {
        return {
            view: i,
            collection: e,
            fetchMode: "never"
        }
    };
    return i
});
define("DS/SNResultUX/views/SearchGridView", ["UWA/Core", "UWA/Class/Options", "UWA/Class/Listener", "UWA/Class/View", "DS/MessageBus/MessageBus", "UWA/Class/Debug", "DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchSettings", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/views/EmptyView", "DS/WebappsUtils/Performance", "DS/W3DXComponents/Views/Plugins/Multisel", "DS/SNInfraUX/SearchUtils", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(m, e, i, d, c, j, l, f, n, b, a, h, g, o) {
    var k = d.extend(e, j, h, {
        tagName: "div",
        className: "GridView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "GridView"
        },
        nestedView: null,
        _model: null,
        _viewRoot: null,
        _emptyView: null,
        _canMultiSelect: true,
        _columnsMaxNumber: 0,
        _rowMaxNumber: 0,
        _checkingMoreDate: false,
        _inAppsOptions: null,
        init: function(p) {
            this.setDebugMode(f.getDebugMode());
            var q = this;
            this.nestedView = this;
            this.collection = p.collection;
            this.initModel();
            q._canMultiSelect = p.selectionMode_techno !== "oneToOne";
            q._neverAction = p.neverAction;
            this._parent(p);
            this._searchcom_socket = l.createSocket({
                socket_id: "search_grid_view_" + a.now(),
                widgetId: this.getOption("widgetId")
            });
            this._searchcom_socket.addListener("toggleMultiSelMode", this.toggleMultiSelMode.bind(this))
        },
        initModel: function(p) {
            var q = this;
            this._model = p || this.collection.getTreeDocument();
            this._model.getXSO().onAdd(function(r) {
                q.onItemSelected(r)
            });
            this._model.getXSO().onRemove(function(r) {
                q.onItemUnselected(r)
            });
            if (this.view && this.view._name === "GRIDENGINE") {
                this.view.loadGridViewModel && this.view.loadGridViewModel(this._model)
            } else {
                if (this.view) {
                    this.view.model = this._model
                }
            }
            this.view && this.view.getManager && this.view.getManager().loadDocument(this._model);
            if (this.view && this.view.getManager) {
                g.isFUNActive("FUN075064") && this.initMultiCheckbox()
            }
        },
        onSearch: function(p) {
            var q = this;
            q._viewRoot = (q.collection._snSkeleton && q.collection._snSkeleton._skeleton.getViewAt(0)) ? q.collection._snSkeleton._skeleton.getViewAt(0) : {
                currentViewId: ""
            }
        },
        onSwitch: function(p) {
            this.checkToLoadMoreData()
        },
        onItemDblClick: function(q) {
            var r = q.nodeModel ? q.nodeModel._options.id : q._options.id;
            var p = this.collection.getSNSkeleton();
            if (UWA.is(p)) {
                p.onItemDblClick(r)
            }
        },
        onItemSelected: function(p) {
            var q = p._options.id;
            if (UWA.is(this.collection.getSNSkeleton())) {
                this._searchcom_socket.dispatchEvent("onItemSelected", q, this.collection.getSNSkeleton().getSocketID())
            }
        },
        onItemUnselected: function(p) {
            var q = p._options.id;
            if (UWA.is(this.collection.getSNSkeleton())) {
                this._searchcom_socket.dispatchEvent("onItemSelected", q, this.collection.getSNSkeleton().getSocketID())
            }
        },
        onInfiniteScrollAsync: function(p, q) {
            if (!p.reachRight) {
                if (this.collection.length < this.collection.totalCount) {
                    this.collection._snSkeleton.loadMoreData(q, q)
                } else {
                    q && q()
                }
            } else {
                q && q()
            }
        },
        onResizeOrFirstLoaded: function(p, q) {
            if (p) {
                this._columnsMaxNumber = p.ColumnsMaxNumber;
                this._rowMaxNumber = p.RowMaxNumber;
                this.checkToLoadMoreData(q)
            } else {
                q && q()
            }
        },
        checkToLoadMoreData: function(y) {
            if (this.isCurrentView() && !this._checkingMoreDate) {
                var t = this;
                var u = this.getMinNumberModel();
                var s = this.collection.length;
                var p = this.collection.state.pageSize;
                var v = this.collection.state.totalRecords;
                var w = v - s;
                var q = Math.min(w, u - s);
                var r = Math.ceil(q / p);
                if (w >= 1) {
                    t._checkingMoreDate = true;
                    var x = function() {
                        r--;
                        if (r >= 0) {
                            setTimeout(function() {
                                t.collection._snSkeleton.loadMoreData(x, function() {
                                    console.warn("Faileur load more Data!!")
                                })
                            }, 0)
                        } else {
                            t._checkingMoreDate = false;
                            y && y()
                        }
                    };
                    x()
                } else {
                    y && y()
                }
            } else {
                y && y()
            }
        },
        destroy: function() {
            this.stopListening(this.collection);
            this._model = null;
            this._searchcom_socket.removeListener("toggleMultiSelMode");
            this._searchcom_socket.disconnect();
            l.deleteSocket(this._searchcom_socket.id);
            this._searchcom_socket = null;
            this._parent()
        },
        setShadings: function(q) {
            var r = this;
            if (this.collection && this.collection.length && this.view) {
                var p = 0;
                this.collection.forEach(function(t, s) {
                    if (!q) {
                        r._model.getNthRoot(s).options.color = ""
                    } else {
                        for (var u = 0; u < q.length; u++) {
                            if (q[u].criteria(t)) {
                                r._model.getNthRoot(s).options.color = q[u].color
                            }
                        }
                    }
                    p++
                });
                r.updateView()
            }
        },
        updateView: function() {
            if (this.view) {
                this.view.updateView && this.view.updateView();
                this.view.invalidateLayout && this.view.invalidateLayout({
                    updateCellContent: true
                })
            }
        },
        isCurrentView: function() {
            if (this._viewRoot && this._viewRoot.contentsViews) {
                return this._viewRoot.contentsViews[this._viewRoot.currentViewId] === this
            } else {
                this._viewRoot = (this.collection._snSkeleton && this.collection._snSkeleton._skeleton.getViewAt(0)) ? this.collection._snSkeleton._skeleton.getViewAt(0) : {
                    currentViewId: ""
                };
                return true
            }
        },
        isMultiSelMode: function() {
            if (this.view._modeIsMultiSel !== undefined) {
                return this.view.isInMultiSelection ? this.view.isInMultiSelection() : this.view._interactiveCumulativeSelection
            }
            if (this.view.getManager) {
                return this.view.getManager().isInMultiSelection()
            }
        },
        toggleMultiSelMode: function(p) {
            var q = (p !== undefined && p !== null) ? p : !this.isMultiSelMode();
            this._model.search_multiselMode = q;
            if (this.view && this.view._modeIsMultiSel !== undefined) {
                if (this.view.activateInteractiveCumulativeSelection) {
                    q && this.view.activateInteractiveCumulativeSelection();
                    !q && this.view.deactivateInteractiveCumulativeSelection()
                } else {
                    this.view._modeIsMultiSel = q
                }
            }
            if (this.view && this.view.getManager) {
                this.view.getManager().forceMultiSelection(q)
            }
            if (this.isCurrentView()) {
                if (!q) {
                    this._model.getXSO().empty()
                }
                var r = this._model.getXSO().get();
                if (UWA.is(this.collection.getSNSkeleton())) {
                    c.publish({
                        channel: this.collection.getSNSkeleton().getOption("messagingChannel"),
                        topic: "updateSelectionNumber",
                        data: {
                            number: r.length,
                            isMultiSelMode: q
                        }
                    })
                }
            }
        },
        unSelectAll: function() {},
        _selectAll: function(p) {},
        getOptionCommon: function() {
            var q = this;
            var p = this._canMultiSelect;
            return {
                model: this._model,
                selection: {
                    canMultiSelect: p,
                    enableListSelection: p
                },
                enableActiveUI: true,
                enableKeyboardNavigation: true,
                infiniteScrolling: true,
                useSwipableMenu: false,
                onContextualEvent: {
                    "this": q,
                    callback: function(s, v) {
                        if (q.options.neverAction === true) {
                            return
                        }
                        if (s) {
                            var A = s.cellInfos || s.treeview
                        }
                        if (UWA.is(q._inAppsOptions)) {
                            var r = q._inAppsOptions.UXOptions && !q._inAppsOptions.UXOptions.localActions;
                            if (r) {
                                return
                            }
                        }
                        if (s && A && A.cellView) {
                            if (q.collection._snSkeleton && A.cellView) {
                                q.collection._snSkeleton._ctxMenuTarget = A.cellView.getContent()
                            }
                            var t = [];
                            var x = q;
                            if (q.collection._snSkeleton) {
                                var w = q.collection._snSkeleton.ctxMenu;
                                if (w && w.isVisible) {
                                    if (f.getOption("search_web_in_win")) {
                                        q.collection._snSkeleton.ctxMenu.destroy()
                                    } else {
                                        q.collection._snSkeleton.ctxMenu.hide()
                                    }
                                    q.collection._snSkeleton.ctxMenu = null
                                }
                            }
                            var B = {};
                            var z = ("event" in window) ? event : window.event;
                            if (!z) {
                                if (s && s.data && s.data.windowPosition && s.data.windowPosition.x && s.data.windowPosition.y) {
                                    var u = s.data.windowPosition;
                                    B.altPosition = {
                                        x: u.x,
                                        y: u.y
                                    }
                                } else {
                                    if (s && s.data && s.data.target) {
                                        B.target = s.data.target
                                    } else {
                                        B.target = A.cellView.elements.container
                                    }
                                }
                            } else {
                                if (z.clientX) {
                                    B.altPosition = {
                                        x: z.clientX,
                                        y: z.clientY
                                    }
                                } else {
                                    B.target = z.target
                                }
                            }
                            B.events = {
                                onHide: function() {
                                    this.destroy()
                                },
                                onClickOutside: function() {
                                    this.destroy()
                                }
                            };
                            var y = A.nodeModel || A.cellModel;
                            q.launchContextMenu(y, B);
                            return t
                        }
                    }
                },
                shouldAcceptDrag: function(s) {
                    if (UWA.is(q._inAppsOptions)) {
                        var r = q._inAppsOptions.UXOptions && !q._inAppsOptions.UXOptions.dnD;
                        return !r
                    }
                    return true
                },
                onDragStartCell: function(w, t) {
                    if (!m.is(t) || true === t.isHeader) {
                        w.preventDefault();
                        w.stopPropagation();
                        return
                    }
                    if (UWA.is(q._inAppsOptions)) {
                        var u = q._inAppsOptions.UXOptions && !q._inAppsOptions.UXOptions.dnD;
                        if (u) {
                            w.preventDefault();
                            w.stopPropagation();
                            return
                        }
                    }
                    var r = [];
                    var v = q._model.getXSO().get();
                    if (UWA.is(v, "array")) {
                        v.forEach(function(y) {
                            var x = q._model.getRoots().indexOf(y);
                            if (x >= 0) {
                                var z = q.collection.get(y._options.id);
                                if (z) {
                                    r.push(z)
                                }
                            }
                        })
                    }
                    n.setDragData(w, {
                        widgetId: q.getOption("widgetId"),
                        draggedModels: r
                    });
                    var s = UWA.is(f.getOption("search_web_in_win")) ? f.getOption("search_web_in_win") : false;
                    if (!s) {
                        q._searchcom_socket.dispatchEvent("onDragStart")
                    }
                },
                onDragEndCellDefault: function(u, s) {
                    if (f.getOption("dnd_FD03")) {
                        console.log("dragend", u);
                        var r = UWA.is(f.getOption("search_web_in_win")) ? f.getOption("search_web_in_win") : false;
                        if (!r) {
                            q._searchcom_socket.dispatchEvent("onReshow")
                        }
                    }
                    var t = m.extendElement(u.view.document.body).getElement(".app-content>.module>.front");
                    if (t) {
                        t.removeClassName("search-hide");
                        t.addClassName("search-show")
                    }
                },
                height: "auto"
            }
        },
        _afterRender: function() {
            var r = this;
            this.view.onPostCellRequest && this.view.onPostCellRequest(this._onPostCellRequest.bind(this));
            this._inAppsOptions = this.collection.getSNSkeleton() && this.collection.getSNSkeleton().getOption("in_apps_search");
            if (UWA.is(this._inAppsOptions)) {
                var q = this._inAppsOptions.UXOptions && !this._inAppsOptions.UXOptions.dnD;
                var p = this._inAppsOptions.UXOptions && !this._inAppsOptions.UXOptions.localActions;
                this.view.onPostCellRequest && this.view.onPostCellRequest(function(t) {
                    if (p) {
                        var s = t.cellView.elements.container.querySelector(".wux-ui-3ds-open-down");
                        if (s) {
                            s.style.display = "none"
                        }
                    }
                    r._onPostCellRequest(t);
                    if (q) {
                        t.cellView.elements.container.setAttribute("draggable", "false")
                    }
                });
                if (p) {
                    this.view.displayedOptionalCellProperties = [""];
                    if (this.view.getManager) {
                        this.view.options.columns[2].isHidden = true
                    }
                }
            }
            this.checkToDisplayEmptyView()
        },
        _onPostCellRequest: function(p) {},
        checkToDisplayEmptyView: function() {
            var p = false;
            if (this.collection && this.collection._ctx_options && this.collection._ctx_options.advanced_search && this.collection._ctx_options.advanced_search.searchOnInit) {
                p = true
            }
            if (!p && (this.collection && this.collection.service_parameters && this.collection.service_parameters.adv_search && !this.collection.service_parameters.advanced_criteria)) {
                this.showEmptyView()
            } else {
                if (this.collection.totalCount <= 0) {
                    this.showEmptyView()
                } else {
                    if (m.is(this._emptyView)) {
                        this.hideEmptyView()
                    }
                }
            }
        },
        hideEmptyView: function() {
            this._emptyView && this._emptyView.hide();
            var p = null;
            if (m.is(this.collection) && m.is(this.collection._snSkeleton)) {
                if (m.is(this.collection._snSkeleton.options) && m.is(this.collection._snSkeleton.options.observable) && m.is(this.collection._snSkeleton.options.observable.getSearchContentSetHeader, "function")) {
                    p = this.collection._snSkeleton.options.observable.getSearchContentSetHeader()
                }
                if (!m.is(p) && m.is(this.collection._snSkeleton._skeleton) && m.is(this.collection._snSkeleton._skeleton.container) && m.is(this.collection._snSkeleton._skeleton.container.getElement, "function")) {
                    p = this.collection._snSkeleton._skeleton.container.getElement(".search-content-set-header")
                }
            }
            if (m.is(p)) {
                p.show()
            }
        },
        showEmptyView: function() {
            if (!m.is(this._emptyView)) {
                var t = this.getOption("itemViewOptions");
                this._emptyView = new b(t)
            }
            var q = this.container;
            var p = this._emptyView.render();
            if (m.is(p) && m.is(q)) {
                p.inject(q);
                this._emptyView.show();
                if (m.is(p.container) && m.is(p.container.getText, "function")) {
                    var s = p.container.getText();
                    if (m.is(s) && 0 === s.indexOf(o.get("no_result"))) {
                        var r = null;
                        if (m.is(this.collection) && m.is(this.collection._snSkeleton) && m.is(this.collection._snSkeleton._skeleton) && m.is(this.collection._snSkeleton._skeleton.container) && m.is(this.collection._snSkeleton._skeleton.container.getElement, "function")) {
                            r = this.collection._snSkeleton._skeleton.container.getElement(".search-content-set-header")
                        }
                        if (m.is(r)) {
                            r.show()
                        }
                    }
                }
            }
        },
        launchContextMenu: function(x, A) {
            var w = this;
            var s = w._model.getXSO().get();
            if (f.getOption("search_web_in_win")) {
                var p = {};
                if (s.indexOf(x) === -1) {
                    w.log('there might be an existing selection, but the "context" object is not there in it, clear the selection and use only the "context" object');
                    w.collection._snSkeleton.resetMultisel();
                    if (m.is(x) && m.is(x._options) && m.is(x._options.id)) {
                        var y = x._options.id;
                        p.objets_name = [{
                            id: y,
                            session_object: w.collection.get(y).hasOwnProperty("session_object")
                        }];
                        w._model.getRoots()[x._localID] && w._model.getRoots()[x._localID].select()
                    } else {
                        p.objets_name = [{
                            id: "V_LocationWithoutSelectedObject",
                            session_object: false
                        }]
                    }
                } else {
                    w.log('there is a selection, and "context" object is one of them, use all the selected objects');
                    if (w.collection.custoAction && w.collection.custoAction.popover) {
                        w.collection.custoAction.popover.hide()
                    }
                    var z = [];
                    for (var u = 0; u < s.length; u++) {
                        var q = s[u]._options.id;
                        z.push({
                            id: q,
                            session_object: w.collection.get(q).hasOwnProperty("session_object")
                        })
                    }
                    p.objets_name = z
                }
                p.tabID = this.collection.getSNSkeleton().getOption("observable").getTabID(), w._searchcom_socket.dispatchEvent("onDispatchToWin", {
                    notif_name: "onActionClickDotted",
                    notif_parameters: JSON.stringify(p)
                }, "search_web_in_win")
            } else {
                if (s.indexOf(x) === -1) {
                    for (var u = 0; u < s.length; u++) {
                        var v = w._model.getRoots().indexOf(s[u]);
                        w._model.getNthRoot(v).unselect()
                    }
                    var q = w._model.getRoots().indexOf(x);
                    (q !== -1) && w._model.getRoots()[q].select()
                }
                if (f.getOption("actionsProtocol_FUN065512")) {
                    s = w._model.getXSO().get();
                    var r = [];
                    for (var u = 0; u < s.length; u++) {
                        r.push(w.collection.get(s[u]._options.id))
                    }
                    var t = w.collection.getSNSkeleton();
                    if (UWA.is(t) && UWA.is(r, "array") && r.length >= 0) {
                        t.computeCtxActions2(r, A)
                    }
                }
            }
        },
        setup: function(p) {
            var q = this;
            this.listenTo(this.collection, {
                onAdd: function() {},
                onRemove: function() {},
                onSort: function() {},
                onAnyEvent: function() {},
                onReset: function() {
                    q.checkToDisplayEmptyView();
                    q.initModel();
                    q.toggleMultiSelMode(false)
                },
                onSync: function() {
                    q.checkToDisplayEmptyView();
                    q._viewRoot = (q.collection._snSkeleton && q.collection._snSkeleton._skeleton.getViewAt(0)) ? q.collection._snSkeleton._skeleton.getViewAt(0) : {
                        currentViewId: ""
                    };
                    q.checkToLoadMoreData()
                },
                onInitTreeDocument: function(r) {
                    this.initModel(r)
                },
                onError: function() {
                    console.log("onError event recieved");
                    q.checkToDisplayEmptyView()
                }
            });
            q.checkToDisplayEmptyView()
        },
        render: function() {
            this.log("GridView render");
            var p = this;
            p._viewRoot = (p.collection._snSkeleton && p.collection._snSkeleton._skeleton.getViewAt(0)) || {
                currentViewId: ""
            };
            this.collection && this.collection._snSkeleton && this.collection._snSkeleton._modeIsMultiSel && this.toggleMultiSelMode(true);
            return this
        }
    });
    return k
});
define("DS/SNResultUX/utils/SearchCustoServices", ["UWA/Core", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Events", "require", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/PredefinedQueries", "DS/SNResultUX/utils/SearchViewOptions", "text!DS/SNInfraUX/assets/SearchColumnCustoAdmin.json", "text!DS/SNInfraUX/assets/SearchColumnCustoDS.json", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(m, n, l, f, k, g, i, h, o, d, e, a, c, p) {
    var b = function(r, q) {
        var s = 0;
        if (r.label > q.label) {
            s = 1
        } else {
            if (r.label < q.label) {
                s = -1
            }
        }
        return s
    };
    var j = n.singleton(f, l, {
        name: "DS_SNResultUX_utils_SearchCustoServices",
        _adminCusto: null,
        _dsCusto: null,
        init: function() {
            this.setDebugMode(g.getDebugMode());
            try {
                this._dsCusto = JSON.parse(c);
                this._addMissingPredicates(this._dsCusto);
                this._adminCusto = JSON.parse(a);
                this._addMissingPredicates(this._adminCusto)
            } catch (q) {
                console.error("Error parsing SearchColumnCustoAdmin.json:", q)
            }
        },
        _addMissingPredicates: function(r) {
            if (m.is(r.SearchColumnCustoDSDefinition, "array")) {
                for (var q = 0; q < r.SearchColumnCustoDSDefinition.length; q++) {
                    var s = r.SearchColumnCustoDSDefinition[q].viewDefinition;
                    this.addMandatoryPredicates(s)
                }
            }
        },
        addMandatoryPredicates: function(r) {
            if (!m.is(r, "array") || 0 >= r.length) {
                return
            }
            var u = ["ds6w:identifier", "ds6w:type"];
            for (var t = u.length - 1; t >= 0; t--) {
                for (var q = 0, s = r.length; q < s; q++) {
                    if (r[q].uri.endsWith(u[t])) {
                        u.splice(t, 1);
                        break
                    }
                }
            }
            for (var t = u.length - 1; t >= 0; t--) {
                r.push({
                    uri: u[t],
                    width: "auto"
                })
            }
        },
        getAvailableColumnCustomization: function(q) {
            if (!m.is(q, "object") || !m.is(q.isPQ)) {
                throw ("E_INVALIDARG: bad iContext given to getAvailableColumnCustomization method !")
            }
            var E = [];
            var K = i.getItem("DataGridColumnCusto");
            if (m.is(K, "object") && m.is(K.views, "array")) {
                var u = K.views;
                for (var z = 0, D = u.length; z < D; z++) {
                    var J = {
                        label: u[z].viewId,
                        value: u[z].viewId
                    };
                    if (0 === u[z].viewId.indexOf("###")) {
                        var r = u[z].viewId.substring(3, u[z].viewId.length);
                        var L;
                        if (m.is(r, "string") && r.length > 0) {
                            var L = r;
                            var t = d.getPQObjFromPQPrefix(r);
                            var H = d.getPQNLS();
                            if (m.is(H, "object") && m.is(t, "object") && m.is(t.pqid, "string") && t.pqid.length > 0 && m.is(H[t.pqid + ".Title"], "string") && H[t.pqid + ".Title"].length > 0) {
                                L = H[t.pqid + ".Title"]
                            }
                        }
                        J.label = p.replace(p.get("custo_PQ"), {
                            PQ: L
                        })
                    }
                    E.push(J)
                }
                E.sort(b)
            }
            var G = [];
            if (m.is(this._adminCusto, "object") && m.is(this._adminCusto.SearchColumnCustoAdminDefinition, "array")) {
                var M = this._adminCusto.SearchColumnCustoAdminDefinition;
                for (var z = 0; z < M.length; z++) {
                    if (m.is(M[z].viewId, "string") && M[z].viewId !== "The_Default_Columns") {
                        var J = {
                            label: M[z].viewId,
                            value: M[z].viewId + "-ADMIN"
                        };
                        if (0 === M[z].viewId.indexOf("###")) {
                            if (m.is(M[z].viewDefinition, "array")) {
                                var r = M[z].viewId.substring(3, M[z].viewId.length);
                                J.label = p.replace(p.get("custo_PQ"), {
                                    PQ: r
                                })
                            } else {
                                if (m.is(M[z].custoAliasToUse, "string")) {
                                    var s = M[z].viewId.substring(3, M[z].viewId.length);
                                    J.label = p.replace(p.get("custo_type"), {
                                        type: s
                                    })
                                }
                            }
                        }
                        G.push(J)
                    }
                }
                G.sort(b)
            }
            if (E.length > 0 && G.length > 0) {
                var v = p.get("SearchColumnCustoUserGroup"),
                    B = p.get("SearchColumnCustoAdminGroup");
                for (var F = 0, w = E.length; F < w; F++) {
                    E[F].group = v
                }
                for (var F = 0, w = G.length; F < w; F++) {
                    G[F].group = B
                }
            }
            var x = E.concat(G);
            var y = false,
                A = false;
            var I = null;
            if (m.is(q.forcedCusto, "string") && q.forcedCusto.length > 0) {
                I = q.forcedCusto
            }
            if (true === q.isPQ) {
                if (m.is(q.typeName) && m.is(q.typeName.pqName, "string") && q.typeName.pqName.length > 0) {
                    var C = "###" + q.typeName.pqName;
                    if (!m.is(I)) {
                        I = C
                    }
                    if (m.is(this._dsCusto, "object") && m.is(this._dsCusto.SearchColumnCustoDSDefinition, "array")) {
                        var M = this._dsCusto.SearchColumnCustoDSDefinition;
                        for (var z = 0; z < M.length && !A; z++) {
                            if (m.is(M[z].viewId, "string")) {
                                if (M[z].viewId === C && (I === C)) {
                                    A = true;
                                    I = C
                                }
                            }
                        }
                    }
                    for (var z = 0, D = x.length; z < D && !y; z++) {
                        if ((C === x[z].value || C + "-ADMIN" === x[z].value) && (I === C)) {
                            x[z].selected = true;
                            y = true;
                            I = C
                        }
                    }
                }
            }
            if (!y && !A && m.is(K, "object") && m.is(K.activeView, "string")) {
                if (!m.is(q.forcedCusto, "string") || q.forcedCusto.length <= 0) {
                    I = K.activeView
                }
                for (var z = 0, D = x.length; z < D && !y; z++) {
                    if (I === x[z].value) {
                        x[z].selected = true;
                        y = true
                    }
                }
            }
            return x
        },
        getColumnCustomizationAliasIdToUse: function(t) {
            var u = "###" + t;
            if (m.is(this._adminCusto, "object") && m.is(this._adminCusto.SearchColumnCustoAdminDefinition, "array")) {
                var s = this._adminCusto.SearchColumnCustoAdminDefinition;
                for (var q = 0; q < s.length; q++) {
                    if (m.is(s[q].viewId, "string")) {
                        if (s[q].viewId === u) {
                            var r = s[q].custoAliasToUse;
                            if (m.is(r)) {
                                break
                            }
                        }
                    }
                }
            }
            return r
        },
        getColumnCustomizationIdToUse: function(y) {
            var v = j.getAvailableColumnCustomization(y);
            var r = "The_Default_Columns";
            if (m.is(v, "array") && v.length) {
                for (var x = 0, t = v.length; x < t; x++) {
                    if (m.is(v[x].selected) && true === v[x].selected) {
                        r = v[x].value;
                        break
                    }
                }
            }
            if (true === y.isPQ) {
                if (m.is(y.typeName) && m.is(y.typeName.pqName, "string") && y.typeName.pqName.length > 0) {
                    var s = "###" + y.typeName.pqName;
                    if (!r.startsWith(s)) {
                        if (m.is(this._dsCusto, "object") && m.is(this._dsCusto.SearchColumnCustoDSDefinition, "array")) {
                            var q = this._dsCusto.SearchColumnCustoDSDefinition;
                            for (var z = 0; z < q.length; z++) {
                                if (m.is(q[z].viewId, "string")) {
                                    if (q[z].viewId === s) {
                                        r = s + "-HIDDEN";
                                        break
                                    }
                                }
                            }
                        }
                    }
                    if (!r.startsWith(s)) {
                        var u = e.getViewData();
                        if (m.is(u) && m.is(u.SearchColumnCustoDefinition)) {
                            var w = u.SearchColumnCustoDefinition;
                            if (m.is(w)) {
                                if (m.is(w.viewId, "string")) {
                                    if (w.viewId === s) {
                                        r = s + "-HIDDEN"
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return r
        },
        getColumnCustomizationDefinitionFromCustoId: function(F, J) {
            var u = this;
            var I = [];
            var r = [];
            r = u._getDefaultColumnsForInApps(J);
            var G = [];
            for (var E = 0, v = r.length; E < v; E++) {
                G.push(r[E].dataIndex)
            }
            if ("The_Default_Columns" === F) {
                r = u._getDefaultColumns()
            } else {
                var H = m.clone(i.getItem("DataGridColumnCusto"));
                if (m.is(H, "object") && m.is(H.views, "array")) {
                    var s = H.views;
                    for (var E = 0, v = s.length; E < v; E++) {
                        if (F === s[E].viewId) {
                            if (m.is(s[E].viewDefinition, "array") && 0 < s[E].viewDefinition.length) {
                                r = s[E].viewDefinition;
                                break
                            }
                        }
                    }
                }
                if (!m.is(I, "array") || 0 === I.length) {
                    var s = this._adminCusto.SearchColumnCustoAdminDefinition;
                    var w = this._adminCusto.CustoAliasDefinitions;
                    for (var E = 0, v = s.length; E < v; E++) {
                        if (F === s[E].viewId + "-ADMIN") {
                            if (m.is(s[E].viewDefinition, "array")) {
                                I = m.clone(s[E].viewDefinition)
                            } else {
                                if (m.is(w, "array") && 0 < w.length) {
                                    for (var D = 0, q = w.length; D < q; D++) {
                                        if (w[D].aliasId === s[E].custoAliasToUse) {
                                            I = m.clone(this._adminCusto.CustoAliasDefinitions[D].viewDefinition)
                                        }
                                    }
                                }
                            }
                            if (m.is(I, "array")) {
                                for (var A = 0; A < I.length; A++) {
                                    I[A].dataIndex = I[A].uri;
                                    var t = I[A].uri.indexOf(":"),
                                        x = I[A].uri.indexOf(".");
                                    var C = null;
                                    if (t > 0 && x > 0 && x > t) {
                                        C = I[A].uri.substring(0, x)
                                    }
                                    I[A].dataType = C;
                                    I[A].isSortable = true;
                                    I[A].minWidth = 40;
                                    I[A].text = o.getNLSValueForPredicate(I[A].uri);
                                    I[A].visibility = true;
                                    I[A].visibilityEditable = false;
                                    var z = parseInt(I[A].width, 10);
                                    if (isNaN(z)) {
                                        I[A].width = "auto"
                                    } else {
                                        I[A].width = z
                                    }
                                }
                                r = I
                            }
                            break
                        }
                    }
                }
                if (!m.is(I, "array") || 0 === I.length) {
                    var s = this._dsCusto.SearchColumnCustoDSDefinition;
                    for (var E = 0, v = s.length; E < v; E++) {
                        if (F === s[E].viewId + "-HIDDEN") {
                            I = m.clone(s[E].viewDefinition);
                            if (m.is(I, "array")) {
                                for (var A = 0; A < I.length; A++) {
                                    I[A].dataIndex = I[A].uri;
                                    var t = I[A].uri.indexOf(":"),
                                        x = I[A].uri.indexOf(".");
                                    var C = null;
                                    if (t > 0 && x > 0 && x > t) {
                                        C = I[A].uri.substring(0, x)
                                    }
                                    I[A].dataType = C;
                                    I[A].isSortable = true;
                                    I[A].minWidth = 40;
                                    I[A].text = o.getNLSValueForPredicate(I[A].uri);
                                    I[A].visibility = true;
                                    I[A].visibilityEditable = false;
                                    var z = parseInt(I[A].width, 10);
                                    if (isNaN(z)) {
                                        I[A].width = "auto"
                                    } else {
                                        I[A].width = z
                                    }
                                    if (G.indexOf(I[A].dataIndex) == -1) {
                                        r.push(I[A])
                                    }
                                }
                            }
                            break
                        }
                    }
                }
                if (!m.is(I, "array") || 0 === I.length) {
                    var B = null;
                    var y = e.getViewData();
                    if (m.is(y) && m.is(y.SearchColumnCustoDefinition)) {
                        B = e.getViewData().SearchColumnCustoDefinition
                    }
                    if (B) {
                        if (F === B.viewId + "-HIDDEN") {
                            I = m.clone(B.viewDefinition);
                            if (m.is(I, "array")) {
                                for (var A = 0; A < I.length; A++) {
                                    I[A].dataIndex = I[A].uri;
                                    var t = I[A].uri.indexOf(":"),
                                        x = I[A].uri.indexOf(".");
                                    var C = null;
                                    if (t > 0 && x > 0 && x > t) {
                                        C = I[A].uri.substring(0, x)
                                    }
                                    I[A].dataType = C;
                                    I[A].isSortable = true;
                                    I[A].minWidth = 40;
                                    I[A].text = o.getNLSValueForPredicate(I[A].uri);
                                    I[A].visibility = true;
                                    I[A].visibilityEditable = false;
                                    var z = parseInt(I[A].width, 10);
                                    if (isNaN(z)) {
                                        I[A].width = "auto"
                                    } else {
                                        I[A].width = z
                                    }
                                    if (G.indexOf(I[A].dataIndex) == -1) {
                                        r.push(I[A])
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (m.is(r)) {
                for (var E = 0, v = r.length; E < v; E++) {
                    if (m.is(r[E]) && m.is(r[E].dataIndex, "string")) {
                        r[E].dataIndex = h.getURIToUse(r[E].dataIndex)
                    }
                }
            }
            return r
        },
        getColumnCustomizationDefinitionFromAliasCustoId: function(s) {
            var x = this;
            var v = [];
            var z = [];
            if (!m.is(s, "string") || 0 === s.length) {
                throw new Error("Invalid Arg in SearchCustoServices.getColumnCustomizationDefinitionFromAliasCustoId!")
            }
            v = x._getDefaultColumnsForInApps();
            var q = [];
            for (var u = 0, w = v.length; u < w; u++) {
                q.push(v[u].dataIndex)
            }
            if (m.is(this._adminCusto)) {
                var D = this._adminCusto.CustoAliasDefinitions;
                if (m.is(D)) {
                    for (var u = 0, w = D.length; u < w; u++) {
                        if (s === D[u].aliasId) {
                            var y = m.clone(D[u]);
                            if (m.is(y.viewDefinition, "array")) {
                                z = y.viewDefinition;
                                for (var C = 0; C < z.length; C++) {
                                    z[C].dataIndex = z[C].uri;
                                    var B = z[C].uri.indexOf(":"),
                                        t = z[C].uri.indexOf(".");
                                    var A = null;
                                    if (B > 0 && t > 0 && t > B) {
                                        A = z[C].uri.substring(0, t)
                                    }
                                    z[C].dataType = A;
                                    z[C].isSortable = true;
                                    z[C].minWidth = 40;
                                    z[C].text = o.getNLSValueForPredicate(z[C].uri);
                                    z[C].visibility = true;
                                    z[C].visibilityEditable = false;
                                    var r = parseInt(z[C].width, 10);
                                    if (isNaN(r)) {
                                        z[C].width = "auto"
                                    } else {
                                        z[C].width = r
                                    }
                                    if (q.indexOf(z[C].dataIndex) == -1) {
                                        v.push(z[C])
                                    }
                                }
                            }
                            break
                        }
                    }
                }
            }
            return v
        },
        getColumnCustomizationDefinitionFromCustoIdWithNLSUpdated: function(t, w) {
            var y = this;
            var z = this.getColumnCustomizationDefinitionFromCustoId(t);
            if (m.is(w, "function")) {
                var H = {};
                var E = ["ds6wg:PLMEntity"];
                var q = {
                    vocabIds: []
                };
                for (var D = 0, r = z.length; D < r; D++) {
                    if (z[D].dataIndex.startsWith("ds6wg")) {
                        if (m.is(z[D].dataType) && !m.is(H[z[D].dataType])) {
                            H[z[D].dataType] = true;
                            E.push(z[D].dataType)
                        } else {
                            var s = z[D].dataIndex;
                            var G = s.indexOf(".");
                            if (G > 0) {
                                s = z[D].dataIndex.slice(0, G);
                                if (!m.is(H[z[D].dataType])) {
                                    H[s] = true;
                                    E.push(s)
                                }
                            }
                        }
                    } else {
                        var C = z[D].dataIndex;
                        var A = o.getVocabId(C);
                        if (m.is(A)) {
                            if (!o.isLoaded(A)) {
                                if (-1 === q.vocabIds.indexOf(A)) {
                                    q.vocabIds.push(A);
                                    q[A] = []
                                }
                                q[A].push(C)
                            }
                        }
                        z[D].text = o.getNLSValueForPredicate(z[D].dataIndex)
                    }
                }
                var x = q.vocabIds.length;
                if (x > 0) {
                    for (var B = 0; B < x; B++) {
                        var A = q.vocabIds[B];
                        o.loadVocabulary(A, function(v) {
                            if (m.is(v) && v.status === "success") {
                                var J = q[v.id];
                                if (m.is(J)) {
                                    for (var N = 0; N < J.length; N++) {
                                        var M = J[N];
                                        var L = o.getNLSValueForPredicate(M)
                                    }
                                    var K = z.length;
                                    for (var I = 0; I < K; I++) {
                                        var M = z[I].dataIndex;
                                        if (-1 !== J.indexOf(M)) {
                                            z[I].text = o.getNLSValueForPredicate(M)
                                        }
                                    }
                                }
                            } else {
                                console.warn("Error in PredicatesNLS.loadVocabulary !")
                            }
                        })
                    }
                }
                if (E.length > 0) {
                    o._asyncCallToPredicatesWS(E).then(function F(K) {
                        if (!m.is(K.classPredicates)) {
                            console.error("Unexpected response from GetRelevantPredicates !");
                            return null
                        }
                        var R = false;
                        for (var Q = 0, I = z.length; Q < I; Q++) {
                            if (z[Q].dataIndex.startsWith("ds6wg:")) {
                                for (var J = 0, P = K.classPredicates.length; J < P; J++) {
                                    if (!m.is(K.classPredicates[J].className) || !m.is(K.classPredicates[J].vocabularyPredicateInfo)) {
                                        console.error("Unexpected response from GetRelevantPredicates !");
                                        return null
                                    }
                                    for (var O = 0, v = K.classPredicates[J].vocabularyPredicateInfo.length; O < v; O++) {
                                        if (K.classPredicates[J].vocabularyPredicateInfo[O].uri === z[Q].dataIndex) {
                                            if (z[Q].text !== K.classPredicates[J].vocabularyPredicateInfo[O].nlsName) {
                                                z[Q].text = K.classPredicates[J].vocabularyPredicateInfo[O].nlsName;
                                                R = true
                                            }
                                            O = v;
                                            J = P
                                        }
                                    }
                                }
                            }
                        }
                        var M = {};
                        for (var L = 0, N = z.length; L < N; L++) {
                            if (!m.is(M[z[L].text])) {
                                M[z[L].text] = 0
                            }
                            M[z[L].text] += 1
                        }
                        for (var L = 0, N = z.length; L < N; L++) {
                            if (m.is(M[z[L].text]) && M[z[L].text] > 1) {
                                z[L].text += " (" + z[L].dataType + ")";
                                R = true
                            }
                        }
                        w.call(undefined, z)
                    }, function u() {
                        console.log("promisePredicate fail !");
                        w.call(undefined, z)
                    })
                } else {
                    w.call(undefined, z)
                }
            }
        },
        _computeColToDisplayInCustoPanel: function(F, t) {
            var B = [];
            if (!m.is(F, "array") || !m.is(t, "array")) {
                console.error("Bad args in _computeColToDisplayInCustoPanel !");
                return B
            }
            var G = {};
            for (var C = 0, s = F.length; C < s; C++) {
                if (!m.is(G[F[C].dataIndex])) {
                    var x = F[C].dataIndex;
                    G[x] = true;
                    G[x.slice(x.lastIndexOf("/") + 1, x.length)] = true;
                    var A = F[C];
                    A.visibility = true;
                    A.visibilityEditable = true;
                    var E = false;
                    for (var u = 0, v = t.length; u < v && !E; u++) {
                        if (A.text === t[u].dispValue || A.uri === t[u].sixw) {
                            E = true;
                            A.dataType = t[u].relatedObjectType;
                            A.name = t[u].name;
                            A.text = t[u].dispValue;
                            A.type = t[u].type
                        }
                    }
                    B.push(A)
                }
            }
            var w = [];
            for (var z = 0, r = t.length; z < r; z++) {
                if (m.is(t[z].sixw) && !m.is(G[t[z].sixw])) {
                    G[t[z].sixw] = true;
                    w.push({
                        dataIndex: t[z].sixw,
                        dataType: t[z].relatedObjectType,
                        name: t[z].name,
                        text: (m.is(t[z].dispValue, "string") && t[z].dispValue.length > 0) ? t[z].dispValue : o.getNLSValueForPredicate(t[z].sixw),
                        isSortable: false,
                        minWidth: 40,
                        width: "auto",
                        type: t[z].type,
                        visibility: false,
                        visibilityEditable: true
                    })
                }
            }
            var y = ["ds6w:identifier", "ds6w:type"];
            var D = 0,
                q = 0,
                C = 0;
            for (D = 0, q = B.length; D < q; D++) {
                for (C = y.length - 1; C >= 0; C--) {
                    if (B[D].dataIndex === y[C] || B[D].dataIndex === "ds6w:what/" + y[C]) {
                        y.splice(C, 1);
                        B[D].visibility = true;
                        B[D].visibilityEditable = false
                    }
                }
            }
            for (D = 0, q = w.length; D < q; D++) {
                for (C = y.length; C >= 0; C--) {
                    if (w[D].dataIndex === y[C]) {
                        y.splice(C, 1);
                        w[D].visibility = true;
                        w[D].visibilityEditable = false
                    }
                }
            }
            for (C = 0; C < y.length; C++) {
                w.push({
                    dataIndex: y[C],
                    dataType: null,
                    name: y[C],
                    text: o.getNLSValueForPredicate(y[C]),
                    isSortable: false,
                    minWidth: 40,
                    width: "auto",
                    visibility: true,
                    visibilityEditable: false
                })
            }
            w.sort(function(I, H) {
                var J = 0;
                if (I.text.toUpperCase() > H.text.toUpperCase()) {
                    J = 1
                } else {
                    if (I.text.toUpperCase() < H.text.toUpperCase()) {
                        J = -1
                    }
                }
                return J
            });
            B = B.concat(w);
            return B
        },
        _getDefaultColumns: function() {
            var q = e.getDataGridViewHeaders();
            if (i.getItem("listColumnsWidth")) {
                try {
                    var s = JSON.parse(i.getItem("listColumnsWidth"));
                    var t = Object.keys(s);
                    q.forEach(function(u) {
                        if (t.indexOf(u.dataIndex) === -1) {
                            u.width = "auto";
                            u.isSortable = false
                        } else {
                            u.width = s[u.dataIndex];
                            u.isSortable = false
                        }
                    })
                } catch (r) {
                    console.log(r)
                }
            } else {
                q.forEach(function(u) {
                    u.width = "auto";
                    u.isSortable = false
                })
            }
            return q
        },
        _getDefaultColumnsForInApps: function(q) {
            var r = e.getDataGridViewHeadersForInApps();
            if (i.getItem("listColumnsWidth")) {
                try {
                    var t = JSON.parse(i.getItem("listColumnsWidth"));
                    var u = Object.keys(t);
                    r.forEach(function(v) {
                        if (u.indexOf(v.dataIndex) === -1) {
                            v.width = "auto";
                            v.isSortable = false
                        } else {
                            v.width = t[v.dataIndex];
                            v.isSortable = false
                        }
                    })
                } catch (s) {
                    console.log(s)
                }
            } else {
                r.forEach(function(v) {
                    v.width = "auto";
                    v.isSortable = false
                })
            }
            return r
        },
    });
    return j
});
define("DS/SNResultUX/utils/SearchDataGridPreferences", ["css!DS/SNResultUX/SNResultUX.css", "UWA/Core", "UWA/Event", "UWA/Class", "UWA/Class/Debug", "UWA/Class/Options", "UWA/Class/Events", "DS/Spreadsheet/DataGrid", "DS/Logger/Logger", "DS/UIKIT/SuperModal", "DS/UIKIT/Input/Button", "DS/UIKIT/Input/Toggle", "DS/UIKIT/Spinner", "DS/UIKIT/Input/Select", "DS/UIKIT/Input/Text", "DS/UIKIT/Tooltip", "DS/UIKIT/Popover", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/PredefinedQueries", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/utils/SearchCustoServices", "DS/Controls/Button", "DS/Windows/Dialog", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json"], function(w, q, A, x, z, d, m, g, y, p, h, k, e, i, s, t, v, u, r, o, n, l, j, c, f) {
    var b = null;
    var a = x.extend(m, z, d, {
        name: "SearchDataGridPreferences",
        _logger: null,
        _divCombo: null,
        _divGrid: null,
        _divFooter: null,
        defaultOptions: {
            spreadsheet: null,
            preferences_grid: null,
            move_to_do: null
        },
        gridInitValues: null,
        gridFinalValues: null,
        _columnCustoPreferenceDefinition: null,
        _custoCombo: null,
        _unmodifiedCusto: false,
        _predicateIntersection: null,
        _typeToHandle: null,
        _bFav: null,
        _bFavTooltip: null,
        _bDel: null,
        _bDelTooltip: null,
        _custoNameEdt: null,
        _zIndexToUse: 0,
        init: function(B) {
            if (b) {
                b.destroy();
                b = null
            }
            this.gridInitValues = q.clone(B.availableColumns);
            this.gridFinalValues = q.clone(B.availableColumns);
            this._predicateIntersection = q.clone(B.predicateIntersection);
            this._typeToHandle = q.clone(B.typeToHandle);
            if (q.is(B.zIndexToUse)) {
                this._zIndexToUse = B.zIndexToUse
            }
            this._logger = y.getLogger(a.prototype);
            this._logger.log("init");
            this._parent(B);
            this.setOptions(B);
            this._thingsToApply = {};
            this._buildView();
            this._fillView()
        },
        destroy: function() {
            this.beingDestroyed = true;
            if (this._bFavTooltip) {
                this._bFavTooltip.destroy()
            }
            this._bFavTooltip = null;
            if (this._bDelTooltip) {
                this._bDelTooltip.destroy()
            }
            this._bDelTooltip = null;
            this._columnCustoPreferenceDefinition = null;
            this.gridInitValues = null;
            this.gridFinalValues = null;
            this._custoCombo = null;
            this._predicateIntersection = null;
            this._typeToHandle = null;
            this._bFav = null;
            this._bDel = null;
            this.defaultOptions = null;
            this._divCombo = null;
            this._divGrid = null;
            this._divFooter = null;
            if (q.is(b)) {
                b.destroy();
                b = null
            }
            this._custoNameEdt = null;
            this._parent()
        },
        _buildView: function() {
            var D = this;
            if (!q.is(D._typeToHandle.typeName)) {
                console.error("!UWACore.is(me._typeToHandle.typeName)")
            }
            this._logger.log("_buildView");
            var C = new UWA.Element("div", {
                "class": "global-column-custo-div"
            });
            this._divCombo = new UWA.Element("div", {
                "class": "column-custo-combo-div",
            });
            this._divCombo.inject(C);
            this._divGrid = new UWA.Element("div", {
                "class": "column-custo-grid-div",
            });
            this._divGrid.inject(C);
            this._divFooter = new UWA.Element("div", {
                "class": "column-custo-footer-div",
            });
            this._divFooter.inject(C);
            var F = "";
            if (false === D._typeToHandle.isPQ) {
                F = f.replace(f.get("SearchDataGridPreferences_modal_title"), {
                    typeName: D._typeToHandle.typeName
                })
            } else {
                var B = D._typeToHandle.typeName.pqNLS;
                F = f.replace(f.get("SearchDataGridPreferences_modal_title_PQ"), {
                    typeName: B
                })
            }
            var E = document.getElementsByClassName("onesearch_results onesearch_results-root maximized")[0];
            b = new c({
                identifier: "ColumnCustoPanel",
                title: F,
                content: C,
                resizableFlag: true,
                position: {
                    at: "top left",
                    of: this.options.searchDatagridView.container,
                    collision: "fit"
                },
                minHeight: 440,
                minWidth: 550
            });
            b.elements.container.setStyle("z-index", parseInt(this._zIndexToUse) + 1);
            b.elements.container.addClassName("search-column-custo-dialog");
            b.addEventListener("close", function(G) {
                b = null;
                D.dispatchEvent("onCloseColumnCustomizationPanel")
            });
            b.inject(document.body);
            if (q.is(b.elements) && q.is(b.elements._closeButton)) {
                this._bCloseTooltip = new t({
                    target: b.elements._closeButton,
                    body: f.get("custo_close.tooltip"),
                });
                this._bCloseTooltip.getContent().style.zIndex = this._zIndexToUse + 2
            }
            this._createFooter()
        },
        _createFooter: function() {
            this._logger.log("_createFooter");
            this._divFooter.innerHTML = "";
            var D = this,
                E = new h({
                    value: f.get("SearchDataGridPreferences_modal_apply"),
                    className: "primary apply-button",
                    id: "apply_customization_btn",
                    events: {
                        onClick: function() {
                            D._logger.log("Click on apply Customization");
                            if (D.options.move_to_do !== null) {
                                D.options.preferences_grid.getManager().getRows().forEach(function(F) {
                                    D.options.move_to_do.push(F[0].options.value)
                                })
                            }
                            if (D._unmodifiedCusto === true) {
                                D._applySetting(D._custoCombo.getValue()[0], false)
                            } else {
                                D._applySetting("TEMP_CUSTO", true)
                            }
                            D._requestClosePanel()
                        }
                    }
                }).inject(this._divFooter),
                C = new h({
                    value: f.get("SearchDataGridPreferences_modal_reset"),
                    className: "primary reset-button",
                    id: "reset_customization_btn",
                    events: {
                        onClick: function() {
                            D._logger.log("Click on reset Customization");
                            D._applyReset();
                            D._requestClosePanel()
                        }
                    }
                }).inject(this._divFooter),
                B = new h({
                    value: f.get("SearchDataGridPreferences_modal_save"),
                    className: "primary save-button",
                    id: "save_customization_btn",
                    events: {
                        onClick: function() {
                            D._logger.log("Click on save Customization");
                            if (D.options.move_to_do !== null) {
                                D.options.preferences_grid.getManager().getRows().forEach(function(F) {
                                    D.options.move_to_do.push(F[0].options.value)
                                })
                            }
                            D._saveSetting(B);
                            D._custoNameEdt.setFocus(true)
                        }
                    }
                }).inject(this._divFooter);
            return this._divFooter
        },
        _saveSetting: function(C) {
            var G = this;
            var E, F;

            function I(U) {
                var S = false,
                    Q = "",
                    P = false,
                    K = false,
                    O = false,
                    T = "";
                if (U.endsWith("-ADMIN") || U.endsWith("-HIDDEN")) {
                    S = true;
                    Q = ".InvalidCustoName";
                    if (U.endsWith("-ADMIN")) {
                        T = "-ADMIN"
                    } else {
                        if (U.endsWith("-HIDDEN")) {
                            T = "-HIDDEN"
                        }
                    }
                    O = true
                }
                var L = l.getAvailableColumnCustomization(G._typeToHandle);
                if (q.is(L, "array") && L.length > 0) {
                    for (var M = 0, N = L.length; M < N & !S; M++) {
                        if (L[M].value === U) {
                            S = true;
                            Q = ".AlreadyExistingCusto";
                            P = true;
                            K = true
                        }
                    }
                }
                if (true == S) {
                    var R = new p({
                        renderTo: document.body,
                        className: "WarningSaveCustoDlg"
                    });
                    var J = [];
                    if (P) {
                        J.push({
                            classname: "primary",
                            id: "YesReplaceBtn",
                            value: f.get("SearchColumnCusto.Warning.YES"),
                            action: function(V) {
                                G._applySetting(U, true);
                                V.destroy();
                                G._requestClosePanel()
                            }
                        })
                    }
                    if (K) {
                        J.push({
                            classname: "primary",
                            id: "NoReplaceBtn",
                            value: f.get("SearchColumnCusto.Warning.NO"),
                            action: function(V) {
                                G._custoNameEdt.setFocus(true);
                                V.destroy()
                            }
                        })
                    }
                    if (O) {
                        J.push({
                            classname: "primary",
                            id: "OKReplaceBtn",
                            value: f.get("SearchColumnCusto.Warning.OK"),
                            action: function(V) {
                                G._custoNameEdt.setFocus(true);
                                V.destroy()
                            }
                        })
                    }
                    R.dialog({
                        body: f.replace(f.get("SearchColumnCusto" + Q + ".Msg"), {
                            columnCustoName: U,
                            INVALID_EXT: T
                        }),
                        title: f.get("SearchColumnCusto" + Q + ".Title"),
                        buttons: J
                    })
                } else {
                    G._applySetting(U, true);
                    G._requestClosePanel()
                }
            }
            var H = q.createElement("div", {
                "class": "saveDiv"
            });
            G._custoNameEdt = new s({
                className: "SearchDataGridPreferences_txt",
                id: "CustomizationNameEdt",
                placeholder: f.get("SearchDataGridPreferences_modal_saveEditor"),
                attributes: {
                    events: {
                        keydown: function(J) {
                            E.setDisabled(false)
                        },
                    }
                },
                events: {
                    onKeyDown: function(J) {
                        if (13 == J.keyCode) {
                            if (this.getValue().length > 0) {
                                E.setDisabled(false);
                                if (G._custoCombo.getValue() !== this.getValue()) {
                                    I(this.getValue())
                                }
                            }
                        }
                    }
                }
            });
            var B = this._custoCombo.getValue()[0];
            if (B && B.length > 0) {
                if (!B.endsWith("-ADMIN") && !B.startsWith("###")) {
                    G._custoNameEdt.setValue(B)
                } else {
                    G._custoNameEdt.setValue(f.get("SearchColumnCustoDefaultNameForSave"));
                    G._custoNameEdt.setFocus(true)
                }
            }
            var D = q.createElement("div", {
                "class": "btnDiv"
            });
            E = new h({
                value: f.get("SearchDataGridPreferences_save_ok"),
                className: "primary ok-button",
                id: "ok_save_custo",
                events: {
                    onClick: function() {
                        var K = G._custoNameEdt.getValue();
                        var J = G._custoCombo.getValue()[0];
                        if (J !== K) {
                            I(K)
                        } else {
                            G._applySetting(K, true);
                            G._requestClosePanel()
                        }
                    }
                }
            });
            F = new h({
                value: f.get("SearchDataGridPreferences_save_cancel"),
                className: "primary cancel-button",
                id: "cancel_save_custo",
                events: {
                    onClick: function() {
                        G._createFooter()
                    }
                }
            });
            G._custoNameEdt.inject(H);
            D.inject(H);
            E.inject(D);
            F.inject(D);
            this._divFooter.innerHTML = "";
            H.inject(this._divFooter);
            if (B.length == 0) {
                E.setDisabled(true)
            }
        },
        _applySetting: function(D, F) {
            this._logger.log("_applySetting");
            var E = [];
            for (var C = 0, B = this.gridFinalValues.length; C < B; C++) {
                var G = this.gridFinalValues[C];
                if (true === G.visibility) {
                    E.push({
                        dataIndex: G.dataIndex,
                        name: (q.is(G.name, "string") && G.name.length > 0) ? G.name : null,
                        dataType: G.dataType,
                        text: G.text,
                        width: G.width,
                        type: G.type,
                        isSortable: false,
                        minWidth: 40
                    })
                }
            }
            this.options.searchDatagridView._updateColumns(E, D, F)
        },
        _applyReset: function() {
            var C = this._typeToHandle;
            if (q.is(C)) {
                C.forcedCusto = "The_Default_Columns"
            }
            u.setItem("listColumnsWidth", "");
            u.commit();
            var B = l.getColumnCustomizationIdToUse(C);
            this.options.searchDatagridView._updateColumns(l.getColumnCustomizationDefinitionFromCustoId(B), B, false)
        },
        displayCusto: function(E) {
            this._logger.log("displayCusto");
            if (!q.is(this.options.preferences_grid)) {
                return
            }
            this.options.preferences_grid.getManager().empty();
            if (E === f.get("SearchDataGridPreferences_modal_unsavedCusto")) {
                E = "TEMP_CUSTO"
            }
            var D = [];
            var C = [];
            if (q.is(E) && E.length > 0) {
                C = l.getColumnCustomizationDefinitionFromCustoId(E)
            } else {
                C = this.options.searchDatagridView._columnsAttributes
            }
            this.gridFinalValues = l._computeColToDisplayInCustoPanel(C, this._predicateIntersection);
            for (var F = 0, B = this.gridFinalValues.length; F < B; F++) {
                D.push({
                    colName: this.gridFinalValues[F].text,
                    colWidth: this.gridFinalValues[F].width,
                    origin_dataIndex: this.gridFinalValues[F].dataIndex,
                    colVisibility: {
                        isHidden: !this.gridFinalValues[F].visibility,
                        isRemovable: true
                    }
                })
            }
            this.options.preferences_grid.getManager().addRows(D);
            this.options.preferences_grid.getManager()._setColumnsWidth()
        },
        _fillView: function() {
            this._logger.log("_fillView");
            var B = [];
            var E = this.options.spreadsheet;
            var D = this.options.availableColumns;
            var G = this;
            D.forEach(function(M, K) {
                if (M.isInPreference !== false) {
                    var J = M.text === "" ? (f["SearchDataGridPreferences_modal_" + M.dataIndex] ? f["SearchDataGridPreferences_modal_" + M.dataIndex] : M.dataIndex) : M.text;
                    var I = {
                        colName: J,
                        colColor: "#000000",
                        colBackgroundColor: "#FFFFFF",
                        colExport: M["export"],
                        colWidth: M.width,
                        origin_dataIndex: M.dataIndex
                    };
                    var L = E.getManager().getColumnIDFromDataIndex(M.dataIndex);
                    if (q.is(L)) {
                        I.colVisibility = {
                            isHidden: E.getManager().isColumnHidden(L),
                            isRemovable: (q.is(M.isRemovable) && false == M.isRemovable) ? false : true
                        };
                        I.colWidth = E.getManager().getColumnWidth(M.dataIndex)
                    } else {
                        I.colVisibility = {
                            isHidden: true,
                            isRemovable: true
                        }
                    }
                    B.push(I)
                }
            });
            this.options.preferences_grid = new g({
                enableScrollOnDrag: true,
                columns: [{
                    dataIndex: "origin_dataIndex",
                    width: 0,
                    idHidden: true
                }, {
                    text: f.get("SearchDataGridPreferences_modal_header_name"),
                    dataIndex: "colName",
                    width: "auto",
                    minWidth: 40,
                    isDraggable: true
                }, {
                    text: f.get("SearchDataGridPreferences_modal_visible_column"),
                    dataIndex: "colVisibility",
                    width: 80,
                    minWidth: 40
                }, {
                    text: f.get("SearchDataGridPreferences_modal_width"),
                    dataIndex: "colWidth",
                    width: 80,
                    minWidth: 40
                }],
                data: B,
                defaultCellHeight: 40,
                headersDimensions: {
                    height: 40
                },
                selection: {
                    cells: false
                },
                show: {
                    rowHeaders: true,
                    columnHeaders: true
                },
                height: "auto",
                apiVersion: 2,
                resize: {
                    columns: true
                },
                isEditable: {
                    switchToWriteView: {
                        event: "dblclick",
                        callback: function(I) {
                            this.switchToWriteView()
                        },
                        view: function(J) {
                            switch (J.dataIndex) {
                                case "colName":
                                    return new q.Element("div", {
                                        html: G.gridFinalValues[J.virtualRowID].text
                                    });
                                case "colWidth":
                                    var I = G.gridFinalValues[J.virtualRowID].width;
                                    if (G.gridFinalValues[J.virtualRowID].width === "auto") {
                                        I = f.get("SearchColumnCusto.AutoSize")
                                    }
                                    return new q.Element("input", {
                                        type: "text",
                                        placeholder: I,
                                        events: {
                                            change: function(N) {
                                                N.stopPropagation();
                                                var M = J.cellModel.getRowID();
                                                var K = J.manager.getCellModel(M, 0).getCellContent();
                                                var L = this.value;
                                                if (isNaN(L) === false) {
                                                    L = parseInt(L, 10);
                                                    G.gridFinalValues[J.virtualRowID].width = L
                                                } else {
                                                    G.gridFinalValues[J.virtualRowID].width = "auto";
                                                    this.value = f.get("SearchColumnCusto.AutoSize")
                                                }
                                                G._unmodifiedCusto = false
                                            }
                                        }
                                    })
                            }
                        },
                    },
                    switchToReadView: {
                        event: "blur",
                        callback: function(I) {
                            this.switchToReadView()
                        },
                        view: function(N) {
                            if (q.is(G.beingDestroyed) && G.beingDestroyed == true) {
                                return
                            }
                            switch (N.dataIndex) {
                                case "colVisibility":
                                    var K = (q.is(G.gridFinalValues[N.virtualRowID]) && true == G.gridFinalValues[N.virtualRowID].visibilityEditable) ? false : true;
                                    if ("ds6w:what/ds6w:type" == G.gridFinalValues[N.virtualRowID].dataIndex || "ds6w:what/ds6w:identifier" == G.gridFinalValues[N.virtualRowID].dataIndex) {
                                        K = true
                                    }
                                    var J = new k({
                                        type: "switch",
                                        label: "",
                                        value: "",
                                        disabled: K,
                                        events: {
                                            onChange: function(P) {
                                                P.stopPropagation();
                                                var O = this.isChecked();
                                                N.cellModel.setCellContent({
                                                    isHidden: !O,
                                                    isRemovable: true
                                                });
                                                G.gridFinalValues[N.virtualRowID].visibility = O;
                                                G._unmodifiedCusto = false
                                            }
                                        }
                                    });
                                    var M = N.cellModel.getCellContent();
                                    if (M.isHidden === false) {
                                        J.check()
                                    }
                                    if (M.isRemovable === false) {
                                        J.disable()
                                    }
                                    return J;
                                case "colWidth":
                                    var I = G.gridFinalValues[N.virtualRowID].width;
                                    if (isNaN(G.gridFinalValues[N.virtualRowID].width) === true) {
                                        I = f.get("SearchColumnCusto.AutoSize")
                                    }
                                    return new q.Element("div", {
                                        text: I
                                    });
                                case "colName":
                                    var L;
                                    if (q.is(G.gridFinalValues, "array") && q.is(N.virtualRowID)) {
                                        L = G.gridFinalValues[N.virtualRowID].text
                                    }
                                    return new q.Element("div", {
                                        html: L
                                    });
                                default:
                                    break
                            }
                        },
                    }
                },
                shouldAcceptDrag: function(K) {
                    var J = K.cellModel.getRowID();
                    var I = K.manager.getCellModel(J, 0).getCellContent();
                    if (K.virtualRowID === -1) {
                        return false
                    } else {
                        return true
                    }
                },
                onDragStart: function(I, L, K, J) {},
                onDrop: function(I, L, K, J) {
                    return true
                },
                isSortable: false
            });
            this.options.preferences_grid.getContent().addClassName(this.name);
            this._bDel = new h({
                icon: "trash",
                id: "delete_custo_btn"
            }).inject(G._divCombo);
            this._custoCombo = new i({
                nativeSelect: true,
                id: "custo_selection",
                placeholder: f.get("dataGrid.columnCustoPanel.existingCustoComboPlaceHolder"),
                events: {
                    onChange: function() {
                        var I = this.getValue(),
                            J = "";
                        if (q.is(I, "array") && I.length > 0) {
                            J = I[0]
                        }
                        if (0 == J.length) {
                            return
                        }
                        G.displayCusto(J);
                        G._unmodifiedCusto = true;
                        if (q.is(G.options.preferences_grid)) {
                            G.options.preferences_grid.getManager().updateView(true)
                        }
                        if (q.is(G._bDel)) {
                            if (J.length > 0 && !J.endsWith("-ADMIN")) {
                                G._bDel.show()
                            } else {
                                G._bDel.hide()
                            }
                        }
                    }
                }
            }).inject(G._divCombo);
            if (q.is(G.options.searchDatagridView._forcedCustoView, "string")) {
                G._typeToHandle.forcedCusto = G.options.searchDatagridView._forcedCustoView
            }
            var C = l.getAvailableColumnCustomization(G._typeToHandle);
            this._columnCustoPreferenceDefinition = u.getItem("DataGridColumnCusto");
            this._custoCombo.add(C);
            if (q.is(G._typeToHandle.isPQ) && true === G._typeToHandle.isPQ) {
                this._bFav = new h({
                    icon: "star",
                    id: "associate_to_pq"
                });
                this._bFavTooltip = new t({
                    target: this._bFav.getContent(),
                    body: f.get("custo_favorite.tooltip")
                });
                this._bFavTooltip.getContent().style.zIndex = this._zIndexToUse + 2;
                this._bFav.inject(G._divCombo);
                this._bFav.addEvent("onClick", function() {
                    G._applySetting({
                        custoName: G._typeToHandle.typeName.pqName,
                        custoId: "###" + G._typeToHandle.typeName.pqName,
                        custoNLS: G._typeToHandle.typeName.pqNLS,
                        favPQ: true
                    }, true);
                    G._requestClosePanel()
                })
            }
            this._bDelTooltip = new t({
                target: this._bDel.getContent(),
                body: f.get("custo_delete.tooltip")
            });
            this._bDelTooltip.getContent().style.zIndex = this._zIndexToUse + 2;
            this._bDel.inject(G._divCombo);
            this._bDel.addEvent("onClick", function() {
                var I = G._custoCombo.getValue()[0];
                if (q.is(I, "string") && I.length > 0) {
                    if (q.is(G._columnCustoPreferenceDefinition, "object")) {
                        var K = false;
                        if (G.options.searchDatagridView._currentCustoViewId === I) {
                            K = true
                        }
                        if (q.is(G._columnCustoPreferenceDefinition.views, "array")) {
                            for (var J = G._columnCustoPreferenceDefinition.views.length - 1; J >= 0; J--) {
                                if (q.is(G._columnCustoPreferenceDefinition.views[J], "object") && q.is(G._columnCustoPreferenceDefinition.views[J].viewId, "string") && G._columnCustoPreferenceDefinition.views[J].viewId === I) {
                                    G._columnCustoPreferenceDefinition.views.splice(J, 1)
                                }
                            }
                        }
                        if (q.is(G._columnCustoPreferenceDefinition.activeView, "string") && G._columnCustoPreferenceDefinition.activeView === I) {
                            delete G._columnCustoPreferenceDefinition.activeView
                        }
                        u.commit();
                        G._custoCombo.remove(I);
                        if (true == K) {
                            G._applyReset();
                            G._requestClosePanel()
                        }
                    }
                }
            });
            var F = this._custoCombo.getValue(),
                H = "";
            if (q.is(F, "array") && F.length > 0) {
                H = F[0]
            }
            if (H.length > 0 && !H.endsWith("-ADMIN")) {
                G._bDel.show()
            } else {
                G._bDel.hide()
            }
            this.options.preferences_grid.inject(G._divGrid);
            this.options.preferences_grid.getManager().onRowHeaderRequest(function(J) {
                var I = J.cellView.getContent();
                I.setStyles({
                    paddingLeft: 5,
                    paddingRight: 5,
                    opacity: 0.5,
                    margin: 5,
                    fontSize: "1.5em"
                });
                I.addClassName("wux-ui-hamburger")
            });
            this.options.preferences_grid.getManager().onMoveRow(function(J) {
                if (!q.is(J.fromRowID) || !q.is(J.toRowID)) {
                    return
                }
                var I = G.gridFinalValues.splice(J.fromRowID, 1);
                G.gridFinalValues.splice(J.toRowID, 0, I[0]);
                G._unmodifiedCusto = false
            })
        },
        _requestClosePanel: function() {
            if (q.is(b) && q.is(b.close, "function")) {
                b.close();
                b = null
            }
        }
    });
    return a
});
define("DS/SNResultUX/utils/AdvSearchMgr", ["UWA/Core", "UWA/Class", "UWA/Class/Options", "DS/WAFData/WAFData", "UWA/Class/Debug", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SNVocabAccess", "DS/SNInfraUX/SWFiltering", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/SNPLMDictionary", "DS/SNResultUX/utils/SNResultTypeCustoHelper", "DS/SNInfraUX/SearchLogin", "DS/i3DXSNDictionaryAPI/3DXSearchDictionaryAccess", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/PredicatesNLS"], function(k, m, d, j, h, e, p, b, o, a, l, c, i, f, n) {
    var g = m.extend(h, d, {
        name: "DS_SNResultUX_utils_AdvSearchMgr",
        _status: false,
        _dynamicPredicateSetType: [],
        _dynamicPredicateSetKind: [],
        _dynamicExtPredicateSetType: [],
        _dataSetsForSource: {},
        _dataSetsForType: null,
        _dataSetsForExtension: null,
        _adv_search_field: null,
        _criteriaData: null,
        _currentDataSource: null,
        CORE_BASIC_SOURCE: "ds6w:where/ds6w:source/ds6w:dataSource",
        CORE_BASIC_TYPE: "ds6w:what/ds6w:type",
        CORE_BASIC_SUBTYPE: "vpmextension",
        CORE_BASIC_LABEL: "ds6w:what/ds6w:label",
        CORE_BASIC_IDENTIFIER: "ds6w:what/ds6w:identifier",
        CORE_BASIC_MODIFIED: "ds6w:when/ds6w:modified",
        EXT_BASIC_DESCRIPTION: "ds6w:what/ds6w:description",
        EXT_BASIC_RESPONSIBLE: "ds6w:who/ds6w:responsible",
        EXT_BASIC_CREATED: "ds6w:when/ds6w:created",
        BASIC_PREDICATES: null,
        BASIC_PREDICATES_leaf: null,
        _resources: null,
        _service: null,
        _uniqueDataSource: null,
        _fieldsToSet: null,
        _TypesListToSet: null,
        _incontextFixedPredicates: null,
        init: function(q) {
            if (k.is(e.options.search_settings.service, "string")) {
                this._service = e.options.search_settings.service
            }
            this.setDebugMode(e.getDebugMode());
            this.setOptions(q);
            this._resources = q.resources;
            p.setResources({
                resources: this._resources
            });
            a.setResources({
                resources: q.resources
            });
            this.BASIC_PREDICATES = [this.CORE_BASIC_SOURCE, this.CORE_BASIC_TYPE, this.CORE_BASIC_SUBTYPE, this.CORE_BASIC_LABEL, this.CORE_BASIC_IDENTIFIER, this.CORE_BASIC_MODIFIED, this.EXT_BASIC_DESCRIPTION, this.EXT_BASIC_RESPONSIBLE, this.EXT_BASIC_CREATED];
            this.BASIC_PREDICATES_leaf = ["ds6w:dataSource", "ds6w:type", "vpmextension", "ds6w:label", "ds6w:identifier", "ds6w:modified", "ds6w:description", "ds6w:responsible", "ds6w:created"];
            if (k.is(e.options.search_settings.adv_search_field, "string") && e.options.search_settings.adv_search_field.length > 0) {
                this._adv_search_field = e.options.search_settings.adv_search_field
            }
        },
        setStatus: function(q) {
            this._status = q
        },
        getStatus: function() {
            return this._status
        },
        addFilter: function(q) {},
        clearFilters: function(q) {
            if (!UWA.is(q)) {
                q = "type+kind";
                this._dynamicPredicateSetType = [];
                this._dynamicPredicateSetKind = [];
                this._dynamicExtPredicateSetType = []
            }
            if (-1 <= q.indexOf("kind")) {
                this._dynamicPredicateSetKind = []
            }
        },
        showSourceField: function() {
            var r = true;
            var q = this._InContextAdvancedSearch();
            if (q && q.showSource === false) {
                r = false
            }
            return r
        },
        getAndDisplayAdvancedSearch: function(r, A) {
            var z = this;
            var x = this.getOption("tagger_proxy");
            var y = [];
            this._incontextFixedPredicates = [];
            var u = this._resources.getActiveTenant();
            var s = function(I) {
                if (UWA.is(I, "array")) {
                    var C = [];
                    for (var D = 0; D < I.length; D++) {
                        var G = I[D];
                        if (G.status === true) {
                            var B = G.name;
                            if (B.indexOf("onepart") === -1 && (B.indexOf("3dplan") === -1 && B.indexOf("usersgroup") === -1)) {
                                C.push(G.name)
                            }
                        }
                    }
                    C = z._filterIncontextSources(C);
                    var F = z._prepareSourcePredicate(C);
                    z._dataSetsForSource[u] = F;
                    if (k.is(z) && k.is(z._service) && k.is(z._service, "string")) {
                        z._service = F
                    }
                    if (z.showSourceField()) {
                        x.updateCriteria([F])
                    }
                    if (r) {
                        x.displayCriteria()
                    }
                    if (F.options.datasets.items.length === 1) {
                        var H = {
                            internal: true,
                            value: []
                        };
                        H.sixw = z.CORE_BASIC_SOURCE;
                        H.value[0] = F.options.datasets.items[0].value;
                        var E = z;
                        setTimeout(function() {
                            z.handleCriteriaChange(H);
                            if (r) {
                                x.displayCriteria()
                            }
                        }, 500)
                    }
                }
            };
            var q = z._dataSetsForSource[u];
            if (UWA.is(q)) {
                if (z.showSourceField()) {
                    y.push(q)
                }
            } else {
                var q = this._prepareSourcePredicate([]);
                this._dataSetsForSource[u] = q;
                if (z.showSourceField()) {
                    y.push(q)
                }
                c.login({
                    resources: z._resources,
                    onComplete: s,
                    onFailure: s
                })
            }
            y.push(r ? this._prepareTypePredicates({
                typesList: [],
                options: A
            }) : z._dataSetsForType);
            if (this._isExtensionAvailable()) {
                y.push(r ? this._prepareSubTypePredicates({
                    subTypesList: []
                }) : z._dataSetsForExtension)
            }
            y = y.concat(this._getCoreBasicPredicates());
            y = y.concat(this._getExtendedBasics());
            y = y.concat(this._dynamicPredicateSetType);
            y = y.concat(this._dynamicPredicateSetKind);
            y = y.concat(this._dynamicExtPredicateSetType);
            this._fieldsToSet = y;
            x.setCriteria(y);
            if (r === true) {
                x.displayCriteria()
            }
            var t = this;
            if ((k.is(A) && k.is(A.adv_search_field) && k.is(A.adv_search_field, "string"))) {
                var v = {
                    internal: true,
                };
                v.sixw = this.CORE_BASIC_SOURCE;
                if (k.is(this._uniqueDataSource)) {
                    v.value = this._uniqueDataSource
                }
                setTimeout(function() {
                    t.handleCriteriaChange(v);
                    v.value = this._uniqueDataSource;
                    if (r) {
                        x.displayCriteria()
                    }
                    v = {
                        internal: true,
                        value: []
                    };
                    v.sixw = t.CORE_BASIC_TYPE;
                    v.value[0] = "ds6wg:";
                    v.value[0] = v.value[0].concat(t._adv_search_field);
                    setTimeout(function() {
                        t.handleCriteriaChange(v);
                        if (r) {
                            x.displayCriteria()
                        }
                    }, 2000)
                }, 1000)
            } else {
                if ((k.is(this._adv_search_field, "string") && this._adv_search_field.length > 0)) {
                    v = {
                        internal: true,
                        value: []
                    };
                    v.sixw = t.CORE_BASIC_TYPE;
                    v.value[0] = "ds6wg:";
                    v.value[0] = v.value[0].concat(t._adv_search_field);
                    setTimeout(function() {
                        t.handleCriteriaChange(v);
                        x.displayCriteria()
                    }, 2000)
                } else {
                    if (r) {
                        if ((UWA.is(t._dataSetsForSource)) && (UWA.is(t._dataSetsForSource.options)) && (UWA.is(t._dataSetsForSource.options.datasets)) && (UWA.is(t._dataSetsForSource.options.datasets.items)) && (t._dataSetsForSource.options.datasets.items.length <= 1)) {
                            var v = {
                                internal: true,
                                value: ["3dspace"]
                            };
                            if ((UWA.is(t._dataSetsForSource.options.datasets.items[0])) && (UWA.is(t._dataSetsForSource.options.datasets.items[0].value)) && (t._dataSetsForSource.options.datasets.items[0].value.length > 0) && (t._dataSetsForSource.options.datasets.items[0].value !== "3dspace")) {
                                v = {
                                    value: [t._dataSetsForSource.options.datasets.items[0].value]
                                }
                            }
                            v.sixw = this.CORE_BASIC_SOURCE;
                            setTimeout(function() {
                                if ((UWA.is(t._dataSetsForSource)) && (UWA.is(t._dataSetsForSource.options)) && (UWA.is(t._dataSetsForSource.options.datasets)) && (UWA.is(t._dataSetsForSource.options.datasets.items)) && (t._dataSetsForSource.options.datasets.items.length <= 1)) {
                                    t.handleCriteriaChange(v)
                                }
                                x.displayCriteria()
                            }, 1000)
                        }
                    }
                }
            }
            if (r) {
                x.displayCriteria()
            }
            a.loadDictionary();
            var w = this._InContextAdvancedSearch();
            if (w) {
                this._getIncontextCommonPredicates(function(B) {
                    t._incontextFixedPredicates = [];
                    B.forEach(function(C) {
                        t._incontextFixedPredicates.push(C.sixw)
                    });
                    x.updateCriteria(B)
                })
            } else {}
        },
        _isExtensionAvailable: function() {
            return b.isAVisiblePredicate("ds6w:kind") && this.showInContextExtension()
        },
        getAndDisplayAdvancedSearchWithProxyFilterSettings: function() {
            var q = this.getOption("tagger_proxy");
            q.displayCriteria()
        },
        hideAdvancedSearchTab: function() {
            var q = this.getOption("tagger_proxy");
            var r = [];
            var s = true;
            r.push(this._prepareSourcePredicate([], s));
            r.push(this._prepareTypePredicates({
                typesList: [],
                toAllowEdit: s
            }));
            if (this._isExtensionAvailable()) {
                r.push(this._prepareSubTypePredicates({
                    subTypesList: [],
                    toAllowEdit: s
                }))
            }
            q.setCriteria(r);
            q.setCriteria([]);
            if (true === q.getDisplayStatus()) {
                q.displayCriteria(false)
            }
        },
        _internalTypeSelection: function() {
            var u;
            var r = this._InContextAdvancedSearch();
            if (r) {
                var t = r.selection;
                if (t) {
                    u = t["ds6w:type"];
                    var v = {
                        internal: true,
                        sixw: "ds6w:what/ds6w:type",
                        value: []
                    };
                    if (k.is(u, "array") && u.length > 0) {
                        v.value.push(u[0]);
                        if (t.vpmextension) {
                            v.subTypesListSelected = t.vpmextension
                        }
                        this.handleCriteriaChange(v);
                        for (var s = 1; s < u.length; s++) {
                            v.value.push(u[s])
                        }
                    }
                    if (v.value.length > 1) {
                        this.handleCriteriaChange(v)
                    }
                    var q = this.getOption("tagger_proxy");
                    if (q.toggleDisplayAllCriteria) {
                        q.toggleDisplayAllCriteria(true)
                    }
                }
            }
        },
        _internalSubtypeSelection: function(r) {
            if (k.is(r, "array") && r.length == 1) {
                var q = {
                    internal: true,
                    sixw: "void/vpmextension",
                    value: r
                };
                this.handleCriteriaChange(q)
            }
        },
        handleCriteriaChange: function(s) {
            this._criteriaData = s;
            var I = this;
            var L = this.getOption("tagger_proxy");
            console.log("filterData received from Tagger : " + JSON.stringify(s));
            if (UWA.is(s)) {
                var x = s.sixw.split("/").pop();
                if (x === "ds6w:dataSource") {
                    var w = s.value;
                    if ((UWA.is(w)) && (UWA.is(w.length)) && (1 === w.length)) {
                        var N = p.getVocabularyName(w[0]);
                        this._currentDataSource = w[0];
                        var B = [];
                        var A = this;
                        var M = I._InContextAdvancedSearch();
                        var H;
                        if (M) {
                            H = M["ds6w:type"]
                        }
                        var C;
                        if (M && M.selection && s.internal) {
                            C = M.selection["ds6w:type"]
                        }
                        if (k.is(H, "array")) {
                            var E = p.getVocabularyClasses(N);
                            if (E) {
                                var r = I.getIncontextTypeList(E);
                                B = B.concat(I._prepareTypePredicates({
                                    typesList: r,
                                    typesListSelected: C
                                }));
                                L.updateCriteria(B)
                            } else {
                                var J = [];
                                H.forEach(function(R) {
                                    var Q = R.uri.split(":");
                                    var P = Q[1];
                                    J.push(P)
                                });
                                i.getNlsOfPropertiesValues(JSON.stringify({
                                    "ds6w:type": J
                                }), {
                                    tenantId: I._resources.active_tenant,
                                    lang: f.getLanguage(),
                                    TagURL6WId: i._6WTagURL,
                                    onComplete: function(Q) {
                                        var R = Q["ds6w:type"];
                                        var P = [];
                                        H.forEach(function(U) {
                                            var T = U.uri.split(":");
                                            var S = T[1];
                                            P.push({
                                                uri: U.uri,
                                                nlsName: R[S]
                                            })
                                        });
                                        B = B.concat(I._prepareTypePredicates({
                                            typesList: P,
                                            typesListSelected: C
                                        }));
                                        L.updateCriteria(B)
                                    }
                                })
                            }
                        } else {
                            var D = {
                                vocabId: N
                            };
                            D.onComplete = function(P) {
                                B = B.concat(P);
                                I._TypesListToSet = B;
                                L.updateCriteria(B)
                            };
                            D.onFailure = function() {
                                p.loadVocabularyClasses(N, function(P) {
                                    B = B.concat(I._prepareTypePredicates({
                                        typesList: P.classInfos,
                                        vocabId: N,
                                        typesListSelected: C
                                    }));
                                    I._TypesListToSet = B;
                                    L.updateCriteria(B);
                                    if (C) {
                                        A._internalTypeSelection()
                                    }
                                })
                            };
                            A._prepareTypePredicatesFromCusto(D)
                        }
                    } else {
                        var F = [];
                        if (k.is(I) && k.is(I._service) && (I._service != null)) {
                            F = I._service;
                            L.updateCriteria([F]);
                            if (k.is(I._service.options) && k.is(I._service.options.datasets) && k.is(I._service.options.datasets.items)) {
                                if (I._service.options.datasets.items.length === 1) {
                                    var s = {
                                        value: []
                                    };
                                    s.sixw = I.CORE_BASIC_SOURCE;
                                    s.value[0] = I._service.options.datasets.items[0].value;
                                    var A = I;
                                    setTimeout(function() {
                                        I.handleCriteriaChange(s)
                                    }, 500)
                                }
                            }
                        } else {
                            F.push(this._prepareTypePredicates({
                                typesList: []
                            }));
                            L.updateCriteria(F)
                        }
                        if (I._isExtensionAvailable()) {
                            var t = [];
                            t.push(I._prepareSubTypePredicates({
                                subTypesList: []
                            }));
                            L.updateCriteria(t)
                        }
                    }
                    var u = I._dynamicPredicateSetType;
                    u = u.concat(I._dynamicPredicateSetKind).concat(I._dynamicExtPredicateSetType);
                    L.removeCriteria(u);
                    I.clearFilters("type+kind")
                } else {
                    if (x === "ds6w:type") {
                        var z = s.value;
                        if (z.length == 1) {
                            I._dynamicExtPredicateSetType = [];
                            p.loadRelevantPredicates(z[0], function(P) {
                                I._loadPLMDictionaryAndRun(function() {
                                    var Q = I._prepareRelevantPredicates(P.vocabularyPredicateInfo, false, z[0], s.internal);
                                    I._dynamicPredicateSetType = Q;
                                    Q = I._sortByKey(Q, "dispValue");
                                    L.updateCriteria(Q)
                                })
                            });
                            if (I._isExtensionAvailable()) {
                                var z = s.value;
                                p.loadRelevantInterfaces(z[0], function(Q) {
                                    var R = [];
                                    var T = "";
                                    var S = [];
                                    for (var P = 0; P < Q.interfaces.length; P++) {
                                        if (UWA.is(Q.interfaces[P]["automatic"]) && Q.interfaces[P]["automatic"] === "Yes" || UWA.is(Q.interfaces[P]["Automatic"]) && Q.interfaces[P]["Automatic"] === "Yes") {
                                            T = T.concat("ds6wg:", Q.interfaces[P]["name"], ",")
                                        } else {
                                            S.push(Q.interfaces[P])
                                        }
                                    }
                                    R.push(I._prepareSubTypePredicates({
                                        subTypesList: S,
                                        subTypesListSelected: s.subTypesListSelected,
                                        typeURI: z[0]
                                    }));
                                    L.updateCriteria(R);
                                    if (T.length > 0) {
                                        T = T.trim().slice(0, -1);
                                        p.loadDeployedExtRelevantPredicates(T, function(U) {
                                            I._loadPLMDictionaryAndRun(function() {
                                                var Z = [];
                                                for (var X = 0; X < U.classPredicates.length; X++) {
                                                    if (UWA.is(U.classPredicates[X]["vocabularyPredicateInfo"])) {
                                                        Z = Z.concat(U.classPredicates[X]["vocabularyPredicateInfo"])
                                                    }
                                                }
                                                for (var X = Z.length - 1; X >= 0; X--) {
                                                    var W = UWA.is(Z[X].lineage) ? Z[X].lineage : Z[X].uri;
                                                    for (var V = 0; V < I._dynamicPredicateSetType.length; V++) {
                                                        if (I._dynamicPredicateSetType[V].sixw === W) {
                                                            Z.splice(X, 1)
                                                        }
                                                    }
                                                }
                                                var Y = I._prepareRelevantPredicates(Z, true);
                                                I._dynamicExtPredicateSetType = Y;
                                                L.updateCriteria(Y)
                                            })
                                        })
                                    }
                                    if (s.subTypesListSelected) {
                                        I._internalSubtypeSelection(s.subTypesListSelected)
                                    }
                                })
                            }
                        } else {
                            if (z.length > 1) {
                                var G = n._asyncCallToPredicatesWS(z).then(function y(P) {
                                    L.removeCriteria(I._dynamicExtPredicateSetType);
                                    L.removeCriteria(I._dynamicPredicateSetType);
                                    I._dynamicPredicateSetType = [];
                                    I._loadPLMDictionaryAndRun(function() {
                                        P.classPredicates.forEach(function(R) {
                                            var Q = I._prepareRelevantPredicates(R.vocabularyPredicateInfo, false, R.className);
                                            if (I._dynamicPredicateSetType.length > 0) {
                                                I._dynamicPredicateSetType = I.intersect_safe(I._dynamicPredicateSetType, Q)
                                            } else {
                                                I._dynamicPredicateSetType = Q
                                            }
                                        });
                                        I._dynamicPredicateSetType = I._sortByKey(I._dynamicPredicateSetType, "dispValue");
                                        L.updateCriteria(I._dynamicPredicateSetType)
                                    })
                                }, function v() {
                                    console.log("promisePredicate fail !")
                                })
                            } else {
                                if (z.length === 0) {
                                    var K = [];
                                    K = K.concat(I._dynamicPredicateSetType);
                                    L.removeCriteria(I._dynamicExtPredicateSetType);
                                    if (I._isExtensionAvailable()) {
                                        var O = [];
                                        O.push(this._prepareSubTypePredicates({
                                            subTypesList: []
                                        }));
                                        L.updateCriteria(O);
                                        K = K.concat(I._dynamicPredicateSetKind)
                                    }
                                    L.removeCriteria(K);
                                    I._dynamicPredicateSetType = [];
                                    I._dynamicExtPredicateSetType = [];
                                    I.clearFilters("type+kind")
                                }
                            }
                        }
                    } else {
                        if (x === I.CORE_BASIC_SUBTYPE) {
                            var q = s.value;
                            if (q.length == 1) {
                                p.loadRelevantPredicates(q[0], function(P) {
                                    I._loadPLMDictionaryAndRun(function() {
                                        var R = I._prepareRelevantPredicates(P.vocabularyPredicateInfo, false, undefined, s.internal);
                                        var T = R;
                                        for (var S = 0; S < T.length; S++) {
                                            for (var Q = 0; Q < I._dynamicPredicateSetType.length; Q++) {
                                                if (I._dynamicPredicateSetType[Q].dispValue === T[S].dispValue) {
                                                    T.splice(S > 0 ? S-- : 0, 1)
                                                }
                                            }
                                        }
                                        I._dynamicPredicateSetKind = T;
                                        L.updateCriteria(R)
                                    })
                                })
                            } else {
                                L.removeCriteria(I._dynamicPredicateSetKind);
                                I.clearFilters("kind")
                            }
                        }
                    }
                }
            }
        },
        _sortByKey: function(r, q) {
            return r.sort(function(u, t) {
                var s = u[q];
                var v = t[q];
                return ((s < v) ? -1 : ((s > v) ? 1 : 0))
            })
        },
        _sortByKeyDesc: function(r, q) {
            return r.sort(function(u, t) {
                var s = u[q];
                var v = t[q];
                return ((s > v) ? -1 : ((s < v) ? 1 : 0))
            })
        },
        intersect_safe: function(v, r) {
            var u = [];
            for (var w = 0, t = v.length; w < t; w++) {
                for (var s = 0, q = r.length; s < q; s++) {
                    if (v[w].sixw === r[s].sixw) {
                        u.push(v[w]);
                        break
                    }
                }
            }
            return u
        },
        handlePLMCriteriaChange: function(s) {
            if (!k.is(s) || !k.is(s.PLMTitle)) {
                throw new Error("Invalid Arg in AdvSearchMgr.handlePLMCriteriaChange!")
            }
            var r = this;
            var q = this.getOption("tagger_proxy");
            p.loadPLMSuggestList(s.PLMTitle, function(u) {
                var t = r._preparePLMParamData(u);
                q.updatePLMSuggestions(t)
            })
        },
        handleTypeSuggestListChange: function(t) {
            var v = e.getOption("SUGGEST_ON_ADVANCEDSEARCH");
            var x = this;
            if (v && UWA.is(t) && UWA.is(t.suggestField) && UWA.is(t.suggestTitle) && t.suggestTitle.length > 2) {
                if (!k.is(t)) {
                    throw new Error("Invalid Arg in AdvSearchMgr.handlePLMCriteriaChange!")
                }
                var s = "";
                if (UWA.is(x._criteriaData)) {
                    var u = x._criteriaData.sixw.split("/").pop();
                    if (u === "ds6w:type" || u === "[vpmextension]") {
                        if (UWA.is(x._criteriaData) && UWA.is(x._criteriaData.value) && x._criteriaData.value.length === 1) {
                            if (0 == x._criteriaData.value[0].indexOf("ds6wg:") || 0 == x._criteriaData.value[0].indexOf(x._currentDataSource)) {
                                var q = x._criteriaData.value[0].split(":").pop();
                                s = "[ds6w:type]:(" + q + ")"
                            }
                        } else {
                            if (x._criteriaData.value.length > 1) {
                                for (var r = 0; r < x._criteriaData.value.length; r++) {
                                    if (0 == x._criteriaData.value[r].indexOf("ds6wg:") || 0 == x._criteriaData.value[0].indexOf(x._currentDataSource)) {
                                        var q = x._criteriaData.value[r].split(":").pop();
                                        q = "(" + q + ")";
                                        if (r !== x._criteriaData.value.length - 1) {
                                            s += "[ds6w:type]:" + q + " OR "
                                        } else {
                                            s += "[ds6w:type]:" + q
                                        }
                                    }
                                }
                                s = "(" + s + ")"
                            }
                        }
                    }
                }
                if (s.length > 0) {
                    s = s.concat(" AND [", t.suggestField, "]:*", t.suggestTitle, "*")
                } else {
                    s = s.concat("[", t.suggestField, "]:*", t.suggestTitle, "*")
                }
                var y = {
                    query: s,
                    order_field: "relevance",
                    order_by: "desc",
                    select_synthesis: [t.suggestField],
                    select_predicate: [t.suggestField],
                    source: [x._currentDataSource || "3dspace"]
                };
                var w = this.getOption("tagger_proxy");
                p.loadSearchSuggestList(y, function(A) {
                    var z = x._prepareSearchSuggestData(t, A);
                    w.updateSuggestions(z)
                })
            }
        },
        _prepareSearchSuggestData: function(q, A) {
            var y = [];
            var K = false;
            var x = this;
            var I = {
                suggestField: q.suggestField,
                datasets: {
                    name: q.suggestField,
                    items: y
                }
            };
            if (UWA.is(A) && UWA.is(A.facets) && A.facets.length > 0) {
                var z = A.facets;
                var v = [];
                for (var F = 0; F < z.length; F++) {
                    var L = z[F];
                    if (UWA.is(L.sixw) && L.sixw.indexOf(q.suggestField) >= 0) {
                        v.push(L)
                    }
                }
                var E = x._sortByKeyDesc(v, "count");
                var B = [];
                var s = E.length > 9 ? 10 : E.length;
                for (var H = 0; H < s; H++) {
                    var J = E[H];
                    var u = J.dispValue || J.object;
                    var C = {
                        value: J.object || J.dispValue,
                        label: J.dispValue,
                        type: J.type
                    };
                    if (B.indexOf(u) == -1) {
                        B.push(u);
                        y.push(C)
                    }
                }
            }
            if (UWA.is(A) && UWA.is(A.results) && (A.results.length > 0)) {
                var s = A.results.length > 9 ? 10 : A.results.length;
                var B = [];
                for (var H = 0; H < s; H++) {
                    var J = A.results[H];
                    var D = "",
                        r = "string",
                        M = "",
                        u = "",
                        w = null;
                    for (var G = 0; G < J.attributes.length; G++) {
                        var t = J.attributes[G];
                        if (t.format === "internal") {
                            continue
                        } else {
                            if (t.format === "attribute") {
                                if (q.suggestField === t.name) {
                                    u = t.value;
                                    M = t.dispValue;
                                    var C = {
                                        value: t.value || t.dispValue,
                                        label: t.dispValue,
                                        type: t.type
                                    };
                                    if (B.indexOf(u) == -1 && B.indexOf(M) == -1) {
                                        if (UWA.is(u)) {
                                            B.push(u)
                                        } else {
                                            B.push(M)
                                        }
                                        y.push(C)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return I
        },
        _preparePLMParamData: function(x) {
            var v = [];
            var F = false;
            var D = {
                name: x.plmtitle,
                items: v,
                hasMore: F
            };
            var A = f.getLanguage();
            var s = e.getOption("PLMParamNLS");
            if (UWA.is(x) && UWA.is(x.info) && x.info.length > 0) {
                var r = x.info.length;
                if (r > 100) {
                    F = true
                }
                for (var C = 0; C < r; C++) {
                    var E = x.info[C];
                    var z, q, w, u, G = null;
                    for (var B = 0; B < E.attributes.length; B++) {
                        var t = E.attributes[B];
                        if (t.format === "internal") {
                            continue
                        }
                        if (t.format === "attribute" && t.name === "plmparam.title") {
                            G = t.value
                        } else {
                            if (k.is(s, "object") && k.is(s[A], "string") && t.format === "attribute" && t.name === s[A]) {
                                z = t.value
                            } else {
                                if (t.format === "attribute" && t.name === "plmparam.itf") {
                                    var H = t.value.substring(0, t.value.length - 9);
                                    w = t.value;
                                    if (UWA.is(H)) {
                                        if (H === "String") {
                                            q = "string"
                                        } else {
                                            if (H === "Real") {
                                                q = "double"
                                            } else {
                                                if (H === "Integer") {
                                                    q = "integer"
                                                } else {
                                                    if (H === "Boolean") {
                                                        q = "boolean"
                                                    } else {
                                                        q = "double"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (t.format === "attribute" && t.name === "plmparam.displayunit") {
                                        u = t.value
                                    }
                                }
                            }
                        }
                    }
                    var y = {};
                    if (u === undefined || u === null) {
                        y = {
                            value: z || G,
                            subLabel: w,
                            type: q,
                            title: G
                        }
                    } else {
                        y = {
                            value: z || G,
                            subLabel: w,
                            type: q,
                            unit: u,
                            title: G
                        }
                    }
                    v.push(y)
                }
            }
            return D
        },
        convertPLMParamUnits: function(w, F) {
            if (k.is(w) && k.is(w.plmparam) && k.is(w.plmparam["double"])) {
                var q = w.plmparam["double"];
                var E = {
                    Data: []
                };
                var u = [];
                for (var x in q) {
                    var z = x;
                    var B = q[x]["interface"];
                    var H = B.substring(0, B.length - 9);
                    var A = q[x].unit;
                    var v = a.getMKSNLSNameForDimension(H);
                    var G = q[x];
                    delete G.unit;
                    if (k.is(A) && A !== a.getMKSNLSLableNameForDimension(H)) {
                        for (var y in G) {
                            if (y !== "interface") {
                                var D = G[y];
                                var r = z.concat(".").concat(y);
                                for (var s in D) {
                                    var I = {
                                        address: null,
                                        value: null
                                    };
                                    var C = {
                                        UnitFrom: A,
                                        UnitTo: v,
                                        Dimension: H,
                                        Values: D[s]
                                    };
                                    E.Data.push(C);
                                    I.address = r.concat(".").concat(s);
                                    I.value = D[s];
                                    u.push(I)
                                }
                            }
                        }
                    }
                }
                a.loadConvertedMKSValues(E, function(M) {
                    var t = w.plmparam["double"];
                    for (var K = 0; K < M.length; K++) {
                        var O = u[K].address;
                        var P = O.split(".");
                        var J = P[P.length - 2];
                        var N = P[P.length - 1];
                        var L = O.substring(0, O.length - N.length - J.length - 2);
                        t[L][J][N] = parseFloat(M[K].ConvertedValues)
                    }
                    console.log("Call back got called : " + w.plmparam["double"]);
                    F.call(undefined, w)
                })
            }
        },
        _prepareFTSFieldPredicate: function() {
            var q = {
                dispValue: o.get("adv_search.ftsfield"),
                sixw: "fts_value",
                type: "string",
                options: {
                    showByDefault: true
                }
            };
            return q
        },
        _prepareSourcePredicate: function(v, u, s) {
            var r = [];
            if (UWA.is(v)) {
                for (var q = 0; q < v.length; q++) {
                    var w = {
                        value: v[q],
                        label: o.get("adv_search.source." + v[q])
                    };
                    if ((k.is(s) && k.is(s.adv_search_field) && k.is(s.adv_search_field, "string")) || (k.is(this._adv_search_field) && k.is(this._adv_search_field, "string"))) {
                        w.predefined = true
                    }
                    if (v.length === 1) {
                        w.predefined = true
                    }
                    r.push(w)
                }
            }
            var t = {
                dispValue: o.get("adv_search.dataSource"),
                sixw: this.CORE_BASIC_SOURCE,
                type: u ? "string" : "enum",
                options: {
                    multiSelect: false,
                    disabled: r.length > 1 ? false : (u ? false : true),
                    placeholder: r.length ? o.get("adv_search.dataSource.message") : o.get("adv_search.dataSource.noSourceMessage"),
                    noResultsMessage: o.get("adv_search.dataSource.noSourceMessage"),
                    onCriterionSelectEvent: true,
                    allowFreeInput: false,
                    showSuggestsOnFocus: true,
                    datasets: {
                        name: "Sources",
                        items: r
                    },
                    showByDefault: true
                }
            };
            this._dataSetsForSource = t;
            return t
        },
        _prepareTypePredicates: function(B) {
            var q = B.typesList;
            var s = B.toAllowEdit;
            var y = B.vocabId;
            var t = B.typesListSelected || [];
            var v = [];
            if (UWA.is(q)) {
                if (y) {
                    q = l.getAdvancedSearchCustoTypeList(y, q)
                }
                for (var x = 0; x < q.length; x++) {
                    var z = q[x].nlsName;
                    var u = q[x].name;
                    var w = q[x].uri;
                    if (!UWA.is(z)) {
                        z = o.get("adv_search.rdfclass." + q[x].uri)
                    }
                    var A = {
                        value: q[x].uri,
                        label: z
                    };
                    if ((k.is(B) && k.is(B.options) && k.is(B.options.adv_search_field) && k.is(B.options.adv_search_field, "string")) || (k.is(this._adv_search_field) && k.is(this._adv_search_field, "string"))) {
                        if ((this._adv_search_field == u) || (B.adv_search_field == u)) {
                            A.predefined = true
                        }
                    }
                    if (t.indexOf(w) >= 0) {
                        A.predefined = true
                    }
                    v.push(A)
                }
            }
            var r = {
                dispValue: o.get("adv_search.type"),
                sixw: this.CORE_BASIC_TYPE,
                type: s ? "string" : "enum",
                multiSelect: true,
                options: {
                    multiSelect: true,
                    disabled: v.length ? false : (s ? false : true),
                    placeholder: v.length ? o.get("adv_search.type.message") : o.get("adv_search.type.noTypeMessage"),
                    noResultsMessage: o.get("adv_search.type.noTypeMessage"),
                    onCriterionSelectEvent: true,
                    allowFreeInput: false,
                    showSuggestsOnFocus: true,
                    datasets: {
                        name: "Types",
                        items: v
                    },
                    showByDefault: true
                }
            };
            this._dataSetsForType = r;
            return r
        },
        _prepareSubTypePredicates: function(y) {
            var v = y.subTypesList;
            var q = y.toAllowEdit;
            var t = y.typeURI;
            var w = y.subTypesListSelected || [];
            var s = [];
            if (UWA.is(v)) {
                if (t) {
                    if (this._InContextAdvancedSearch()) {
                        v = this.getIncontextSubtypeList(t, v)
                    } else {
                        v = l.getAdvancedSearchCustoInterfaceList(t, v)
                    }
                }
                for (var u = 0; u < v.length; u++) {
                    var r = {
                        value: "ds6wg:" + v[u].name,
                        label: v[u].nlsName
                    };
                    if (w.indexOf(r.value) >= 0) {
                        r.predefined = true
                    }
                    s.push(r)
                }
            }
            var x = {
                dispValue: o.get("adv_search.subtype"),
                sixw: this.CORE_BASIC_SUBTYPE,
                type: q ? "string" : "enum",
                multiSelect: true,
                options: {
                    multiSelect: true,
                    disabled: s.length ? false : (q ? false : true),
                    placeholder: s.length ? o.get("adv_search.subtype.message") : o.get("adv_search.subtype.noSubTypeMessage"),
                    noResultsMessage: o.get("adv_search.subtype.noSubTypeMessage"),
                    onCriterionSelectEvent: true,
                    allowFreeInput: false,
                    showSuggestsOnFocus: true,
                    datasets: {
                        name: "SubTypes",
                        items: s
                    },
                    showByDefault: true
                }
            };
            this._dataSetsForExtension = x;
            return x
        },
        _getPredicateTypeFromDataType: function(s) {
            var r = "";
            if (UWA.is(s) && UWA.is(s.range) && UWA.is(s.range.dataTypes) && UWA.is(s.range.dataTypes.length)) {
                r = s.range.dataTypes[0];
                var q = "string";
                if (r === "http://www.w3.org/2001/XMLSchema#string") {
                    q = "string"
                } else {
                    if (r === "http://www.w3.org/2001/XMLSchema#boolean") {
                        q = "boolean"
                    } else {
                        if (r === "http://www.w3.org/2001/XMLSchema#integer") {
                            q = "string"
                        } else {
                            if (r === "http://www.w3.org/2001/XMLSchema#dateTime") {
                                q = "date"
                            } else {
                                if (r === "http://www.w3.org/2001/XMLSchema#date") {
                                    q = "date"
                                } else {
                                    if (r === "http://www.w3.org/2001/XMLSchema#double") {
                                        q = "double"
                                    } else {
                                        if (r === "http://www.w3.org/2001/XMLSchema#real") {
                                            q = "double"
                                        } else {
                                            if (r === "http://www.w3.org/2001/XMLSchema#timestamp") {
                                                q = "date"
                                            } else {
                                                if (r === "http://www.w3.org/2001/XMLSchema#time") {
                                                    q = "date"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return q
        },
        _prepareRelevantPredicates: function(q, s, w, r, A) {
            var z = f.isFUN072117Active();
            var v = function(C) {
                var D = C.nlsName;
                if (C.dimension.trim().length == 0) {} else {
                    if (z && C.manipulationUnit && C.manipulationUnit.trim().length > 0) {
                        D = D + " (" + a.getUnitNLSForDimension(C.dimension, C.manipulationUnit.trim()) + ")"
                    } else {
                        D = D + " (" + a.getMKSNLSForDimension(C.dimension) + ")"
                    }
                }
                return D
            };
            var u = [];
            if (UWA.is(q)) {
                q = this.getIncontextPredicateList(w, q);
                for (var x = 0; x < q.length; x++) {
                    if (UWA.is(q[x].uri)) {
                        if (b.isAVisiblePredicate(q[x].uri)) {
                            var t = UWA.is(q[x].uri) ? q[x].uri : q[x].lineage;
                            if ((A === false) || ((-1 === this._incontextFixedPredicates.indexOf(t)) && (-1 === this.BASIC_PREDICATES.indexOf(t)) && (-1 === this.BASIC_PREDICATES_leaf.indexOf(t)))) {
                                var y;
                                if (q[x].rangeValues && UWA.is(q[x].range) && UWA.is(q[x].range.dataTypes) && (this._getPredicateTypeFromDataType(q[x]) === "string" || this._getPredicateTypeFromDataType(q[x]) === "boolean")) {
                                    y = this._prepareRangePredicate(q[x], q[x].showByDefault === false ? false : s, r)
                                } else {
                                    y = {
                                        dispValue: v(q[x]),
                                        sixw: UWA.is(q[x].uri) ? q[x].uri : q[x].lineage,
                                        type: this._getPredicateTypeFromDataType(q[x]),
                                        options: {
                                            showByDefault: q[x].showByDefault === false ? false : s
                                        }
                                    };
                                    if (r) {
                                        var B = this._getIncontextSelectedPredicateValue(y.sixw);
                                        if (B) {
                                            if (y.type == "string") {
                                                y.options.defaultValue = B
                                            } else {
                                                y.options.defaultValue = B[0]
                                            }
                                        }
                                    }
                                }
                                u.push(y)
                            }
                        }
                    }
                }
            }
            return u
        },
        _prepareRangePredicate: function(r, q, s) {
            var t = [];
            var v = this._getIncontextSelectedPredicateValue(r.uri);
            if (r && r.rangeValues && r.rangeValues.literalInfo) {
                r.rangeValues.literalInfo.forEach(function(w) {
                    if ((w.value === "0") && (w.nlsvalue === "0")) {} else {
                        var y = w.nlsvalue;
                        if (!y) {
                            y = w.nlsValue
                        }
                        var x = {
                            value: "enum|" + w.value,
                            label: y
                        };
                        if (s && v && v.indexOf(x.value) >= 0) {
                            x.predefined = true
                        }
                        t.push(x)
                    }
                })
            }
            var u = {
                dispValue: r.nlsName,
                sixw: UWA.is(r.lineage) ? r.lineage : r.uri,
                type: "string",
                options: {
                    disabled: false,
                    multiSelect: true,
                    datasets: {
                        name: "ranges",
                        items: t
                    },
                    onCriterionSelectEvent: true,
                    allowFreeInput: false,
                    showSuggestsOnFocus: true,
                    showByDefault: q
                }
            };
            return u
        },
        _getCoreBasicPredicates: function() {
            var u = [];
            var t;
            if (b.isAVisiblePredicate("ds6w:label") && this._isIncontextBasicAvailable("ds6w:label")) {
                var q = {
                    dispValue: o.get("adv_search.label"),
                    sixw: this.CORE_BASIC_LABEL,
                    type: "string",
                    options: {
                        showByDefault: true
                    }
                };
                t = this._getIncontextSelectedPredicateValue("ds6w:label");
                if (UWA.is(t, "array") && t.length > 0) {
                    q.options.defaultValue = t
                }
                u.push(q)
            }
            if (b.isAVisiblePredicate("ds6w:identifier") && this._isIncontextBasicAvailable("ds6w:identifier")) {
                var s = {
                    dispValue: o.get("adv_search.identifier"),
                    sixw: this.CORE_BASIC_IDENTIFIER,
                    type: "string",
                    options: {
                        showByDefault: true
                    }
                };
                t = this._getIncontextSelectedPredicateValue("ds6w:identifier");
                if (UWA.is(t, "array") && t.length > 0) {
                    s.options.defaultValue = t
                }
                u.push(s)
            }
            if (b.isAVisiblePredicate("ds6w:modified") && this._isIncontextBasicAvailable("ds6w:modified")) {
                var r = {
                    dispValue: o.get("adv_search.modified"),
                    sixw: this.CORE_BASIC_MODIFIED,
                    type: "date",
                    options: {
                        showByDefault: true
                    }
                };
                t = this._getIncontextSelectedPredicateValue("ds6w:modified");
                if (UWA.is(t, "array") && t.length > 0) {
                    r.options.defaultValue = t[0]
                }
                u.push(r)
            }
            return u
        },
        _getExtendedBasics: function() {
            var q = [];
            var u;
            if (b.isAVisiblePredicate("ds6w:description") && this._isIncontextBasicAvailable("ds6w:description")) {
                var s = {
                    dispValue: o.get("adv_search.description"),
                    sixw: this.EXT_BASIC_DESCRIPTION,
                    type: "string",
                    options: {
                        showByDefault: false
                    }
                };
                u = this._getIncontextSelectedPredicateValue("ds6w:description");
                if (UWA.is(u, "array") && u.length > 0) {
                    s.options.defaultValue = u
                }
                q.push(s)
            }
            if (b.isAVisiblePredicate("ds6w:responsible") && this._isIncontextBasicAvailable("ds6w:responsible")) {
                var t = {
                    dispValue: o.get("adv_search.responsible"),
                    sixw: this.EXT_BASIC_RESPONSIBLE,
                    type: "string",
                    options: {
                        showByDefault: false
                    }
                };
                u = this._getIncontextSelectedPredicateValue("ds6w:responsible");
                if (UWA.is(u, "array") && u.length > 0) {
                    t.options.defaultValue = u
                }
                q.push(t)
            }
            if (b.isAVisiblePredicate("ds6w:created") && this._isIncontextBasicAvailable("ds6w:created")) {
                var r = {
                    dispValue: o.get("adv_search.created"),
                    sixw: this.EXT_BASIC_CREATED,
                    type: "date",
                    options: {
                        showByDefault: false
                    }
                };
                u = this._getIncontextSelectedPredicateValue("ds6w:created");
                if (UWA.is(u, "array") && u.length > 0) {
                    r.options.defaultValue = u[0]
                }
                q.push(r)
            }
            return q
        },
        _getIncontextCommonPredicates: function(w) {
            var t = this;
            var v;
            var r;
            var s = this._InContextAdvancedSearch();
            if (s) {
                v = s.common_predicates;
                r = s["ds6w:type"]
            }
            if (k.is(v, "array") && v.length > 0 && k.is(r, "array") && r.length > 0) {
                var u = {};
                v.forEach(function(x) {
                    u[x.uri] = x
                });
                var q = r[0].uri;
                p.loadRelevantPredicates(q, function(x) {
                    t._loadPLMDictionaryAndRun(function() {
                        var A = {};
                        x.vocabularyPredicateInfo.forEach(function(B) {
                            if (u[B.uri]) {
                                A[B.uri] = B;
                                A[B.uri].showByDefault = u[B.uri].showByDefault
                            }
                        });
                        var z = [];
                        v.forEach(function(B) {
                            if (A[B.uri]) {
                                z.push(A[B.uri])
                            }
                        });
                        var y = t._prepareRelevantPredicates(z, true, undefined, undefined, false);
                        w.call(undefined, y)
                    })
                })
            }
        },
        _loadPLMDictionaryAndRun: function(q) {
            a.loadDictionary().then(function() {
                q.call()
            })
        },
        _filterIncontextSources: function(q) {
            var t = this.getOption("collection");
            if (t) {
                var s = t._ctx_options;
                if (s) {
                    var r = s.source;
                    if (r) {
                        q = q.filter(function(u) {
                            return r.indexOf(u) >= 0
                        })
                    }
                }
            }
            return q
        },
        _InContextAdvancedSearch: function() {
            var q = this.getOption("collection");
            if (q && q._ctx_options) {
                return q._ctx_options.advanced_search
            }
        },
        showInContextExtension: function() {
            var q = this._InContextAdvancedSearch();
            if (q && q.showExtension === false) {
                return false
            }
            return true
        },
        getIncontextTypeList: function(t) {
            var r = this._InContextAdvancedSearch();
            if (r) {
                var q = r["ds6w:type"];
                if (q) {
                    var s = t.filter(function(v) {
                        for (var u = 0; u < q.length; u++) {
                            if (q[u].uri == v.uri) {
                                return true
                            }
                        }
                    });
                    return s
                }
            }
            return t
        },
        getIncontextSubtypeList: function(x, q) {
            var v = this._InContextAdvancedSearch();
            if (v) {
                var s = v["ds6w:type"];
                var w;
                if (s && x) {
                    for (var t = 0; t < s.length; t++) {
                        if (s[t].uri == x) {
                            w = s[t].interfaces;
                            break
                        }
                    }
                    if (w) {
                        var r = {};
                        w.forEach(function(y) {
                            r[y.name] = y
                        });
                        var u = q.filter(function(y) {
                            if (r[y.name]) {
                                return true
                            }
                        });
                        return u
                    } else {
                        return q
                    }
                }
            }
            return q
        },
        getIncontextPredicateList: function(w, v) {
            var u = this._InContextAdvancedSearch();
            if (u) {
                var s = u["ds6w:type"];
                var q;
                if (s && w) {
                    for (var t = 0; t < s.length; t++) {
                        if (s[t].uri == w) {
                            q = s[t].predicates
                        }
                    }
                    if (q) {
                        if (k.is(q, "array")) {
                            var r = [];
                            q.forEach(function(y) {
                                for (var x = 0; x < v.length; x++) {
                                    if (v[x].uri == y.uri) {
                                        r.push(v[x]);
                                        break
                                    }
                                }
                            });
                            return r
                        }
                    } else {
                        return v
                    }
                }
            }
            return v
        },
        _isIncontextBasicAvailable: function(r) {
            var q = true;
            var t = this._InContextAdvancedSearch();
            if (t) {
                var s = t.basic_predicates;
                if (s) {
                    q = s.some(function(u) {
                        return u.uri == r
                    })
                }
            }
            return q
        },
        _getIncontextSelectedPredicateValue: function(r) {
            var q = this._InContextAdvancedSearch();
            if (q && q.selection) {
                return q.selection[r]
            }
        },
        _prepareTypePredicatesFromCusto: function(r) {
            var w;
            var v = r.toAllowEdit;
            var t = r.vocabId;
            var u = this;
            if (UWA.is(t)) {
                var q = [];
                var s = {
                    vocabId: t
                };
                s.onComplete = function(B) {
                    if (UWA.is(B)) {
                        var E = e.getOption("SEARCH_INSTANCES");
                        for (var x = 0; x < B.length; x++) {
                            var z = B[x].nlsName;
                            var y = B[x].name;
                            var A = B[x].uri;
                            if (UWA.is(E) && E === true) {
                                A = B[x].uri + ":" + B[x].type
                            }
                            if (!UWA.is(z)) {
                                z = o.get("adv_search.rdfclass." + B[x].uri)
                            }
                            var C = {
                                value: A,
                                label: z
                            };
                            if ((k.is(r) && k.is(r.options) && k.is(r.options.adv_search_field) && k.is(r.options.adv_search_field, "string")) || (k.is(u._adv_search_field) && k.is(u._adv_search_field, "string"))) {
                                if ((u._adv_search_field == y) || (r.adv_search_field == y)) {
                                    C.predefined = true
                                }
                            }
                            q.push(C)
                        }
                        var D = {
                            dispValue: o.get("adv_search.type"),
                            sixw: u.CORE_BASIC_TYPE,
                            type: v ? "string" : "enum",
                            multiSelect: true,
                            options: {
                                multiSelect: true,
                                disabled: q.length ? false : (v ? false : true),
                                placeholder: q.length ? o.get("adv_search.type.message") : o.get("adv_search.type.noTypeMessage"),
                                noResultsMessage: o.get("adv_search.type.noTypeMessage"),
                                onCriterionSelectEvent: true,
                                allowFreeInput: false,
                                showSuggestsOnFocus: true,
                                datasets: {
                                    name: "Types",
                                    items: q
                                },
                                showByDefault: true
                            }
                        };
                        if (UWA.is(r) && UWA.is(r.onComplete) && UWA.is(r.onComplete, "function")) {
                            r.onComplete.call(u, D)
                        }
                        u._dataSetsForType = D
                    }
                };
                s.onFailure = function() {
                    if (UWA.is(r) && UWA.is(r.onFailure) && UWA.is(r.onFailure, "function")) {
                        r.onFailure.call(u)
                    }
                };
                l.getAdvancedSearchCustoTypeList(t, w, s)
            }
            return null
        }
    });
    return g
});
define("DS/SNResultUX/views/SearchRespThumbnailGridView", ["DS/SNResultUX/views/SearchGridView", "UWA/Core", "DS/SNInfraUX/SearchSettings"], function(c, a, b) {
    var d = c.extend({
        className: "RespThumbnailGridView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "RespThumbnailGridView"
        },
        bShowTooltip: false,
        _bigPicList: [],
        _picCheckedList: [],
        init: function(e) {
            this._parent(e);
            this.bShowTooltip = a.is(b.getOption("showTooltip")) ? b.getOption("showTooltip") : false;
            this.neverCheckbox = a.is(b.getOption("neverCheckbox")) ? b.getOption("neverCheckbox") : false;
            this.neverAction = a.is(b.getOption("neverAction")) ? b.getOption("neverAction") : false
        },
        onSearch: function(e) {
            this._parent(e);
            var f = this
        },
        getMinNumberModel: function(f, e) {
            f = f || this._rowMaxNumber;
            e = e || this._columnsMaxNumber;
            return f * e
        },
        setup: function(e) {
            this._parent(e);
            var f = this;
            this.listenTo(this.collection, {
                onAdd: function() {},
                onRemove: function() {},
                onSort: function() {},
                onAnyEvent: function() {},
                onReset: function() {},
                onSync: function() {}
            })
        },
        destroy: function() {
            this._parent()
        },
        _updatePictureBackgroundSizeOnCell: function(f, e) {
            if (a.is(f) && a.is(f.setPictureBackgroundSize, "function")) {
                f.setPictureBackgroundSize(e)
            }
        },
        _onPostCellRequest: function(k) {
            var i = this;
            var j = k.cellView;
            var f = this._bigPicList.indexOf(k.virtualCellID) !== -1;
            if (f) {
                i._updatePictureBackgroundSizeOnCell(j, "contain")
            } else {
                i._updatePictureBackgroundSizeOnCell(j, "auto")
            }
            var l = this._picCheckedList.indexOf(k.virtualCellID) !== -1;
            var e = window.getComputedStyle(j.contentView.elements.picture);
            if (!l && e.backgroundImage) {
                var g = new Image();
                g.onload = function() {
                    var m = g.height;
                    var n = g.width;
                    if (n > 198 || m > 148) {
                        i._updatePictureBackgroundSizeOnCell(j, "contain");
                        i._bigPicList.push(k.virtualCellID)
                    } else {
                        i._updatePictureBackgroundSizeOnCell(j, "auto")
                    }
                    i._picCheckedList.push(k.virtualCellID)
                };
                var h = e.backgroundImage.replace("url(", "").replace(")", "").replace(/\"/gi, "");
                g.src = h
            }
        },
        render: function() {
            this.log("RespThumbnailGridView render");
            var e = this;
            require(["DS/CollectionView/ResponsiveThumbnailsCollectionView"], function(h) {
                var f = e.getOptionCommon();
                f.height = "inherit";
                f.useDragAndDrop = true;
                f.displayedOptionalCellProperties = ["contextualMenu", "description"];
                var g = e._canMultiSelect;
                f.selectionBehavior = {
                    canMultiSelect: g,
                    enableShiftSelection: g,
                };
                e.view = new h(f);
                e.view.onCellDoubleClick(function(i) {
                    e.onItemDblClick(i.cellModel)
                });
                e.view.onContextualEvent = f.onContextualEvent;
                e.view.displayTitleTooltip = e.bShowTooltip;
                if (e.neverCheckbox === true) {
                    e.view.visibilityFlag = false
                }
                e.view.getContent().inject(e.container);
                e._model.search_multiselMode && e.toggleMultiSelMode(true);
                e.view.onInfiniteScroll(function(i) {
                    e.onInfiniteScrollAsync(i, function() {
                        e.view.infiniteScrollProcessDone()
                    })
                });
                e.view.onEndResizeOrOnReadyModelRequest && e.view.onEndResizeOrOnReadyModelRequest(function(i) {
                    e.onResizeOrFirstLoaded(i, function() {
                        e.view.EndResizeOrOnReadyModelRequestDone()
                    })
                });
                e._afterRender();
                e.onSearch()
            });
            return this
        }
    });
    return d
});
define("DS/SNResultUX/views/SearchThumbnailGridView", ["DS/SNResultUX/views/SearchGridView", "UWA/Core", "DS/SNInfraUX/SearchSettings"], function(d, b, c) {
    var a = d.extend({
        className: "ThumbnailGridView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "ThumbnailGridView"
        },
        bShowTooltip: false,
        _bigPicList: [],
        _picCheckedList: [],
        init: function(e) {
            this._parent(e);
            this.bShowTooltip = b.is(c.getOption("showTooltip")) ? c.getOption("showTooltip") : false;
            this.neverCheckbox = b.is(c.getOption("neverCheckbox")) ? c.getOption("neverCheckbox") : false;
            this.neverAction = b.is(c.getOption("neverAction")) ? c.getOption("neverAction") : false
        },
        onSearch: function(e) {
            this._parent(e);
            var f = this
        },
        getMinNumberModel: function(f, e) {
            f = f || this._rowMaxNumber;
            e = e || this._columnsMaxNumber;
            return f * e
        },
        setup: function(e) {
            this._parent(e);
            var f = this;
            this.listenTo(this.collection, {
                onAdd: function() {},
                onRemove: function() {},
                onSort: function() {},
                onAnyEvent: function() {},
                onReset: function() {
                    f._bigPicList = [];
                    f._picCheckedList = []
                },
                onSync: function() {}
            })
        },
        destroy: function() {
            this._parent()
        },
        _onPostCellRequest: function(k) {
            var i = this;
            var f = this._bigPicList.indexOf(k.virtualCellID) !== -1;
            if (f) {
                k.cellView.setPictureBackgroundSize("contain")
            } else {
                k.cellView.setPictureBackgroundSize("auto")
            }
            var l = this._picCheckedList.indexOf(k.virtualCellID) !== -1;
            var e = window.getComputedStyle(k.cellView._view.elements.picture);
            var j = k.cellView;
            if (!l && e.backgroundImage) {
                var g = new Image();
                g.onload = function() {
                    var m = g.height;
                    var n = g.width;
                    if (n > 198 || m > 148) {
                        j.setPictureBackgroundSize("contain");
                        i._bigPicList.push(k.virtualCellID)
                    } else {
                        j.setPictureBackgroundSize("auto")
                    }
                    i._picCheckedList.push(k.virtualCellID)
                };
                var h = e.backgroundImage.replace("url(", "").replace(")", "").replace(/\"/gi, "");
                g.src = h
            }
        },
        render: function() {
            this.log("ThumbnailGridView render");
            var e = this;
            require(["DS/Tree/ThumbnailGridView"], function(g) {
                var f = e.getOptionCommon();
                e.view = new g(f);
                e.view.setCheckboxVisibilityFlag("atCellHover");
                if (e.neverCheckbox === true) {
                    e.view.setCheckboxVisibilityFlag("never")
                }
                e.view.setAnimationOnCartoucheOver(true);
                e.view.setTitleDisplayedOnTwoLines && e.view.setTitleDisplayedOnTwoLines(true);
                e.view.options.shouldDisplayTooltipFlag = e.bShowTooltip;
                e.view.onGridViewCellDoubleClick(function(h) {
                    e.onItemDblClick(h)
                });
                e.view.inject(e.container);
                e._model.search_multiselMode && e.toggleMultiSelMode(true);
                e.view.onInfiniteScrollAsync(function(h) {
                    e.onInfiniteScrollAsync(h, function() {
                        e.view.infiniteScrollAsyncProcessDone()
                    })
                });
                e.view.onEndResizeOrOnReadyModelRequestAsync && e.view.onEndResizeOrOnReadyModelRequestAsync(function(h) {
                    e.onResizeOrFirstLoaded(h, function() {
                        e.view.EndResizeOrOnReadyModelRequestAsyncDone()
                    })
                });
                e._afterRender();
                e.onSearch()
            });
            return this
        }
    });
    return a
});
define("DS/SNResultUX/views/SearchRespLargeTileGridView", ["DS/SNResultUX/views/SearchGridView", "UWA/Core", "DS/SNInfraUX/SearchSettings"], function(d, b, c) {
    var a = d.extend({
        className: "RespLargeTileGridView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "RespLargeTileGridView"
        },
        bShowTooltip: false,
        init: function(e) {
            this._parent(e);
            this.bShowTooltip = b.is(c.getOption("showTooltip")) ? c.getOption("showTooltip") : false;
            this.neverCheckbox = b.is(c.getOption("neverCheckbox")) ? c.getOption("neverCheckbox") : false;
            this.neverAction = b.is(c.getOption("neverAction")) ? c.getOption("neverAction") : false
        },
        onSearch: function(e) {
            this._parent(e);
            var f = this
        },
        getMinNumberModel: function(f, e) {
            f = f || this._rowMaxNumber;
            return f
        },
        setup: function(e) {
            this._parent(e);
            var f = this;
            this.listenTo(this.collection, {
                onAdd: function() {},
                onRemove: function() {},
                onSort: function() {},
                onAnyEvent: function() {},
                onReset: function() {},
                onSync: function() {}
            })
        },
        destroy: function() {
            this._parent()
        },
        render: function() {
            this.log("RespLargeTileGridView render");
            var e = this;
            require(["DS/CollectionView/ResponsiveLargeTilesCollectionView"], function(h) {
                var f = e.getOptionCommon();
                f.height = "inherit";
                f.useDragAndDrop = true;
                f.displayedOptionalCellProperties = ["contextualMenu", "description"];
                e.view = new h(f);
                var g = e._canMultiSelect;
                e.view.selectionBehavior.canMultiSelect = g;
                e.view.selectionBehavior.canInteractiveMultiselectWithCheckboxClick = g;
                e.view.selectionBehavior.enableShiftSelection = g;
                e.view.selectionBehavior.enableFeedbackForActiveCell = g;
                if (e.neverCheckbox === true) {
                    e.view.visibilityFlag = false
                }
                e.view.onCellDoubleClick(function(i) {
                    e.onItemDblClick(i.cellModel)
                });
                e.view.onContextualEvent = f.onContextualEvent;
                e.view.displayTitleTooltip = e.bShowTooltip;
                e.view.getContent().inject(e.container);
                e._model.search_multiselMode && e.toggleMultiSelMode(true);
                e.view.onInfiniteScroll(function(i) {
                    e.onInfiniteScrollAsync(i, function() {
                        e.view.infiniteScrollProcessDone()
                    })
                });
                e.view.onEndResizeOrOnReadyModelRequest && e.view.onEndResizeOrOnReadyModelRequest(function(i) {
                    e.onResizeOrFirstLoaded(i, function() {
                        e.view.EndResizeOrOnReadyModelRequestDone()
                    })
                });
                e._afterRender();
                e.onSearch()
            });
            return this
        }
    });
    return a
});
define("DS/SNResultUX/utils/SearchActions", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class", "UWA/Utils/Client", "UWA/Class/Debug", "UWA/Class/Events", "DS/MessageBus/MessageBus", "DS/WAFData/WAFData", "DS/SNResultUX/collections/SearchCollection", "require", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/PredicatesNLS", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/utils/SearchCustoServices", "DS/WebappsUtils/WebappsUtils", "DS/UIKIT/Alert", "DS/UIKIT/Popover", "DS/UIKIT/Autocomplete", "DS/UIKIT/Input/Text", "DS/UIKIT/Input/Button", "DS/UIKIT/Tooltip", "DS/UIKIT/Input/Select", "DS/Controls/Toggle", "DS/UIKIT/SuperModal", "DS/UIKIT/Mask", "DS/Controls/Button", "DS/Windows/Dialog", "DS/Controls/Tab", "DS/W3DXComponents/Collections/ActionsCollection", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNResultUX/utils/SearchViewOptions"], function(v, C, k, m, t, d, s, i, I, J, u, c, G, z, a, D, x, l, o, A, j, r, p, f, H, b, w, y, g, h, e, F, n) {
    var B = F.get("loading");
    var E = function(L) {
        if (isNaN(L)) {
            return false
        }
        var K = parseFloat(L);
        return (K | 0) === K
    };
    var q = k.extend(d, t, {
        name: "DS_SNResultUX_utils_SearchActions",
        attributeToFilterForExport: ["id", "type_icon_url", "preview_url", "actions", "resourceid", "resourceid_tagger", "actions"],
        globalActions: ["exportToCmd", "print", "save_search", "refresh_search", "kpi_pcs_action", "Grid_Custo", "Preview", "InfoPanel", "Pin"],
        current_collection: null,
        current_selected: null,
        displayMode: null,
        skeleton: null,
        snSkeletonMgt: null,
        searchContentSetDivContainer: null,
        maskedElement: null,
        actionCollectionUsedBySkeleton: null,
        actionCollectionOriginal: null,
        actionInitDone: false,
        init: function(K) {
            this.setDebugMode(u.getDebugMode());
            if (v.is(K) && v.is(K.SNSkeleton)) {
                this.snSkeletonMgt = K.SNSkeleton
            }
        },
        destroy: function() {
            if (this.popover) {
                this.popover.hide()
            }
            this.current_collection = null;
            this.current_selected = null;
            this.displayMode = null;
            this.skeleton = null;
            this.snSkeletonMgt = null;
            this.searchContentSetDivContainer = null;
            this.actionCollectionUsedBySkeleton = null;
            this.actionCollectionOriginal = null
        },
        setCollection: function(K) {
            this.current_collection = K
        },
        setSelected: function(K) {
            this.current_selected = K
        },
        setSkeleton: function(K) {
            this.skeleton = K
        },
        setSearchContentSetDivContainer: function(K) {
            this.searchContentSetDivContainer = K
        },
        setEmptyViewMessage: function(K) {
            B = K
        },
        getEmptyViewMessage: function() {
            return B
        },
        setDisplayMode: function(L) {
            var K = this;
            this.displayMode = L;
            if (!v.is(this.searchContentSetDivContainer)) {
                return
            }
            if (!v.is(this.actionCollectionOriginal)) {
                return
            }
            var M = "";
            if (v.is(K.current_collection) && v.is(K.current_collection.search_ressources) && v.is(K.current_collection.search_ressources.getActiveTenant, "function")) {
                M = K.current_collection.search_ressources.getActiveTenant()
            }
            c.getGrantedRoles(function(S) {
                K.log("Roles:" + S);
                K.actionCollectionUsedBySkeleton.reset(K.actionCollectionOriginal.toArray());
                var Z = v.extendElement(K.searchContentSetDivContainer).getElements(".content-set-actions");
                if (v.is(Z) && Z.length > 0) {
                    for (var Q = K.actionCollectionUsedBySkeleton.size() - 1; 0 <= Q; Q--) {
                        var W = K.actionCollectionUsedBySkeleton.at(Q);
                        var R = W.get("icon");
                        var P = W.get("displayMode");
                        var O = W.get("id");
                        var ab = W.get("role");
                        var Y = true;
                        if (!v.is(P, "string")) {
                            Y = true
                        } else {
                            if (P === "AllView") {
                                Y = true
                            } else {
                                if (P.search(L) >= 0) {
                                    Y = true
                                } else {
                                    Y = false
                                }
                            }
                        }
                        if (Y && v.is(S, "array") && S.length > 0) {
                            if (v.is(ab, "array") && 0 < ab.length) {
                                Y = false;
                                var U = 0,
                                    aa = ab.length;
                                for (U = 0; U < aa; U++) {
                                    if (S.some(function(ac) {
                                            if (ac.id == ab[U]) {
                                                if (v.is(ac.platforms)) {
                                                    return ac.platforms.some(function(ad) {
                                                        return ad === M
                                                    })
                                                }
                                            } else {
                                                if (ac.id === "InternalDS") {
                                                    return true
                                                }
                                            }
                                        })) {
                                        Y = true
                                    }
                                }
                            } else {
                                if (v.is(ab, "string") && ab.length > 0) {
                                    Y = S.some(function(ac) {
                                        if (ac.id == ab) {
                                            if (v.is(ac.platforms)) {
                                                return ac.platforms.some(function(ad) {
                                                    return ad === M
                                                })
                                            }
                                        } else {
                                            if (ac.id === "InternalDS") {
                                                return true
                                            }
                                        }
                                    })
                                }
                            }
                        }
                        if (!Y) {
                            K.actionCollectionUsedBySkeleton.remove(W)
                        }
                        var T = v.extendElement(Z[0]).getElements(".fonticon-" + R);
                        if (v.is(T) && T.length > 0) {
                            var V = T[0];
                            if (v.is(V) && v.is(V.getParent()) && v.is(V.getParent().getParent())) {
                                var X = V.getParent().getParent();
                                if (!K.actionInitDone) {
                                    var N = O;
                                    N = F.get("actions." + O + ".toolTip");
                                    new p({
                                        position: "bottom",
                                        target: X,
                                        body: N
                                    })
                                }
                            }
                        }
                    }
                    K.actionInitDone = true
                }
            })
        },
        _shouldBeAvailableIfInContextMode: function(N, M) {
            var O = true;
            if (UWA.is(N)) {
                var L = N.in_apps_search;
                if (UWA.is(L)) {
                    if (UWA.is(L.UXOptions, "object")) {
                        if (UWA.is(L.UXOptions.globalToolbarActions, "object")) {
                            var K = L.UXOptions.globalToolbarActions[M];
                            if (UWA.is(K, "boolean")) {
                                O = K
                            }
                        }
                    } else {
                        if (M === "columnCusto") {
                            if (UWA.is(L.columnCustoAvailable)) {
                                O = L.columnCustoAvailable
                            }
                        }
                    }
                }
            }
            return O
        },
        getGlobalActions: function(L) {
            var N = this;

            function O(Q) {
                return N._shouldBeAvailableIfInContextMode(L, Q)
            }
            this.actionCollectionUsedBySkeleton = new e();
            this.actionCollectionUsedBySkeleton["data-rec-id"] = true;
            if (G.getItem("integratedSearch") === true) {
                var P = true;
                if (window && window.clntlang) {
                    P = false
                } else {
                    if (u.getOption("search_web_in_win") === true) {
                        P = false
                    } else {
                        if (v.is(L) && v.is(L.pinToDashboard) && L.pinToDashboard === false) {
                            P = false
                        }
                    }
                }
                if (P === true && O("pinToDashboard")) {
                    this.actionCollectionUsedBySkeleton.add({
                        id: "Pin",
                        title: F.get("actions.Pin.title"),
                        icon: "publish",
                        overflow: false,
                        displayMode: "AllView",
                        attributes: {
                            "data-rec-id": "Pin"
                        }
                    })
                }
            }
            if (a.getpreviewPanel(L) === true && O("preview")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "Preview",
                    title: F.get("actions.Preview.title"),
                    icon: "eye",
                    overflow: false,
                    displayMode: "AllView",
                    attributes: {
                        "data-rec-id": "Preview"
                    }
                })
            }
            if (a.getinformationPanel() === true && O("informations")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "InfoPanel",
                    title: F.get("actions.InfoPanel.title"),
                    icon: "info",
                    overflow: false,
                    displayMode: "AllView",
                    attributes: {
                        "data-rec-id": "InfoPanel"
                    }
                })
            }
            this.actionCollectionUsedBySkeleton.add({
                id: "Grid_Custo",
                title: F.get("actions.Grid_Custo.title"),
                icon: "cog",
                overflow: false,
                displayMode: "AllView",
                attributes: {
                    "data-rec-id": "Grid_Custo"
                }
            });
            if (u.getOption("global_action_save_search") && O("saveAsFavorite")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "save_search",
                    title: F.get("actions.save_search.title"),
                    icon: "star",
                    overflow: false,
                    displayMode: "AllView",
                    role: ["CSV", "InternalDS"],
                    attributes: {
                        "data-rec-id": "save_search"
                    }
                })
            }
            if (u.getOption("global_action_refresh_search") && (u.getOption("search_web_in_win")) || G.getItem("integratedSearch")) {
                var M = true;
                if (G.getItem("integratedSearch")) {
                    if (v.is(L) && v.is(L.pinToDashboard) && L.pinToDashboard === false) {
                        M = false
                    }
                }
                if (M === true) {
                    this.actionCollectionUsedBySkeleton.add({
                        id: "refresh_search",
                        title: F.get("actions.refresh_search.title"),
                        icon: "cw",
                        overflow: false,
                        displayMode: "AllView",
                        attributes: {
                            "data-rec-id": "refresh_search"
                        }
                    })
                }
            }
            if ((u.getOption("global_action_export_csv") || u.getOption("global_action_export_xml")) && O("export")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "exportToCmd",
                    title: F.get("actions.exportToCmd.title"),
                    icon: "export",
                    overflow: false,
                    displayMode: "AllView",
                    attributes: {
                        "data-rec-id": "exportToCmd"
                    }
                })
            }
            if ((u.getOption("global_action_default_print") || u.getOption("global_action_print_xsl")) && O("print")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "print",
                    title: F.get("actions.print.title"),
                    icon: "print",
                    overflow: false,
                    displayMode: "AllView",
                    attributes: {
                        "data-rec-id": "print"
                    }
                })
            }
            if (u.getOption("search_web_in_win")) {
                this.actionCollectionUsedBySkeleton.add({
                    id: "BI_Activated",
                    title: F.get("actions.BI_Activated.title"),
                    icon: "chart-pie",
                    overflow: false,
                    displayMode: "AllView",
                    attributes: {
                        "data-rec-id": "BI_Activated"
                    }
                })
            }
            if (u.getOption("no_kpi_pcs")) {
                this.log("PCS view deactivated")
            } else {
                this.actionCollectionUsedBySkeleton.add({
                    id: "kpi_pcs_action",
                    title: "PCS",
                    icon: "chart-line",
                    overflow: false,
                    callback: function() {
                        require(["DS/SNResultUX/views/PCSView"], function(Q) {
                            var S = v.extendElement(document.body).getElement(".onesearch_results"),
                                R = v.extendElement(S).getElement(".onesearch_skeleton");
                            R.setStyle("display", "none");
                            new Q({
                                renderTo: S,
                                events: {
                                    onClose: function() {
                                        R.setStyle("display", "block")
                                    }
                                }
                            })
                        })
                    },
                    attributes: {
                        "data-rec-id": "kpi_pcs_action"
                    }
                })
            }
            var K = {
                collection: this.actionCollectionUsedBySkeleton,
                events: {
                    onActionClick: function(S, Q, R) {
                        this.dropDown && this.dropDown.hide();
                        L.actionItem = Q;
                        N.onActionClick(L)
                    },
                    onActionClickDotted: function() {
                        N.popover && N.popover.destroy();
                        N.popover = null
                    }
                }
            };
            this.actionCollectionOriginal = this.actionCollectionUsedBySkeleton.clone();
            this.actionCollectionDefault = new e(this.actionCollectionUsedBySkeleton.toJSON());
            return K
        },
        isGlobalActions: function(M) {
            var L = this.globalActions.length;
            var K = 0;
            for (K = 0; K < L; K++) {
                if (M === this.globalActions[K]) {
                    return true
                }
            }
            return this.isNonDefaultGlobalAction(M)
        },
        updateGlobalActions: function() {
            if (!v.is(this.actionCollectionOriginal)) {
                return
            }
            var K = new e(this.actionCollectionDefault.toJSON());
            this._addNonDefaultGlobalActions(K);
            this.actionCollectionUsedBySkeleton.reset();
            this.actionCollectionUsedBySkeleton.add(K.toArray());
            this.actionCollectionOriginal = this.actionCollectionUsedBySkeleton.clone();
            K = null;
            if (v.is(this.displayMode)) {
                this.setDisplayMode(this.displayMode)
            }
        },
        _addNonDefaultGlobalActions: function(L) {
            var K = this._getNonDefaultGlobalActions();
            if (v.is(K)) {
                K.forEach(function(N) {
                    var M = {
                        id: N.id,
                        title: N.title,
                        icon: N.icon,
                        overflow: N.overflow,
                        displayMode: "AllView"
                    };
                    if (v.is(N.displayMode)) {
                        M.displayMode = N.displayMode
                    }
                    L.add(M)
                })
            }
        },
        isNonDefaultGlobalAction: function(M) {
            var K = this._getNonDefaultGlobalActions();
            if (v.is(K)) {
                var L = K.some(function(N) {
                    if (M === N.id) {
                        return true
                    }
                });
                return L
            }
            return false
        },
        _runNonDefaultGlobalAction: function(M, O) {
            var N = this;
            if (!v.is(M)) {
                throw ("E_INVALIDARG: bad option given to _runNonDefaultGlobalAction method !")
            }
            var K = this._getNonDefaultGlobalActions();
            if (v.is(K)) {
                var L = K.some(function(P) {
                    if (O === P.id) {
                        var Q = P.command_data;
                        N.dispatchEvent("onNonDefaultGlobalAction", {
                            id: O,
                            command_data: Q
                        });
                        return true
                    }
                });
                return L
            }
            return false
        },
        _getNonDefaultGlobalActions: function() {
            var K = n.getViewData();
            if (v.is(K) && v.is(K.global_actions)) {
                return K.global_actions.actions
            }
        },
        onActionClick: function(L) {
            var N = this;
            if (v.is(N.popover)) {
                N.popover.destroy();
                N.popover = null
            }
            if (!v.is(L) || !v.is(L.actionItem)) {
                throw ("E_INVALIDARG: bad options given to onActionClick method !")
            }
            var M = L.actionItem,
                K = this.current_collection,
                O = M.model.get("id");
            switch (O) {
                case "exportToCmd":
                    this.log("exportToCmd in actionbar");
                    N.exportToCmd(L);
                    break;
                case "print":
                    this.log("print in actionbar");
                    N.print(L);
                    break;
                case "save_search":
                    this.log("save search in actionbar");
                    N.saveSearchUI(M, K.service_parameters);
                    break;
                case "refresh_search":
                    this.log("refresh search pressed in global actionbar");
                    N.dispatchEvent("onRefreshResultRequest");
                    break;
                case "kpi_pcs_action":
                    M.model.get("callback").call(null);
                    break;
                case "BI_Activated":
                    this.log("BI is Activated");
                    this.current_collection._searchcom_socket.dispatchEvent("onDispatchToWin", {
                        notif_name: "BI_Activated",
                        notif_parameters: ""
                    }, "search_web_in_win");
                    break;
                case "Grid_Custo":
                    this.log("Grid_Custo");
                    N.searchSettingsUI(M);
                    break;
                case "InfoPanel":
                    this.log("InfoPanel");
                    N.informationPanel(M);
                    break;
                case "Preview":
                    this.log("Preview");
                    N.PreviewPanel(M);
                    break;
                case "Pin":
                    this.log("Pin");
                    N.PinToDashboard(M);
                    break;
                default:
                    if (!this._runNonDefaultGlobalAction(L, O)) {
                        this.log("multisel pressed in global actionbar");
                        N.multisel(L)
                    }
                    break
            }
        },
        downloadFile: function(S, T, N) {
            if (!v.is(S)) {
                return
            }
            if (!v.is(N)) {
                return
            }
            var L = document,
                P = L.createElement("a");
            var R = N;
            N = N || "application/octet-stream";
            N += ";charset=UTF-8,";
            var Q;
            if (!T) {
                var M = new Date();
                T = "CSV Export - " + M.getFullYear() + (M.getMonth() + 1) + M.getDate() + M.getHours() + M.getMinutes() + M.getSeconds() + ".csv"
            }
            var O = "\ufeff";
            if (navigator.msSaveBlob && !a.odtMode) {
                return navigator.msSaveBlob(new Blob([O + S], {
                    type: N
                }), T)
            }
            if ("download" in P) {
                var K = new Blob([O + S], {
                    type: N
                });
                Q = URL.createObjectURL(K);
                P.setAttribute("download", T)
            } else {
                if (m.Engine.safari && m.Platform.ios) {
                    var K = new Blob([O + S], {
                        type: R
                    });
                    Q = (window.URL ? URL : window.webkitURL).createObjectURL(K)
                } else {
                    Q = "data:" + N + O + encodeURIComponent(S)
                }
                P.setAttribute("target", "_blank");
                P.setAttribute("download", T)
            }
            P.href = Q;
            P.setAttribute("style", "display:none;");
            L.body.appendChild(P);
            setTimeout(function() {
                if (P.click) {
                    P.click()
                } else {
                    if (document.createEvent) {
                        var U = document.createEvent("MouseEvents");
                        U.initEvent("click", true, true);
                        P.dispatchEvent(U)
                    }
                }
                L.body.removeChild(P)
            }, 100)
        },
        exportToCmd: function(L, K) {
            if (!v.is(L) || !v.is(L.actionItem)) {
                throw ("E_INVALIDARG: bad options given to exportToCmd method !")
            }
            var M = this;
            var N = {
                DoSelection: false,
                callback: this.exportToCmdCallback,
                exportToCmdCallback_options: L,
                exportToCmdCallback_cb: K,
                type: "action",
                subType: "export",
                context: M
            };
            if (u.getOption("select_all_export_print") && v.is(M.current_selected) && (M.current_selected.length === 0)) {
                this.snSkeletonMgt.fetchAll(N)
            } else {
                this.exportToCmdCallback(N)
            }
        },
        exportToCmdCallback: function(K) {
            console.log("exportToCmdCallback");
            var L = K.exportToCmdCallback_options.actionItem;
            var M = this;
            if (u.options.search_settings.global_action_export_csv && !u.options.search_settings.global_action_export_xml) {
                M.exportToCSV(K.exportToCmdCallback_options, K.exportToCmdCallback_cb);
                return
            } else {
                if (!u.options.search_settings.global_action_export_csv && u.options.search_settings.global_action_export_xml) {
                    M.exportToXML(K.exportToCmdCallback_options);
                    return
                } else {
                    console.warn("Not allowed to activate both export to CSV and export to XML options !!!");
                    return
                }
            }
        },
        _formatLocalDate: function() {
            var K = new Date(),
                N = -K.getTimezoneOffset(),
                L = N >= 0 ? "+" : "-",
                M = function(O) {
                    var P = Math.abs(Math.floor(O));
                    return (P < 10 ? "0" : "") + P
                };
            return K.getFullYear() + "-" + M(K.getMonth() + 1) + "-" + M(K.getDate()) + "T" + M(K.getHours()) + ":" + M(K.getMinutes()) + ":" + M(K.getSeconds()) + L + M(N / 60) + ":" + M(N % 60)
        },
        exportToCSV: function(L, K) {
            if (!v.is(L)) {
                throw ("E_INVALIDARG: bad options given to exportToCSV method !")
            }
            this.log("exportToCSV");
            var P = this;

            function Q(S) {
                var R = P.current_collection;
                var T;
                if (v.is(P.current_selected) && (P.current_selected.length > 0)) {
                    T = R._models.slice();
                    R._models = P.current_selected
                }
                P.downloadFile(O(S, R), "search_" + P._formatLocalDate().slice(0, 19) + ".csv", "text/csv");
                if (v.is(K)) {
                    K.call(this)
                }
                if (v.is(P.current_selected) && (P.current_selected.length > 0)) {
                    R._models = T
                }
            }

            function O(V, S) {
                var R = "";
                for (var U = 0, T = V.length; U < T; U++) {
                    if (P.attributeToFilterForExport.indexOf(V[U].dataIndex) === -1) {
                        if (m.Platform.ios) {
                            R = R + '"' + V[U].text + '";'
                        } else {
                            R = R + '"' + V[U].text + '",'
                        }
                    }
                }
                R = R + "\r\n";
                S.forEach(function(Y, X) {
                    for (var Z = 0, W = V.length; Z < W; Z++) {
                        if (P.attributeToFilterForExport.indexOf(V[Z].dataIndex) === -1) {
                            var aa = P._getValueWithMapping(V[Z].dataIndex, Y, L.itemViewOptions.mapping);
                            if (m.Platform.ios) {
                                R = R + '"' + aa + '";'
                            } else {
                                R = R + '"' + aa + '",'
                            }
                        }
                    }
                    R = R + "\r\n"
                });
                return R
            }

            function N() {
                var S = n.getDataGridViewHeaders();
                for (var R = 0; R < S.length; R++) {
                    if (v.is(S[R].text) && S[R].text.startsWith("ds6w")) {
                        S[R].text = z.getNLSValueForPredicate(S[R].dataIndex)
                    }
                }
                if (v.is(P.snSkeletonMgt) && v.is(P.snSkeletonMgt._myDatagridView) && v.is(P.snSkeletonMgt._myDatagridView._columns) && (Object.keys(P.snSkeletonMgt._myDatagridView._columns).length > 0)) {
                    S = P.snSkeletonMgt._myDatagridView._columns
                }
                Q(S)
            }
            var M = "ds6w";
            if (!z.isLoaded(M)) {
                z.loadVocabulary(M, N)
            } else {
                N.call(this)
            }
        },
        exportToXML: function(L, K) {},
        print: function(S, N) {
            this.log("print");
            var R = this;
            if (!v.is(S) || !v.is(S.actionItem)) {
                throw ("E_INVALIDARG: bad options given to print method !")
            }
            var P = S.actionItem,
                L = this.current_collection;
            var K;
            if (!v.is(L) || !v.is(L.totalCount) || isNaN(L.totalCount)) {
                throw ("Pb with searchCollection found for print method !")
            }
            if (v.is(R.current_selected) && (R.current_selected.length > 0)) {
                K = L._models.slice();
                L._models = R.current_selected
            }
            var O = L.totalCount;
            if (!v.is(L._models) || !v.is(L._models.length) || isNaN(L._models.length)) {
                throw ("No searchCollection._models found for print method !")
            }
            var Q = L._models.length;
            if (O !== Q) {
                console.warn("Not all results are displayed, must refresh the search result, TO DO !!!")
            }
            var M = {
                DoSelection: false,
                callback: this.printCallback,
                exportToCmdCallback_options: S,
                exportToCmdCallback_cb: N,
                type: "action",
                subType: "print",
                context: R
            };
            if (u.getOption("select_all_export_print") && v.is(R.current_selected) && (R.current_selected.length === 0)) {
                this.snSkeletonMgt.fetchAll(M)
            } else {
                this.printCallback(M)
            }
            if (v.is(R.current_selected) && (R.current_selected.length > 0)) {
                L._models = K
            }
        },
        printCallback: function(K) {
            console.log("printCallback");
            var L = this;
            if (u.options.search_settings.global_action_default_print && !u.options.search_settings.global_action_print_xsl) {
                this._defaultPrint(K.exportToCmdCallback_options, K.exportToCmdCallback_cb);
                return
            } else {
                if (!u.options.search_settings.global_action_default_print && u.options.search_settings.global_action_print_xsl) {
                    this.exportToXML(K.exportToCmdCallback_options, "SearchPrint.xsl");
                    return
                } else {
                    console.warn("Not allowed to activate both export to CSV and export to XML options !!!");
                    return
                }
            }
        },
        _printWindowOpen: function() {
            return (typeof this.printWindow !== "undefined" && null !== this.printWindow && this.printWindow.closed === false)
        },
        _defaultPrint: function(L, K) {
            if (!v.is(L)) {
                throw ("E_INVALIDARG: bad options given to _defaultPrint method !")
            }
            var O = this;

            function P(U) {
                var Q = O.current_collection,
                    T = null;
                var V;
                if (v.is(O.current_selected) && (O.current_selected.length > 0)) {
                    V = Q._models.slice();
                    Q._models = O.current_selected
                }
                if (v.is(O.snSkeletonMgt)) {
                    T = O.snSkeletonMgt.getTitle()
                }
                if (true === L.ODT && v.is(L.PrintWindow, "object")) {
                    O.myPrintWindow = L.PrintWindow
                }
                var R = "";
                if (O._printWindowOpen()) {
                    O.myPrintWindow.close()
                }
                var S = function() {
                    if (!(true === L.ODT && v.is(L.PrintWindow, "object"))) {
                        O.myPrintWindow = window.open("", "PrintWindow", "width=1024, height=768, scrollbars=yes")
                    }
                    if (typeof O.myPrintWindow === "undefined") {
                        this.log("Unable to open window !");
                        return
                    }
                    O.snSkeletonMgt.setPrintWindow(O.myPrintWindow);
                    R += "<html><head><title>Print Me</title></head><body>";
                    R += "<h1>" + T + "</h1>";
                    R += '<table style="border:1px solid black; border-collapse:collapse;"><thead><tr>';
                    for (var X = 0, W = U.length; X < W; X++) {
                        if (O.attributeToFilterForExport.indexOf(U[X].dataIndex) === -1) {
                            R += '<th  style="border:1px solid black; background-color:#A7C942; text-align:left; color:#FFFFFF; font-size:1.1em; padding-top:5px; paddingbottom:4px;"><div style="';
                            if (v.is(U[X].width) && E(U[X].width)) {
                                R += " width:" + U[X].width + "px; overflow-wrap: break-word"
                            }
                            R += '">' + U[X].text + "</div></th>"
                        }
                    }
                    R = R + "</tr></thead><tbody>";
                    Q.forEach(function(aa, Z) {
                        R = R + "<tr>";
                        for (var ab = 0, Y = U.length; ab < Y; ab++) {
                            if (O.attributeToFilterForExport.indexOf(U[ab].dataIndex) === -1) {
                                var ac = O._getValueWithMapping(U[ab].dataIndex, aa, L.itemViewOptions.mapping);
                                R = R + '<td style="border:1px solid black;"><div style="';
                                if (v.is(U[ab].width) && E(U[ab].width)) {
                                    R += " width:" + U[ab].width + "px; overflow: hidden"
                                }
                                R += '">' + ac + "</div></td>"
                            }
                        }
                        R = R + "</tr>"
                    });
                    R = R + "</tbody></table></body></html>";
                    if (!v.is(O.myPrintWindow)) {
                        O._displayAlert({
                            message: F.get("actions.print.window.popup.error"),
                            className: "primary"
                        })
                    } else {
                        O.myPrintWindow.document.write(R);
                        O.myPrintWindow.document.close();
                        O.myPrintWindow.focus();
                        if (!a.odtMode) {
                            O.myPrintWindow.print()
                        }
                        O.myPrintWindow.close()
                    }
                };
                setTimeout(S, 0);
                if (v.is(K)) {
                    K.call(this)
                }
                if (v.is(O.current_selected) && (O.current_selected.length > 0)) {
                    Q._models = V
                }
            }

            function N() {
                var R = n.getDataGridViewHeaders();
                for (var Q = 0; Q < R.length; Q++) {
                    if (v.is(R[Q].text) && R[Q].text.startsWith("ds6w")) {
                        R[Q].text = z.getNLSValueForPredicate(R[Q].dataIndex)
                    }
                }
                if (v.is(O.snSkeletonMgt) && v.is(O.snSkeletonMgt._myDatagridView) && v.is(O.snSkeletonMgt._myDatagridView._columns) && (Object.keys(O.snSkeletonMgt._myDatagridView._columns).length > 0)) {
                    R = O.snSkeletonMgt._myDatagridView._columns
                }
                P(R)
            }
            var M = "ds6w";
            if (!z.isLoaded(M)) {
                z.loadVocabulary(M, N)
            } else {
                N.call(this)
            }
        },
        informationPanel: function(K) {
            var L = this;
            L.dispatchEvent("onInformationPanelAction")
        },
        PreviewPanel: function(K) {
            var L = this;
            L.dispatchEvent("onPreviewPanelAction")
        },
        PinToDashboard: function(K) {
            var L = this;
            L.dispatchEvent("onPinToDashboardAction")
        },
        searchSettingsUI: function(ab) {
            if (!v.is(ab)) {
                throw ("E_INVALIDARG: bad custoActionItem given to searchSettingsUI method !")
            }
            var Y = this;
            var ai = true;
            if (Y.displayMode === "table") {
                ai = false
            } else {
                ai = true
            }
            var W = null;
            if (!v.is(ab.custoPanel)) {
                var K = ab.getContent();
                if (ab.model.get("visible") == false) {
                    var am = v.extendElement(this.searchContentSetDivContainer);
                    if (v.is(am)) {
                        var V = am.getElements(".fonticon-dot-3");
                        if (v.is(V, "array") && 1 == V.length) {
                            K = V[0]
                        }
                    }
                }
                this.popover = new o({
                    target: K,
                    className: "search-options-popover",
                    id: "tab-popover",
                    position: "left",
                    autoHide: false,
                    title: F.get("custo_chooser_panel_title"),
                    events: {
                        onHide: function() {
                            if (v.is(ab.custoPanel)) {
                                delete ab.custoPanel
                            }
                            Y.popover = null
                        }
                    }
                });
                W = this.popover;
                var Z = UWA.createElement("span", {
                    id: "close-popover-icon",
                    "class": "fonticon fonticon-cancel",
                    title: F.get("custo_close.tooltip")
                }).inject(W.getTitle());
                Z.addEvent("click", function(ap) {
                    ap.stopPropagation();
                    W.destroy();
                    Y.popover = null
                });
                ab.custoPanel = W;
                W.divCusto = UWA.createElement("div", {
                    "class": "search-options-popover-container"
                })
            } else {
                W = ab.custoPanel;
                W.divCusto.empty()
            }
            if (!v.is(ab.custoPanel)) {
                Y.log("Error !!!");
                return
            }
            var an = new h({
                reorderFlag: false,
                newTabButtonFlag: false,
                pinFlag: false,
                editableFlag: false,
                multiSelFlag: false,
                displayStyle: "strip"
            });
            an.inject(W.divCusto);
            var N = new UWA.Element("div", {
                "class": "search-options-tab",
                id: "search-options-tab-general"
            });
            var ac = new UWA.Element("div", {
                "class": "search-options",
                id: "search-options-general"
            });
            ac.inject(N);
            var P = null;
            var S = u.getSettingsToDisplayInUI();
            var ah = [];
            var ad = [];
            var T = {};
            var ak = UWA.is(Y.snSkeletonMgt.getOption("in_apps_search"), "object");
            var R = Y.snSkeletonMgt.getOption("transient_context") !== "true" && Y.snSkeletonMgt.getOption("transient_context") !== true;
            var O = u.getOption("nav_history");
            var M = u.getOption("integratedSearch");
            var ae;
            if (UWA.is(Y.snSkeletonMgt.getSearchWidget, "function") && UWA.is(Y.snSkeletonMgt.getSearchWidget())) {
                ae = Y.snSkeletonMgt.getSearchWidget().getValue("launch_mode")
            }
            var X = function(at, ar) {
                var ap = true;
                switch (at) {
                    case "search_tabbed_ui":
                        var aq = c.identifyClientInfo(ar.addinMode);
                        if (UWA.is(aq, "object")) {
                            switch (aq.identifier) {
                                case "3DSpace":
                                    ap = false;
                                    break;
                                case "3DDashboard":
                                    if (ak || R) {
                                        ap = false
                                    }
                                    break;
                                case "3DEXPERIENCE":
                                    if (ak) {
                                        ap = false
                                    }
                                    break
                            }
                        }
                        break;
                    case "nav_history":
                        if (O === false) {
                            ap = false;
                            break
                        } else {
                            var aq = c.identifyClientInfo(ar.addinMode);
                            if (UWA.is(aq, "object")) {
                                switch (aq.identifier) {
                                    case "3DSpace":
                                        ap = false;
                                        break;
                                    case "3DDashboard":
                                        if (ak || R) {
                                            ap = false
                                        }
                                        break;
                                    case "3DSwym":
                                    case "3DEXPERIENCE":
                                        ap = false;
                                        break
                                }
                            }
                        }
                        break;
                    case "integratedSearch":
                        if (UWA.is(M) && M === false) {
                            ap = false
                        } else {
                            if (ae === c.widgetLaunchMode.COMPASS_TRANSIENT || ae === c.widgetLaunchMode.COMPASS_PINNED) {
                                ap = false
                            }
                        }
                        var aq = c.identifyClientInfo(ar.addinMode);
                        if (UWA.is(aq, "object")) {
                            switch (aq.identifier) {
                                case "3DSpace":
                                    ap = false;
                                    break;
                                case "3DDashboard":
                                    if (ak || R) {
                                        ap = false
                                    }
                                    break;
                                case "3DSwym":
                                case "3DEXPERIENCE":
                                    ap = false;
                                    break
                            }
                        }
                        break;
                    case "search_date_region":
                        ap = false;
                        if (u.getOption("activate_search_date_region") === true) {
                            ap = true
                        }
                        break
                }
                return ap
            };
            var al = {
                addinMode: Y.snSkeletonMgt.getOption("addinMode"),
                inContextSearch: UWA.is(Y.snSkeletonMgt.getOption("in_apps_search"), "object"),
                isPinnedWidget: (Y.snSkeletonMgt.getOption("transient_context") !== "true" && Y.snSkeletonMgt.getOption("transient_context") !== true)
            };
            for (var aj = 0; aj <= S.length; aj++) {
                if (v.is(S[aj]) && v.is(S[aj].optionID) && v.is(S[aj].optionLabel)) {
                    if (X(S[aj].optionID, al)) {
                        T[S[aj].optionID] = G.getItem(S[aj].optionID);
                        S[aj].disable = false;
                        if (S[aj].optionID === "activeLargeView" && al.inContextSearch && Y._shouldBeAvailableIfInContextMode({
                                in_apps_search: Y.snSkeletonMgt.getOption("in_apps_search")
                            }, "columnCusto")) {
                            S[aj].disable = true
                        }
                        if ("boolean" === S[aj].optionType) {
                            var af = new H({
                                type: "checkbox",
                                value: S[aj].optionID,
                                domId: S[aj].optionID,
                                label: S[aj].optionLabel,
                                checkFlag: T[S[aj].optionID]
                            });
                            if (v.is(S[aj].disable)) {
                                af.disabled = S[aj].disable
                            }
                            af.inject(ac);
                            ah.push(af);
                            af.addEventListener("buttonclick", function(ar) {
                                var ap = ar.dsModel;
                                var au = false;
                                var av = 0,
                                    aq = ah.length;
                                for (av = 0; av < aq && false === au; av++) {
                                    if (T[ah[av].value] !== ah[av].checkFlag) {
                                        au = true
                                    }
                                }
                                if (true === au) {
                                    P.setDisabled(false);
                                    P.focus(true)
                                } else {
                                    P.setDisabled(true);
                                    P.focus(false)
                                }
                                if (ap.value === "search_tabbed_ui") {
                                    var at = ah.filter(function(aw) {
                                        return (aw && aw.value === "nav_history")
                                    }).pop();
                                    if (at) {
                                        if (ap.checkFlag === true) {
                                            at.disabled = false
                                        } else {
                                            at.disabled = true;
                                            at.checkFlag = false
                                        }
                                        return
                                    }
                                }
                            })
                        } else {
                            if ("string" === S[aj].optionType) {
                                var ao = new j({
                                    placeholder: S[aj].optionLabel,
                                    "class": S[aj].optionID,
                                    id: S[aj].optionID,
                                    events: {
                                        onKeyDown: function(ap) {
                                            P.setDisabled(false)
                                        }
                                    }
                                }).inject(ac);
                                ad.push(ao);
                                ao.setValue(T[S[aj].optionID])
                            }
                        }
                    }
                }
            }
            var aa = ah.filter(function(ap) {
                return (ap && ap.value === "search_tabbed_ui")
            }).pop();
            if (aa && aa.checkFlag === true) {
                var L = ah.filter(function(ap) {
                    return (ap && ap.value === "nav_history")
                }).pop();
                if (L) {
                    L.disabled = false
                }
            }
            var U = new UWA.Element("div", {
                "class": "search-options-btnDiv",
                id: "search-options-btnDiv"
            });
            P = new r({
                value: F.get("APPLYButton"),
                className: "default xsmall",
                id: "applySettings",
                disabled: true,
                events: {
                    onClick: function() {
                        var ap = new b({
                            renderTo: document.body,
                            className: "WarningReloadPage"
                        });
                        ap.confirm(F.get("actions.Options.warning"), F.get("actions.Options.warningTitle"), function(aq) {
                            if (true === aq) {
                                for (var at = 0; at <= ah.length; at++) {
                                    var au = ah[at];
                                    if (v.is(au) && v.is(au.options)) {
                                        G.setItem(au.value, au.checkFlag)
                                    }
                                }
                                for (var at = 0; at <= ad.length; at++) {
                                    var ar = ad[at];
                                    if (v.is(ar) && v.is(ar.options)) {
                                        G.setItem(ar.getId(), ar.getValue())
                                    }
                                }
                                G.commit();
                                W.destroy();
                                Y.popover = null;
                                console.log("The settings would be actived with the page reloaded.");
                                if (u.getOption("search_web_in_win")) {
                                    if (v.is(Y.snSkeletonMgt) && v.is(Y.snSkeletonMgt.getCollection()) && v.is(Y.snSkeletonMgt.getCollection().getTaggerProxy())) {
                                        Y.snSkeletonMgt.getCollection().getTaggerProxy().clearLocalFilter()
                                    }
                                }
                                s.publish({
                                    channel: Y.snSkeletonMgt.getOption("widgetId"),
                                    topic: "beforeSearchReload",
                                    data: {}
                                });
                                location.reload()
                            }
                        })
                    }
                }
            });
            P.inject(U);
            U.inject(N);
            an.add({
                label: F.get("actions.Options.generalTab"),
                content: N
            });
            var Q = null;
            if (u.getOption("global_action_column_custo") && Y._shouldBeAvailableIfInContextMode({
                    in_apps_search: Y.snSkeletonMgt.getOption("in_apps_search")
                }, "columnCusto") && false === ai) {
                var ag = "";
                if (v.is(Y.current_collection) && v.is(Y.current_collection.search_ressources) && v.is(Y.current_collection.search_ressources.getActiveTenant, "function")) {
                    ag = Y.current_collection.search_ressources.getActiveTenant()
                }
                c.isRoleAvailable(["CSV", "InternalDS"], ag, function(at) {
                    if (true === at) {
                        var ar = {
                            isPQ: false,
                            typeName: ""
                        };
                        if (v.is(Y.current_collection)) {
                            var au = Y.current_collection.getPQ();
                            if (v.is(au)) {
                                ar = {
                                    isPQ: true,
                                    typeName: au
                                }
                            }
                        }
                        var av = Y.snSkeletonMgt.getDataGridView();
                        if (v.is(av)) {
                            if (v.is(av._forcedCustoView, "string")) {
                                ar.forcedCusto = av._forcedCustoView
                            }
                        }
                        var aq = D.getAvailableColumnCustomization(ar);
                        if (v.is(aq) && aq.length > 0) {
                            aq.splice(0, 0, {
                                label: F.get("RESTORE_DEFAULT"),
                                value: "DEFAULT"
                            })
                        }
                        Q = new UWA.Element("div", {
                            "class": "search-options-tab",
                            id: "search-options-tab-custo"
                        });
                        new f({
                            className: "search-options-custo-select",
                            nativeSelect: true,
                            placeholder: F.get("dataGrid.columnCustoPanel.existingCustoComboPlaceHolder"),
                            options: aq,
                            events: {
                                onChange: function() {
                                    var ax = Y.skeleton.getViewAt(0);
                                    var aw = ax.currentViewId;
                                    if (aw !== "table") {
                                        return
                                    }
                                    var ay = ax.contentsViews[aw].nestedView;
                                    var aB = this.getValue(),
                                        aD = null;
                                    if (v.is(aB, "array") && aB.length > 0) {
                                        aD = aB[0]
                                    }
                                    if (0 === aD.length) {
                                        return
                                    }
                                    if ("DEFAULT" === aD) {
                                        if (v.is(ar)) {
                                            ar.forcedCusto = "DEFAULT"
                                        }
                                        aD = D.getColumnCustomizationIdToUse(ar)
                                    }
                                    var aC = {
                                        custoName: aD,
                                        custoId: aD
                                    };
                                    if (aC.custoName.endsWith("-ADMIN")) {
                                        aC.custoName = aC.custoName.slice(0, -6)
                                    }
                                    if (aD.startsWith("###")) {
                                        var az = aC.custoName.substring(3, aC.custoName.length);
                                        aC.custoName = F.replace(F.get("custo_PQ"), {
                                            PQ: az
                                        })
                                    }
                                    if (v.is(ay) && v.is(ay.defineColumnCusto, "function")) {
                                        var aA = D.getColumnCustomizationDefinitionFromCustoId(aD);
                                        ay._updateColumns(aA, aC, false)
                                    }
                                    W.destroy();
                                    Y.popover = null
                                }
                            }
                        }).inject(Q);
                        var ap = UWA.createElement("a", {
                            id: "show-custo-manager",
                            title: F.get("custo_chooser_manage_custos_tooltip"),
                            href: "#",
                            html: F.get("custo_chooser_manage_custos")
                        }).inject(Q);
                        ap.addEvent("click", function(aw) {
                            aw.preventDefault();
                            aw.stopPropagation();
                            W.destroy();
                            Y.popover = null;
                            Y.columnCustomizationDefinitionUI()
                        });
                        an.add({
                            label: F.get("actions.Options.custoTab"),
                            content: Q,
                            index: 0,
                            isSelected: true
                        })
                    } else {
                        an.value = [0]
                    }
                })
            } else {
                an.value = [0]
            }
            W.setBody(W.divCusto);
            W.show()
        },
        columnCustomizationDefinitionUI: function() {
            var N = this;
            var L = N.skeleton.getViewAt(0);
            var K = L.currentViewId;
            var M = L.contentsViews[K].nestedView;
            if (v.is(M) && v.is(M.defineColumnCusto, "function")) {
                N.maskedElement = N.snSkeletonMgt.options.renderTo;
                w.mask(N.maskedElement, F.get("SearchDataGridPreferences_modal_loading_attribute"));
                M.defineColumnCusto()
            }
        },
        removeMask: function() {
            if (v.is(this.maskedElement)) {
                w.unmask(this.maskedElement)
            }
            this.maskedElement = null
        },
        logOut: function() {
            var M = this;
            this.log("logOut");
            if (!v.is(this.current_collection)) {
                return
            }
            if (!v.is(this.current_collection.getSearchRessources())) {
                return
            }
            var K = this.current_collection.getSearchRessources().getFetchOptions({
                service_name: "logOut",
            });
            var N = K.url;
            var L = {
                onComplete: function(O, P) {
                    console.log("SearchAction: logout success")
                },
                onFailure: function(O) {
                    console.log("SearchAction: logout failure")
                }
            };
            L = UWA.extend(K, L, true);
            i.authenticatedRequest(N, L)
        },
        saveSearchUI: function(O, N) {
            if (!v.is(O)) {
                throw ("E_INVALIDARG: bad saveActionItem given to saveSearchUI method !")
            }
            var Q = this,
                U, R, W, V, S, L = false;
            if (v.is(Q.current_collection.service_parameters.query) && c.SearchTypeEnum.MY_RECENT_CONTENT === Q.current_collection.service_parameters.query) {
                L = true
            }
            if (!L) {
                W = UWA.createElement("div", {
                    "class": "divNewSearch form-group",
                    html: {
                        tag: "label",
                        "for": "newSaveSearchName",
                        "class": "saveSearchEdt",
                        html: F.get("save_search_name")
                    }
                });
                V = UWA.createElement("form", {
                    "class": "formSaveSearch form-inline"
                });
                W.inject(V);
                if (v.is(N)) {
                    var K = new A({
                        placeholder: F.get("save_search_default_text"),
                        "class": "newSaveSearchName",
                        events: {
                            onKeyDown: function(Y) {
                                if (Y.keyCode === 13) {
                                    Y.preventDefault();
                                    Y.stopPropagation();
                                    var X = Q.saveSearch(this.elements.input.value, N);
                                    if (false !== X) {
                                        R.destroy();
                                        Q.popover = null
                                    }
                                }
                            }
                        },
                    }).setId("newSaveSearchName").inject(W);
                    K.getSuggestions = function() {}
                }
            } else {
                W = UWA.createElement("div", {
                    "class": "divNewSearch form-group",
                    html: {
                        "for": "newSaveSearchName",
                        html: F.get("save_search_not_supported")
                    }
                });
                W.inject(V);
                UWA.createElement("hr").inject(V)
            }
            S = UWA.createElement("a", {
                id: "show-favorites-searches",
                title: F.get("my_fav_searches_tooltip"),
                "class": "saveSearchHyperlink",
                href: "#",
                html: F.get("my_fav_searches"),
                styles: {
                    display: "block"
                }
            }).inject(V);
            S.addEvent("click", function(X) {
                X.preventDefault();
                X.stopPropagation();
                R.destroy();
                Q.popover = null;
                Q.dispatchEvent("onRefreshResultRequest", {
                    criteria: {
                        search_crit: c.SearchTypeEnum.FAVORITE_SEARCH,
                        originalSearchCriteria: F.get("my_fav_searches"),
                        search_name: F.get("my_fav_searches"),
                        queryType: c.SearchTypeEnum.FAVORITE_SEARCH
                    }
                })
            });
            var P = O.getContent();
            if (O.model.get("visible") == false) {
                var T = v.extendElement(this.searchContentSetDivContainer);
                if (v.is(T)) {
                    var M = T.getElements(".fonticon-dot-3");
                    if (v.is(M, "array") && 1 == M.length) {
                        P = M[0]
                    }
                }
            }
            this.popover = new g({
                title: F.get("save_search_panel_title"),
                identifier: "fav-search-popover",
                position: {
                    at: "bottom",
                    of: O,
                    collision: "fit",
                    offsetX: -83
                },
                content: W.getParent(),
                buttons: {
                    Ok: new y({
                        domId: "okSaveSearch",
                        label: F.get("OKButton"),
                        onClick: function(X) {
                            var Y = Q.saveSearch(K.elements.input.value, N);
                            if (false !== Y) {
                                Q.popover.destroy();
                                Q.popover = null
                            }
                        }
                    }),
                    Cancel: new y({
                        domId: "cancelSaveSearch",
                        label: F.get("CancelButton"),
                        onClick: function(X) {
                            Q.popover.destroy();
                            Q.popover = null
                        }
                    })
                }
            });
            R = this.popover;
            O.savePanel = R;
            this.popover.elements.container.addClassName("fav-search-popover");
            R.elements.container.setStyle("z-index", 4000);
            R.inject(document.body);
            R.addEventListener("close", function(X) {
                X.stopPropagation();
                R.destroy();
                Q.popover = null
            });
            R.show();
            if (v.is(K)) {
                K.elements.input.focus()
            }
        },
        saveSearch: function(L, O) {
            var N = this;
            this.log("saveSearch");
            if (!v.is(L, "string")) {
                return
            }

            function M(R, S) {
                var Q = F.replace(F.get("save_search_failure"), {
                    searchId: L
                });
                if (v.is(S, "string")) {
                    try {
                        var P = JSON.parse(S);
                        if (v.is(P) && v.is(P.Error)) {
                            Q += "<br>" + P.Error
                        }
                    } catch (T) {
                        console.error("Error parsing errorObject:", T)
                    }
                }
                N._displayAlert({
                    message: Q,
                    className: "error saveSearchAlert"
                })
            }
            if (L.indexOf("<") >= 0 || L.indexOf(">") >= 0) {
                L = L.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                L = L.replace(/&lt;/g, '<em style="color:red">&lt;</em>').replace(/&gt;/g, '<em style="color:red">&gt;</em>');
                M("invalid char in name", '{"Error": "' + F.get("save_search_invalid_character") + '"}');
                return false
            }
            var K = {
                query: O.query,
                originalSearchCriteria: O.originalSearchCriteria
            };
            this.log("searchName=" + L);
            this.log("searchParam.search_criteria=" + O.query);
            this.log("searchParam.tagger_criteria=" + O.refine);
            if (!v.is(this.current_collection)) {
                return
            }
            if (!v.is(this.current_collection.getSearchRessources())) {
                return
            }
            c.initSecurityContext(N.current_collection.getSearchRessources());
            c.getSecurityContextPromise().then(function() {
                var Q = {
                    service_name: "saveSearch",
                    service_data: {
                        name: L,
                        searchSpec: K,
                        taggerSpec: O.refine,
                        searchOptions: {
                            source: O.source
                        },
                        originalSearchCriteria: O.originalSearchCriteria
                    }
                };
                if (O.order_by && O.order_field) {
                    Q.service_data.searchOptions.order_by = O.order_by;
                    Q.service_data.searchOptions.order_field = O.order_field
                }
                var P = N.current_collection.getSearchRessources().getFetchOptions(Q);
                var S = P.url;
                var R = {
                    onComplete: function(T, U) {
                        var V = v.Json.decode(T);
                        if (UWA.is(V)) {
                            N._displayAlert({
                                message: F.replace(F.get("save_search_successful"), {
                                    searchId: V.name
                                }),
                                className: "success saveSearchAlert"
                            })
                        }
                    },
                    onFailure: M
                };
                R = UWA.extend(P, R, true);
                i.authenticatedRequest(S, R)
            })
        },
        getSavedSearches: function(M, N) {
            var O = this;
            this.log("getSavedSearches");
            if (!v.is(this.current_collection)) {
                return
            }
            if (!v.is(this.current_collection.getSearchRessources())) {
                return
            }
            var L = this.current_collection.getSearchRessources().getFetchOptions({
                service_name: "getSavedSearches"
            });
            var K = L.url;
            var P = {
                type: "json",
                authentication: {
                    passport_target: "enovia"
                },
                onComplete: function(S, W) {
                    if (v.is(S)) {
                        O.log(S)
                    }
                    if (v.is(W)) {
                        O.log(W)
                    }
                    var R = [];
                    if (v.is(S.searches)) {
                        for (var U = 0, Q = S.searches.length; U < Q; U++) {
                            var T = S.searches[U];
                            var V = {
                                save_object: {}
                            };
                            if (v.is(T.name)) {
                                V.save_object.name = T.name
                            }
                            if (v.is(T.id)) {
                                V.save_object.id = T.id
                            }
                            if (v.is(T.searchstring)) {
                                V.save_object.search_criteria = T.searchstring
                            }
                            if (v.is(T.taggerstring)) {
                                V.save_object.tagger_criteria = decodeURIComponent(T.taggerstring)
                            }
                            R.push(V)
                        }
                        if (v.is(N, "function")) {
                            N(R)
                        }
                    }
                },
                onFailure: function(Q) {
                    O._displayAlert({
                        message: F.replace(F.get("save_search_retrieval_failure"), {
                            response: Q
                        }),
                        className: "error"
                    })
                }
            };
            UWA.extend(P, L, true);
            if (u.getOption("search_web_in_win") || this.jetty_server_activated) {
                this.log("Jetty server activated or Search Web in Win context")
            }
            i.authenticatedRequest(K, P)
        },
        deleteSearch: function(M, L) {
            var N = this;
            N.log("deleteSearch");
            if (!v.is(this.current_collection)) {
                return
            }
            if (!v.is(this.current_collection.getSearchRessources)) {
                return
            }
            var K = this.current_collection.getSearchRessources().getFetchOptions({
                service_name: "deleteSearch",
                service_data: {
                    id: M,
                }
            });
            var O = {
                onComplete: function(P, Q) {
                    L()
                },
                onFailure: function(P) {
                    N.log("Failed to delete search " + M + " !", P)
                },
                onCancel: function() {
                    N.log("Search deletion canceled !")
                },
                onTimeout: function(P) {
                    N.log("Search deletion timeout !", P)
                }
            };
            O = UWA.extend(K, O, true);
            i.authenticatedRequest(O.url, O)
        },
        _getValueWithMapping: function(N, M, L) {
            var P;
            if (!v.is(N)) {
                return
            }
            if (N in L && v.is(L[N], "function")) {
                var Q = {
                    model: M
                };
                P = L[N].call(Q)
            } else {
                try {
                    P = M.get(N)
                } catch (O) {}
                if (P === undefined) {
                    try {
                        P = M.get(N.slice(N.lastIndexOf("/") + 1, N.length))
                    } catch (O) {}
                    if (P === undefined) {
                        P = "";
                        if (v.is(M) && UWA.is(M.isAShowOnlyObject, "function") && M.isAShowOnlyObject()) {
                            var K = F.get("no_access");
                            P = K
                        }
                    }
                }
            }
            return P
        },
        updatePopoverPosition: function() {
            if (v.is(this.popover)) {
                if (v.is(this.popover.options) && v.is(this.popover.options.target) && v.is(this.popover.options.target.getPosition, "function")) {
                    var K = this.popover.options.target.getPosition(document.body);
                    if (K.x !== 0 || K.y !== 0) {
                        this.popover.updatePosition()
                    } else {
                        this.popover.hide()
                    }
                } else {
                    if (v.is(this.popover._properties) && v.is(this.popover._properties.position) && v.is(this.popover._properties.position.value) && v.is(this.popover._properties.position.value.of) && v.is(this.popover._properties.position.value.of.container) && v.is(this.popover._properties.position.value.of.container.getPosition, "function")) {
                        var K = this.popover._properties.position.value.of.container.getPosition(document.body);
                        if (K.x !== 0 || K.y !== 0) {
                            this.popover.updatePosition ? this.popover.updatePosition() : this.popover.setAbsolutePosition(K)
                        } else {}
                    }
                }
            }
        },
        _displayAlert: function(K) {
            if (!v.is(K) || !v.is(K.message)) {
                throw ("E_INVALIDARG: bad options given to _displayAlert method !")
            }
            var M = K.message;
            var L = "primary";
            if (v.is(K.className, "string")) {
                L = K.className
            }
            var O = this.snSkeletonMgt._skeleton.container;
            var N = {
                visible: true,
                autoHide: L.indexOf("success") > -1 ? true : false,
                hideDelay: 4000,
                closable: true,
                messages: [{
                    message: M,
                    className: L
                }]
            };
            if (v.is(K.events)) {
                N.events = K.events
            }
            if (v.is(this.skeleton)) {
                if (this.skeleton._alert) {
                    this.skeleton._alert.destroy();
                    this.skeleton._alert = null
                }
                this.skeleton._alert = new l(N).inject(O, "top")
            } else {
                new l(N).inject(O, "top")
            }
        },
    });
    return q
});
define("DS/SNResultUX/views/SearchTreeListView", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class/Debug", "DS/UIKIT/Mask", "DS/MessageBus/MessageBus", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/PredicatesNLS", "DS/SNInfraUX/SNVocabAccess", "DS/SNResultUX/utils/SearchViewOptions", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/utils/SearchCustoServices", "DS/WebappsUtils/Performance", "DS/SNResultUX/views/EmptyView", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/SWFiltering", "DS/Core/PointerEvents", "DS/SNResultUX/views/SearchGridView", "DS/W3DXComponents/Collections/ActionsCollection", "DS/Controls/Toggle"], function(n, k, t, v, s, a, h, q, o, e, b, m, l, c, i, g, p, f, j, u, d) {
    var r = j.extend({
        tagName: "div",
        className: "TreeListView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "TreeListView"
        },
        nestedView: null,
        _columns: null,
        _columnsAttributes: null,
        _model: null,
        multiselMode: false,
        checkedRows: 0,
        _currentCustoViewId: "The_Default_Columns",
        _lastSelectedCustoViewId: "The_Default_Columns",
        _forcedCustoView: null,
        _typeAttrCache: [],
        _vocabularyClassesCache: [],
        _iShiftDown: false,
        _lastItemSelected: null,
        _shiftTransaction: false,
        _previousSlice: {
            start: -1,
            end: -1
        },
        _viewRoot: null,
        _cellSpan: null,
        _beginUnselectAll: false,
        _subscriptions: null,
        _reDefColumns: function() {
            var A = this.collection;
            var y = this.view.getManager();
            var w = this._columns;
            if (A.state.totalRecords <= 1000) {
                var x = w.length;
                for (var B = 0; B < x; B++) {
                    var z = w[B].dataIndex;
                    y.setColumnOptions(z, {
                        isSortable: true
                    })
                }
            } else {
                var x = w.length;
                for (var B = 0; B < x; B++) {
                    var z = w[B].dataIndex;
                    switch (z) {
                        case "ds6w:label":
                        case "ds6w:who/ds6w:responsible":
                        case "ds6w:when/ds6w:created":
                        case "ds6w:when/ds6w:modified":
                        case "ds6w:responsible":
                        case "ds6w:created":
                        case "ds6w:modified":
                            y.setColumnOptions(z, {
                                isSortable: true
                            });
                            break;
                        default:
                            y.setColumnOptions(z, {
                                isSortable: false
                            })
                    }
                }
            }
        },
        init: function(w) {
            this._parent(w);
            this._subscriptions = {};
            var x = this;
            this._columns = n.clone(this._columnsAttributes);
            if (UWA.is(this.collection && this.collection.getSNSkeleton())) {
                this._subscriptions.sortForAllView = s.subscribe({
                    channel: this.collection.getSNSkeleton().getOption("messagingChannel"),
                    topic: "sortForAllView",
                    callback: function(y) {
                        if (x.view && x.collection.service_parameters && x.collection.service_parameters.order_by && x.collection.service_parameters.order_field) {
                            var z = x.view.getManager().getOrderedColumnState();
                            if (z) {
                                x.view.getManager().setColumnOrderState(z.dataIndex, "none")
                            }
                            x.view.getManager().setColumnOrderState(x.collection.service_parameters.order_field, x.collection.service_parameters.order_by)
                        }
                    }
                })
            }
        },
        getActionMenu: function(H, A) {
            var C = this;
            var w = C._model.getXSO().get();
            var F, z;
            if (w.length === 1) {
                F = C.collection._models[H.virtualRowID];
                z = F.actions;
                if (n.is(z) && z._models.length !== 0) {
                    for (var B = 0; B < z.length; B++) {
                        var y = z._models[B]._attributes;
                        if (n.is(z._models[B]) && n.is(z._models[B]._attributes)) {
                            A.push({
                                text: y.title,
                                fonticon: y.icon,
                                handler: z._models[B]._attributes.callback.bind(C, {
                                    action_id: y.id,
                                    object_id: C.collection.at(H.virtualRowID).get("id"),
                                    cellInfo: H,
                                    collection: C.collection,
                                    model: C.collection.at(H.virtualRowID)
                                })
                            })
                        }
                    }
                } else {
                    A.push({
                        text: g.get("noActionsAvailable")
                    })
                }
            } else {
                var x = w.length;
                var G = function(I) {
                    if (x > 1) {
                        return I.get("multisel") === true
                    } else {
                        return I
                    }
                };
                F = [];
                for (var B = 0; B < w.length; B++) {
                    F.push(C.collection._models[w[B]._localID])
                }
                var D = F[0].actions.filter(G);
                for (var B = 1; B < x; B++) {
                    var E = F[B].actions.filter(G);
                    D = D.filter(function(J) {
                        var I = E.some(function(K) {
                            return J.id === K.id
                        });
                        return I
                    })
                }
                if (D && D.length > 0) {
                    D.forEach(function(I) {
                        var J = {
                            text: I.get("title"),
                            fonticon: I.get("icon"),
                        };
                        if (UWA.is(I.get("callback"))) {
                            J.callback = function() {
                                var K = [];
                                Array.prototype.forEach.call(F, function(M) {
                                    var L = {
                                        model: M,
                                        action_id: I.get("id"),
                                        object_id: M.get("id"),
                                        collection: M.collection
                                    };
                                    K.push(L)
                                });
                                I.get("callback").call(C, K, arguments)
                            }
                        }
                        A.push(J)
                    })
                } else {
                    A.push({
                        text: g.get("noActionsAvailable")
                    })
                }
            }
        },
        onSearch: function(w) {
            this._parent(w);
            var x = this;
            if (n.is(this.colCustoPanel) && n.is(this.colCustoPanel._requestClosePanel, "function")) {
                this.colCustoPanel._requestClosePanel()
            }
            this.colCustoPanel = null;
            this._reinitialisationColums(w);
            this._columns = n.clone(this._columnsAttributes);
            this.collection.getAttributesToRetrieve(this._columns)
        },
        getMinNumberModel: function(x, w) {
            x = x || this._rowMaxNumber;
            w = w || this._columnsMaxNumber;
            return x
        },
        _managerInit: function() {
            var x = this;
            var w = x.view.getManager();
            w.onMoveColumn(function(z, A) {
                console.log("column moved");
                if (x.view && x.view._datagrid.options.columns) {
                    var y = JSON.stringify(x.view._datagrid.options.columns);
                    console.log("store new columns: " + y);
                    localStorage.SNSearchGridColumns = y
                }
            });
            w.onRowHeaderRequest(function(z) {
                var y = z.cellView.getContent();
                y.setContent((z.virtualRowID + 1).toString())
            });
            w.onSortColumnContent(function(B, A) {
                console.log("sort request received on " + B.columnDataIndex + ", order = " + B.sortOrder);
                x.log("sort request received on " + B.columnDataIndex + ", order = " + B.sortOrder);
                var y = "";
                if (x.view && x.view.getManager()) {
                    y = x.view.getManager().getColumnOptions(B.columnDataIndex).text
                }
                s.publish({
                    channel: x.collection.getSNSkeleton().getOption("messagingChannel"),
                    topic: "setOrderInGridView",
                    data: {
                        order_by: B.sortOrder,
                        order_field: B.columnDataIndex,
                        nlsName: y
                    }
                });
                if (a.SearchTypeEnum.MY_RECENT_CONTENT == x.collection.service_parameters.query) {
                    return
                } else {
                    var z = x.collection.getSNSkeleton()
                }
                if (UWA.is(z)) {
                    if (UWA.is(z._informationPanel)) {
                        if (z._informationPanel.getvisibleFlag() === true) {
                            z._informationPanel.setInfomationPanelObject(null)
                        }
                    }
                }
            });
            w.onCellClick(function(y) {
                if (h.getOption("search_web_in_win") && y.dataIndex === "actions") {
                    y.cellView._manager._cellSpan = y.cellView.getContent()
                }
                if (y.isHeader) {
                    if (x.collection.state.totalRecords > 1000) {
                        switch (y.dataIndex) {
                            case "ds6w:label":
                            case "ds6w:who/ds6w:responsible":
                            case "ds6w:when/ds6w:created":
                            case "ds6w:when/ds6w:modified":
                            case "ds6w:responsible":
                            case "ds6w:created":
                            case "ds6w:modified":
                                break;
                            default:
                                m._displayAlert({
                                    message: g.get("sortLimitByLessThen1000Results"),
                                    className: "warning"
                                });
                                break
                        }
                    }
                }
            });
            w.onNodeDblClick(function(y, z) {
                x.onItemDblClick(y, z)
            });
            w.onCellPointerDown(function(y) {});
            w.onInfiniteScrollAsync(function(y) {
                x.onInfiniteScrollAsync(y, function() {
                    w.infiniteScrollAsyncProcessDone()
                })
            });
            w.onEndResizeOrOnReadyModelRequestAsync && w.onEndResizeOrOnReadyModelRequestAsync(function(y) {
                x.onResizeOrFirstLoaded(y, function() {
                    w.EndResizeOrOnReadyModelRequestAsyncDone()
                })
            })
        },
        _reinitialisationColums: function(F) {
            var D = this;
            D._forcedCustoView = null;
            this._currentCustoViewId = this._lastSelectedCustoViewId;
            if (q.getItem("listColumnsWidth")) {
                if (this.view) {
                    try {
                        var G = JSON.parse(q.getItem("listColumnsWidth"));
                        var N = Object.keys(G);
                        var y = this.view._datagrid.options.columns;
                        for (var L = 0; L < y.length; L++) {
                            if (N.indexOf(y[L].dataIndex) != -1) {
                                y[L].width = G[y[L].dataIndex]
                            }
                        }
                    } catch (O) {
                        console.log(O)
                    }
                }
            }
            if (n.is(D.collection.service_parameters) && n.is(D.collection.options.tagger_proxy)) {
                var A = {
                    isPQ: D.collection.service_parameters.isAPQSearch ? true : false,
                    typeName: D.collection.getPQ()
                };
                var E = false;
                if (n.is(D.collection.service_parameters.isAPQSearch) && D.collection.service_parameters.isAPQSearch === true) {
                    var z = D.collection.getPQ();
                    if (n.is(z) && n.is(z.pqName, "string") && z.pqName.length > 0) {
                        E = true
                    }
                }
                var B = l.getColumnCustomizationIdToUse(A);
                if (n.is(B, "string") && B.length > 0) {
                    this._currentCustoViewId = B;
                    this._columnsAttributes = l.getColumnCustomizationDefinitionFromCustoId(B)
                }
                var w = D.collection.options.tagger_proxy.getCurrentFilter();
                var x = D.collection.service_parameters.refine;
                if ((D.collection.service_parameters.query === a.SearchTypeEnum.ADVANCED_SEARCH) && n.is(x) && (x === "")) {
                    this._columnsAttributes = l.getColumnCustomizationDefinitionFromCustoId("The_Default_Columns")
                } else {
                    if (n.is(w) && n.is(w.allfilters) && n.is(x) && n.is(x.allfilters)) {
                        if ((D.collection.service_parameters.query !== a.SearchTypeEnum.ADVANCED_SEARCH) && (Object.keys(w.allfilters).length > 0 && (n.is(w.allfilters["ds6w:what/ds6w:type"]) && w.allfilters["ds6w:what/ds6w:type"].length > 0 || n.is(w.allfilters["ds6w:what/ds6w:kind"]) && w.allfilters["ds6w:what/ds6w:kind"].length > 0))) {
                            var J = [];
                            if (n.is(x.allfilters["ds6w:what/ds6w:type"]) && !n.is(x.allfilters["ds6w:what/ds6w:kind"])) {
                                J = x.allfilters["ds6w:what/ds6w:type"]
                            } else {
                                if (n.is(x.allfilters["ds6w:what/ds6w:kind"]) && !n.is(x.allfilters["ds6w:what/ds6w:type"])) {
                                    J = x.allfilters["ds6w:what/ds6w:kind"]
                                } else {
                                    if (n.is(x.allfilters["ds6w:what/ds6w:kind"]) && n.is(x.allfilters["ds6w:what/ds6w:type"])) {
                                        J = x.allfilters["ds6w:what/ds6w:type"].concat(x.allfilters["ds6w:what/ds6w:kind"])
                                    }
                                }
                            }
                            var H = [];
                            for (var P = 0; P < J.length; P++) {
                                var Q = l.getColumnCustomizationAliasIdToUse(J[P].object);
                                H.push(Q)
                            }
                            var K = H.filter(function(T, S, R) {
                                return R.indexOf(T) === S
                            });
                            if (K.length === 1 && n.is(K[0])) {
                                this._currentCustoViewId = K[0];
                                this._columnsAttributes = l.getColumnCustomizationDefinitionFromAliasCustoId(this._currentCustoViewId);
                                if (D._isCurrentView && !(n.is(F) && n.is(F.refresh))) {
                                    m._displayAlert({
                                        message: g.get("SearchDataGridPreferences_modal_typeCusto"),
                                        className: "success",
                                        widgetId: D.getOption("widgetId")
                                    })
                                }
                            }
                        } else {
                            if (n.is(w.allfilters) && ((Object.keys(w.allfilters).length === 1 && (n.is(w.allfilters["sixw:ds6w:what/ds6w:type"]))) || Object.keys(w.allfilters).length === 2 && (n.is(w.allfilters["sixw:ds6w:what/ds6w:type"]) || n.is(w.allfilters["sixw:vpmextension"]))) || (Object.keys(w.allfilters).length === 3 && (n.is(w.allfilters["sixw:ds6w:what/ds6w:type"]) && n.is(w.allfilters["sixw:vpmextension"])))) {
                                var J = [];
                                if (n.is(w.allfilters["sixw:ds6w:what/ds6w:type"]) && !n.is(w.allfilters["sixw:vpmextension"])) {
                                    J = w.allfilters["sixw:ds6w:what/ds6w:type"]
                                } else {
                                    if (n.is(w.allfilters["sixw:vpmextension"]) && !n.is(w.allfilters["sixw:ds6w:what/ds6w:type"])) {
                                        J = w["sixw:vpmextension"]
                                    } else {
                                        if (n.is(w.allfilters["sixw:vpmextension"]) && n.is(w.allfilters["sixw:ds6w:what/ds6w:type"])) {
                                            J = w.allfilters["sixw:ds6w:what/ds6w:type"].concat(w.allfilters["sixw:vpmextension"])
                                        }
                                    }
                                }
                                var H = [];
                                for (var P = 0; P < J.length; P++) {
                                    var Q = l.getColumnCustomizationAliasIdToUse(J[P].object.slice(6));
                                    H.push(Q)
                                }
                                var K = H.filter(function(T, S, R) {
                                    return R.indexOf(T) === S
                                });
                                if (K.length === 1 && n.is(K[0])) {
                                    this._currentCustoViewId = K[0];
                                    this._columnsAttributes = l.getColumnCustomizationDefinitionFromAliasCustoId(this._currentCustoViewId);
                                    if (D._isCurrentView && !(n.is(F) && n.is(F.refresh))) {
                                        m._displayAlert({
                                            message: g.get("SearchDataGridPreferences_modal_typeCusto"),
                                            className: "success",
                                            widgetId: D.getOption("widgetId")
                                        })
                                    }
                                }
                            } else {
                                if (E) {
                                    var B = l.getColumnCustomizationIdToUse(A);
                                    if (n.is(B, "string") && B.length > 0) {
                                        this._currentCustoViewId = B;
                                        this._columnsAttributes = l.getColumnCustomizationDefinitionFromCustoId(B)
                                    }
                                } else {
                                    this._columnsAttributes = l.getColumnCustomizationDefinitionFromCustoId(this._currentCustoViewId)
                                }
                            }
                        }
                    } else {
                        this._columnsAttributes = l.getColumnCustomizationDefinitionFromCustoId(this._currentCustoViewId)
                    }
                }
                b.getCustoCellRequest(this._columnsAttributes)
            }
            if (!n.is(this._columnsAttributes) || (n.is(this._columnsAttributes) && this._columnsAttributes.length < 1)) {
                this._columnsAttributes = b.getDataGridViewHeaders(function() {
                    if (D._columnsAttributes) {
                        var R = D._columnsAttributes.length;
                        for (var T = 0; T < R; T++) {
                            var S = D._columnsAttributes[T].dataIndex;
                            D._columnsAttributes[T].text = o.getNLSValueForPredicate(S)
                        }
                    }
                    if (D.view) {
                        D.updateColumnsNLS()
                    }
                })
            }
            if (n.is(D.collection) && n.is(D.collection.service_parameters) && n.is(D.collection.service_parameters.query) && a.SearchTypeEnum.MY_RECENT_CONTENT === D.collection.service_parameters.query) {
                D._columnsAttributes.forEach(function(R) {
                    if (R.dataIndex.indexOf("/") !== -1) {
                        R.dataIndex = R.dataIndex.slice(R.dataIndex.indexOf("/") + 1, R.dataIndex.length)
                    }
                })
            }
            this._columns = n.clone(this._columnsAttributes);
            if (this.view && this.view.options) {
                this.reloadColumn()
            }
            this.collection.getAttributesToRetrieve(this._columns);
            if ("The_Default_Columns" === this._currentCustoViewId) {
                if (q.getItem("listColumnsWidth")) {
                    try {
                        var G = JSON.parse(q.getItem("listColumnsWidth"));
                        var N = Object.keys(G);
                        this._columnsAttributes.forEach(function(S, R) {
                            if (N.indexOf(S.dataIndex) == -1) {
                                S.width = "auto"
                            } else {
                                S.width = G[S.dataIndex]
                            }
                        })
                    } catch (O) {
                        console.log(O)
                    }
                } else {
                    this._columnsAttributes.forEach(function(S, R) {
                        S.width = "auto"
                    })
                }
            }
            if (this.view) {
                var C = this.view.options;
                C.columns.length = 3;
                for (var M = 0; M <= this._columnsAttributes.length - 1; M++) {
                    if (this._columnsAttributes[M]) {
                        C.columns.push(this._columnsAttributes[M])
                    }
                }
                this.comptuteNewColumnsNLS()
            }
            this.comptuteNewColumnsNLS();
            if (D.view && this.collection.service_parameters && this.collection.service_parameters.order_by && this.collection.service_parameters.order_field) {
                var I = D.view.getManager().getOrderedColumnState();
                if (I) {
                    D.view.getManager().setColumnOrderState(I.dataIndex, "none")
                }
                D.view.getManager().setColumnOrderState(D.collection.service_parameters.order_field, D.collection.service_parameters.order_by)
            }
        },
        updateColumnsNLS: function() {
            var y = this;
            var x = y.view.getManager();
            var w = y._columnsAttributes.length;
            for (var A = 0; A < w; A++) {
                var z = y._columnsAttributes[A].dataIndex;
                x.setColumnOptions(z, {
                    text: y._columnsAttributes[A].text
                });
                if (z === "actions") {
                    x.setColumnOptions(z, {
                        text: "Actions"
                    })
                }
            }
            y.view.getManager().updateView()
        },
        updateGridViewAfterSync: function() {
            var z = this;
            if (z.collection.getRequestCriteria().service_params && z.collection.getRequestCriteria().service_params.adv_search) {
                var y = UWA.is(z.getOption("advSearchMgr"), "function") ? z.getOption("advSearchMgr").call() : null;
                if (UWA.is(y)) {
                    var w = false;
                    y.getAndDisplayAdvancedSearch(w)
                }
            }
            if (z.view && z.collection.service_parameters && z.collection.service_parameters.order_by && z.collection.service_parameters.order_field) {
                var A = z.view.getManager().getOrderedColumnState();
                if (A) {
                    z.view.getManager().setColumnOrderState(A.dataIndex, "none")
                }
                z.view.getManager().setColumnOrderState(z.collection.service_parameters.order_field, z.collection.service_parameters.order_by)
            }
            if (!z.isReady) {
                z.view.getManager()._setColumnsWidth();
                z.isReady = true
            }
            var x = z.view.getManager().getNumberOfRows();
            z._setRowNumberWidth(z.view.getManager(), x, false);
            z._reDefColumns();
            z.updateColumnsNLS()
        },
        _emptyDataGridAndReloadFirstPage: function(C, E, w) {
            var A = this;
            var y = C.getManager();
            var B = Math.floor((Math.random() * 100000) + 1);
            A._emptyDataGrid();
            A.collection._resetState();
            A.collection.reset();
            v.mask(A.container);
            if (UWA.is(w)) {
                A.collection.service_parameters.order_by = w
            }
            if (UWA.is(E)) {
                A.collection.service_parameters.order_field = null;
                var D = E.split("/");
                if (UWA.is(D) && D.length > 0) {
                    A.collection.service_parameters.order_field = D.pop()
                }
            }
            var x = function() {
                v.unmask(A.container);
                if (A.collection.getRequestCriteria().service_params.adv_search) {
                    var G = UWA.is(A.getOption("advSearchMgr"), "function") ? A.getOption("advSearchMgr").call() : null;
                    if (UWA.is(G)) {
                        var F = false;
                        G.getAndDisplayAdvancedSearch(F)
                    }
                }
                if (A.view && A.collection.service_parameters && A.collection.service_parameters.order_by && A.collection.service_parameters.order_field) {
                    var H = A.view.getManager().getOrderedColumnState();
                    if (H) {
                        A.view.getManager().setColumnOrderState(H.dataIndex, "none")
                    }
                    A.view.getManager().setColumnOrderState(A.collection.service_parameters.order_field, A.collection.service_parameters.order_by)
                }
                c.mark("DS/SNResultUX/views/SearchTreeListView$_emptyDataGridAndReloadFirstPage$" + B + "$end")
            };
            var z = function(F) {
                v.unmask(A.container);
                c.mark("DS/SNResultUX/views/SearchTreeListView$_emptyDataGridAndReloadFirstPage$" + B + "$end")
            };
            A.collection.getFirstPageOfResults({
                reset: true,
                onComplete: x,
                onFailure: z
            })
        },
        _setRowNumberWidth: function(y, x, w) {
            var A = w ? x.toString() : (x + 40).toString();
            var z = x.toString();
            if (A.length > z.length || w) {
                if (A.length === 3) {
                    y.options.headersDimensions.width = 35
                } else {
                    if (A.length === 4) {
                        y.options.headersDimensions.width = 45
                    } else {
                        if (A.length > 4) {
                            y.options.headersDimensions.width = 55
                        }
                    }
                }
                y._adjustLayout()
            }
        },
        _emptyDataGrid: function() {
            var z = this;
            if (z.view && !n.is(z.view)) {
                console.error("!UWACore.is(that.view)");
                return null
            }
            if (z.collection && z.collection._snSkeleton && z.collection._snSkeleton.resetMultisel && z._viewRoot.currentViewId === "table") {
                z.collection._snSkeleton.resetMultisel()
            }
            var y = z.view.getManager();
            z._model.empty();
            y._setColumnsWidth();
            if (!n.is(z._emptyView)) {
                var A = z.getOption("itemViewOptions");
                this._emptyView = new i(A)
            }
            var x;
            if (UWA.is(UWA.Widgets) && UWA.is(UWA.Widgets.instances)) {
                UWA.Widgets.instances.forEach(function(B) {
                    if (B.id === z.getOption("widgetId")) {
                        x = n.extendElement(B.elements.body).getElement(".wux-datagrid")
                    }
                })
            } else {
                x = n.extendElement(document.body).getElement(".wux-datagrid");
                if (!UWA.is(x)) {
                    return
                }
            }
            var w = this._emptyView.render();
            if (n.is(w) && n.is(x)) {
                w.inject(x)
            }
        },
        setup: function(w) {
            this._parent(w);
            var x = this;
            this.listenTo(this.collection, {
                onSync: function() {
                    if (x.view) {
                        x.updateGridViewAfterSync()
                    }
                }
            })
        },
        destroy: function() {
            if (n.is(this._mySpinner)) {
                this._mySpinner.destroy();
                this._mySpinner = null
            }
            if (n.is(this.colCustoPanel) && n.is(this.colCustoPanel._requestClosePanel, "function")) {
                this.colCustoPanel._requestClosePanel()
            }
            this.colCustoPanel = null;
            s.unsubscribe(this._subscriptions.sortForAllView);
            this._parent()
        },
        _removeColumnCustoMask: function() {
            if (n.is(this.collection) && n.is(this.collection._snSkeleton) && n.is(this.collection._snSkeleton.getSearchActions, "function")) {
                var w = this.collection._snSkeleton.getSearchActions();
                if (n.is(w) && n.is(w.removeMask, "function")) {
                    w.removeMask()
                }
            }
        },
        defineColumnCusto: function() {
            var D = this;
            var I = null;
            var O = D.getOption("widgetId");
            if (!n.is(this.zIndexToUse)) {
                this.zIndexToUse = a.getZIndex(this.container)
            }
            if (D.collection.isEmpty()) {
                m._displayAlert({
                    message: g.get("ColumnCustomization_error_noResult"),
                    className: "warning",
                    widgetId: O
                });
                D._removeColumnCustoMask();
                return null
            }
            if (n.is(D.collection) && n.is(D.collection.service_parameters) && n.is(D.collection.service_parameters.query) && a.SearchTypeEnum.MY_RECENT_CONTENT === D.collection.service_parameters.query) {
                m._displayAlert({
                    message: g.get("SearchDataGridPreferences_error_RecentModeNotSupported"),
                    className: "warning",
                    widgetId: O
                });
                D._removeColumnCustoMask();
                return null
            }
            var E = false;
            if (n.is(D.collection.service_parameters.isAPQSearch) && D.collection.service_parameters.isAPQSearch === true) {
                var y = D.collection.getPQ();
                if (n.is(y) && n.is(y.pqName, "string") && y.pqName.length > 0) {
                    E = true
                }
            }
            var w = null;
            if (n.is(D.collection.options.tagger_proxy)) {
                w = D.collection.options.tagger_proxy.latest_tagValues
            }
            var F = [];
            if (n.is(w, "array") && w.length > 0) {
                var M = "";
                for (var L = 0; L < w.length; L++) {
                    var z = w[L];
                    if (z.sixw === "ds6w:what/ds6w:type") {
                        F.push("ds6wg:" + z.object);
                        M = z.dispValue
                    }
                }
                var K = null;
                if (F.length > 0) {
                    K = F.filter(function(R, Q, P) {
                        return Q == P.indexOf(R)
                    });
                    F = K;
                    if (E) {
                        var y = D.collection.getPQ();
                        I = {
                            typeName: y,
                            isPQ: true
                        }
                    } else {
                        if (1 === K.length) {
                            I = {
                                typeName: M,
                                isPQ: false
                            }
                        }
                    }
                }
                F.push("ds6wg:PLMEntity")
            }
            var x = null;
            if (n.is(D.collection.options.tagger_proxy)) {
                x = D.collection.options.tagger_proxy.getCurrentFilter()
            }
            if (!n.is(I) && !(n.is(x) && n.is(x.allfilters) && ((n.is(x.allfilters["ds6w:what/ds6w:type"]) && 1 === x.allfilters["ds6w:what/ds6w:type"].length) || (n.is(x.allfilters["ds6w:what/ds6w:kind"]) && 1 === x.allfilters["ds6w:what/ds6w:kind"].length) || (n.is(x.allfilters["sixw:ds6w:what/ds6w:type"]) && 1 === x.allfilters["sixw:ds6w:what/ds6w:type"].length) || (n.is(x.allfilters["sixw:ds6w:what/ds6w:kind"]) && 1 === x.allfilters["sixw:ds6w:what/ds6w:kind"].length))) && (!E)) {
                m._displayAlert({
                    message: g.get("SearchDataGridPreferences_error_OnlyOneTypeOrSubTypeSupported"),
                    className: "warning",
                    widgetId: O
                });
                D._removeColumnCustoMask();
                return null
            }
            var A = false;
            var N = null;
            if (n.is(x) && n.is(x.allfilters)) {
                if (n.is(x.allfilters["ds6w:what/ds6w:kind"]) && 1 === x.allfilters["ds6w:what/ds6w:kind"].length && n.is(x.allfilters["ds6w:what/ds6w:kind"][0].object) && n.is(x.allfilters["ds6w:what/ds6w:kind"][0].disptext)) {
                    I = {
                        typeName: x.allfilters["ds6w:what/ds6w:kind"][0].disptext,
                        isPQ: false
                    };
                    var G = ["ds6wg:" + x.allfilters["ds6w:what/ds6w:kind"][0].object];
                    F.push(G)
                } else {
                    if (n.is(x.allfilters["ds6w:what/ds6w:type"]) && 1 === x.allfilters["ds6w:what/ds6w:type"].length && n.is(x.allfilters["ds6w:what/ds6w:type"][0].object) && n.is(x.allfilters["ds6w:what/ds6w:type"][0].disptext)) {
                        A = true;
                        I = {
                            typeName: x.allfilters["ds6w:what/ds6w:type"][0].disptext,
                            isPQ: false,
                            className: "ds6wg:" + x.allfilters["ds6w:what/ds6w:type"][0].object
                        };
                        N = x.allfilters["ds6w:what/ds6w:type"][0].object
                    } else {
                        if (n.is(x.allfilters["sixw:vpmextension"]) && 1 === x.allfilters["sixw:vpmextension"].length && n.is(x.allfilters["sixw:vpmextension"][0].object) && n.is(x.allfilters["sixw:vpmextension"][0].displayValue)) {
                            I = {
                                typeName: x.allfilters["sixw:vpmextension"][0].displayValue,
                                isPQ: false
                            };
                            var J = [x.allfilters["sixw:vpmextension"][0].object];
                            F.push(J)
                        } else {
                            if (n.is(x.allfilters["sixw:ds6w:what/ds6w:type"]) && 1 === x.allfilters["sixw:ds6w:what/ds6w:type"].length && n.is(x.allfilters["sixw:ds6w:what/ds6w:type"][0].object) && n.is(x.allfilters["sixw:ds6w:what/ds6w:type"][0].displayValue)) {
                                A = true;
                                I = {
                                    typeName: x.allfilters["sixw:ds6w:what/ds6w:type"][0].displayValue,
                                    isPQ: false,
                                    className: x.allfilters["sixw:ds6w:what/ds6w:type"][0].object
                                };
                                N = x.allfilters["sixw:ds6w:what/ds6w:type"][0].object
                            }
                        }
                    }
                }
            }
            if (A) {
                e.loadRelevantInterfaces(N, function(S) {
                    var U = [];
                    for (var R = 0; R < S.interfaces.length; R++) {
                        if (UWA.is(S.interfaces[R]["automatic"]) && S.interfaces[R]["automatic"] === "Yes" || UWA.is(S.interfaces[R]["Automatic"]) && S.interfaces[R]["Automatic"] === "Yes") {
                            var Q = "";
                            Q = Q.concat("ds6wg:", S.interfaces[R]["name"]);
                            F.push(Q);
                            U.push(Q)
                        }
                    }
                    var T = o._asyncCallToPredicatesWS(F).then(function V(W) {
                        D.renderColumnsWithSuccess(W, D, I, U)
                    }, function P(W) {
                        D.renderColumnsWithFailure(D, I, W)
                    })
                })
            } else {
                var H = o._asyncCallToPredicatesWS(F).then(function C(P) {
                    D.renderColumnsWithSuccess(P, D, I)
                }, function B(P) {
                    D.renderColumnsWithFailure(D, I, P)
                })
            }
        },
        _launchColumnCustoPanel: function(z, x, y) {
            var B = this,
                A = n.clone(x),
                w = l._computeColToDisplayInCustoPanel(A, y);
            require(["DS/SNResultUX/utils/SearchDataGridPreferences"], function(C) {
                B.colCustoPanel = new C({
                    spreadsheet: B.nestedView.view,
                    availableColumns: w,
                    searchDatagridView: B,
                    predicateIntersection: y,
                    typeToHandle: z,
                    zIndexToUse: B.zIndexToUse
                });
                B.colCustoPanel.addEvent("onCloseColumnCustomizationPanel", function(D) {
                    if (n.is(B.colCustoPanel) && n.is(B.colCustoPanel.destroy, "function")) {
                        B.colCustoPanel.destroy()
                    }
                    B.colCustoPanel = null
                })
            });
            B._removeColumnCustoMask()
        },
        renderColumnsWithSuccess: function(G, C, E, D) {
            var N = C;
            var x = [];
            var w = {};
            var F = {};
            for (var I = 0, y = G.classPredicates.length; I < y; I++) {
                if (!n.is(G.classPredicates[I].className) || !n.is(G.classPredicates[I].vocabularyPredicateInfo)) {
                    console.warn("Unexpected response from GetRelevantPredicates !");
                    N._removeColumnCustoMask();
                    return null
                }
                if (n.is(E.className) && E.className.length > 0) {
                    for (var J = 0, M = G.classPredicates[I].vocabularyPredicateInfo.length; J < M; J++) {
                        if (n.is(G.classPredicates[I].vocabularyPredicateInfo[J], "object") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].nlsName, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].uri, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].name, "string") && G.classPredicates[I].className === E.className) {
                            if (!n.is(F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName])) {
                                F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName] = []
                            }
                            if (!n.is(w[G.classPredicates[I].vocabularyPredicateInfo[J].uri])) {
                                F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName].push(G.classPredicates[I].vocabularyPredicateInfo[J].uri);
                                x.push({
                                    dispValue: G.classPredicates[I].vocabularyPredicateInfo[J].nlsName,
                                    sixw: G.classPredicates[I].vocabularyPredicateInfo[J].uri,
                                    type: this._getPredicateTypeFromDataType(G.classPredicates[I].vocabularyPredicateInfo[J]) || "string",
                                    relatedObjectType: G.classPredicates[I].className,
                                    name: G.classPredicates[I].vocabularyPredicateInfo[J].name
                                });
                                w[G.classPredicates[I].vocabularyPredicateInfo[J].uri] = true
                            }
                        } else {
                            console.warn("Invalid data returned by Predicates WS for class " + G.classPredicates[I].className + " for index " + J + " !");
                            console.warn(G.classPredicates[I].vocabularyPredicateInfo)
                        }
                    }
                } else {
                    if (n.is(E.typeName)) {
                        for (var J = 0, M = G.classPredicates[I].vocabularyPredicateInfo.length; J < M; J++) {
                            if (n.is(G.classPredicates[I].vocabularyPredicateInfo[J], "object") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].nlsName, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].uri, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].name, "string")) {
                                if (!n.is(F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName])) {
                                    F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName] = []
                                }
                                if (!n.is(w[G.classPredicates[I].vocabularyPredicateInfo[J].uri])) {
                                    F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName].push(G.classPredicates[I].vocabularyPredicateInfo[J].uri);
                                    x.push({
                                        dispValue: G.classPredicates[I].vocabularyPredicateInfo[J].nlsName,
                                        sixw: G.classPredicates[I].vocabularyPredicateInfo[J].uri,
                                        relatedObjectType: G.classPredicates[I].className,
                                        name: G.classPredicates[I].vocabularyPredicateInfo[J].name
                                    });
                                    w[G.classPredicates[I].vocabularyPredicateInfo[J].uri] = true
                                }
                            } else {
                                console.warn("Invalid data returned by Predicates WS for class " + G.classPredicates[I].className + " for index " + J + " !");
                                console.warn(G.classPredicates[I].vocabularyPredicateInfo)
                            }
                        }
                    }
                }
                if (n.is(D) && D.length > 0) {
                    for (var J = 0, M = G.classPredicates[I].vocabularyPredicateInfo.length; J < M; J++) {
                        for (var K = 0, z = D.length; K < z; K++) {
                            if (n.is(G.classPredicates[I].vocabularyPredicateInfo[J], "object") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].nlsName, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].uri, "string") && n.is(G.classPredicates[I].vocabularyPredicateInfo[J].name, "string") && G.classPredicates[I].className === D[K]) {
                                if (!n.is(F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName])) {
                                    F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName] = []
                                }
                                if (!n.is(w[G.classPredicates[I].vocabularyPredicateInfo[J].uri])) {
                                    F[G.classPredicates[I].vocabularyPredicateInfo[J].nlsName].push(G.classPredicates[I].vocabularyPredicateInfo[J].uri);
                                    x.push({
                                        dispValue: G.classPredicates[I].vocabularyPredicateInfo[J].nlsName,
                                        sixw: G.classPredicates[I].vocabularyPredicateInfo[J].uri,
                                        relatedObjectType: G.classPredicates[I].className,
                                        name: G.classPredicates[I].vocabularyPredicateInfo[J].name
                                    });
                                    w[G.classPredicates[I].vocabularyPredicateInfo[J].uri] = true
                                }
                            } else {
                                console.warn("Invalid data returned by Predicates WS for class " + G.classPredicates[I].className + " for index " + J + " !");
                                console.warn(G.classPredicates[I].vocabularyPredicateInfo)
                            }
                        }
                    }
                }
            }
            var A = p.getSelectPredicates();
            if (UWA.is(A, "array")) {
                for (var H = x.length - 1; H >= 0; H--) {
                    if (-1 === A.indexOf(x[H].sixw)) {
                        x.splice(H, 1)
                    }
                }
            }
            for (var L = 0, B = x.length; L < B; L++) {
                if (n.is(F[x[L].dispValue], "array") && F[x[L].dispValue].length > 1) {
                    x[L].dispValue += " (" + x[L].relatedObjectType + ":" + x[L].sixw + ")"
                }
            }
            N._launchColumnCustoPanel(E, N._columnsAttributes, x)
        },
        _getPredicateTypeFromDataType: function(y) {
            var x = "";
            if (UWA.is(y) && UWA.is(y.range) && UWA.is(y.range.dataTypes) && UWA.is(y.range.dataTypes.length)) {
                x = y.range.dataTypes[0];
                var w = "string";
                if (x === "http://www.w3.org/2001/XMLSchema#string") {
                    w = "string"
                } else {
                    if (x === "http://www.w3.org/2001/XMLSchema#boolean") {
                        w = "boolean"
                    } else {
                        if (x === "http://www.w3.org/2001/XMLSchema#integer") {
                            w = "string"
                        } else {
                            if (x === "http://www.w3.org/2001/XMLSchema#dateTime") {
                                w = "date"
                            } else {
                                if (x === "http://www.w3.org/2001/XMLSchema#date") {
                                    w = "date"
                                } else {
                                    if (x === "http://www.w3.org/2001/XMLSchema#double") {
                                        w = "double"
                                    } else {
                                        if (x === "http://www.w3.org/2001/XMLSchema#real") {
                                            w = "double"
                                        } else {
                                            if (x === "http://www.w3.org/2001/XMLSchema#timestamp") {
                                                w = "date"
                                            } else {
                                                if (x === "http://www.w3.org/2001/XMLSchema#time") {
                                                    w = "date"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return w
        },
        renderColumnsWithFailure: function(B, w, x) {
            var A = B;
            console.error("promisePredicate fail !", arguments);
            var z = g.get("SearchDataGridPreferences_error_UnableToRetrievePredicates");
            if (n.is(x)) {
                if (x.message) {
                    z += "<br>" + x.message
                }
                if (x.url) {
                    z += "<br>" + x.url
                }
            }
            m._displayAlert({
                message: z,
                className: "warning",
                widgetId: B.getOption("widgetId")
            });
            var y = [];
            A._launchColumnCustoPanel(w, A._columnsAttributes, y)
        },
        _deleteCustoPanel: function() {
            if (n.is(this.colCustoPanel) && n.is(this.colCustoPanel._requestClosePanel, "function")) {
                this.colCustoPanel._requestClosePanel()
            }
        },
        _updateColumns: function(z, L, G) {
            var D = this;
            var P = D.getOption("widgetId");
            if (Array.isArray(z) && D._searchcom_socket && D.view.getManager()) {
                D._searchcom_socket.dispatchEvent("checkNewColomnForSort", z);
                var w = z.map(function(S) {
                    return S.dataIndex
                });
                var A = D.view.getManager().getOrderedColumnState();
                if (A && w.indexOf(A.dataIndex) === -1) {
                    if (h.getOption("apply_sort_on_modified_by_default")) {
                        D.collection.service_parameters.order_field = "ds6w:modified";
                        D.collection.service_parameters.order_by = "desc"
                    } else {
                        D.collection.service_parameters.order_field = "";
                        D.collection.service_parameters.order_by = ""
                    }
                }
            }
            var x = "",
                O = "",
                C, E = false;
            if (n.is(L, "string")) {
                x = L;
                O = L
            } else {
                if (n.is(L, "object")) {
                    x = L.custoName;
                    C = L.custoNLS;
                    O = L.custoId;
                    if (n.is(L.favPQ) && true === L.favPQ) {
                        E = true
                    }
                }
            }
            this._currentCustoViewId = O;
            var M = [];
            z = b.getCustoCellRequest(z);
            for (var K = 0, Q = z.length; K < Q; K++) {
                if (n.is(z[K], "object")) {
                    var J = z[K].dataIndex;
                    M.push(J.slice(J.lastIndexOf("/") + 1, J.length))
                }
            }
            D.collection.setAttributesToRetrieve(M);
            var R = q.getItem("DataGridColumnCusto");
            var F;
            if (n.is(R)) {
                if (n.is(R.activeView) && false === E) {
                    this._lastSelectedCustoViewId = R.activeView
                }
                if (n.is(R.views)) {
                    F = R.views
                }
            }
            if (!n.is(F)) {
                F = []
            }
            if (O !== "The_Default_Columns") {
                if (true === G) {
                    for (var I = F.length - 1; I >= 0; I--) {
                        var H = F[I];
                        if (H.viewId === O) {
                            F.splice(I, 1)
                        }
                    }
                    F.push({
                        viewId: O,
                        viewDefinition: z,
                        version: 2
                    })
                }
                var N = {
                    views: F
                };
                if (false === E) {
                    N.activeView = O
                } else {
                    if (n.is(R) && n.is(R.activeView)) {
                        N.activeView = R.activeView
                    }
                }
                q.setItem("DataGridColumnCusto", N);
                q.commit();
                if (true === G && O !== "TEMP_CUSTO") {
                    m._displayAlert({
                        message: g.replace(g.get("SearchDataGridPreferences_modal_saveSuccessful"), {
                            custo_name: n.is(C, "string") ? C : x
                        }),
                        className: "success",
                        widgetId: P
                    })
                } else {
                    if (O !== "TEMP_CUSTO") {
                        var B = x;
                        if (B.endsWith("-ADMIN")) {
                            B = B.slice(0, -6)
                        }
                        if (B.startsWith("###")) {
                            var y = B.substring(3, B.length);
                            B = g.replace(g.get("custo_PQ"), {
                                PQ: y
                            })
                        }
                        if (B.endsWith("-HIDDEN")) {
                            m._displayAlert({
                                message: g.get("SearchDataGridPreferences_modal_resetDone"),
                                className: "success",
                                widgetId: P
                            })
                        } else {
                            m._displayAlert({
                                message: g.replace(g.get("SearchDataGridPreferences_modal_applySuccessful"), {
                                    custo_name: B
                                }),
                                className: "success",
                                widgetId: P
                            })
                        }
                    } else {
                        m._displayAlert({
                            message: g.get("SearchDataGridPreferences_modal_applyTempCustoSuccessful"),
                            className: "success",
                            widgetId: P
                        })
                    }
                }
            } else {
                var R = q.getItem("DataGridColumnCusto");
                var F;
                if (n.is(R)) {
                    R.activeView = "The_Default_Columns"
                }
                this._lastSelectedCustoViewId = "The_Default_Columns";
                q.setItem("DataGridColumnCusto", R);
                q.commit();
                m._displayAlert({
                    message: g.get("SearchDataGridPreferences_modal_resetDone"),
                    className: "success",
                    widgetId: P
                })
            }
            this._columnsAttributes = z;
            this._columns = n.clone(this._columnsAttributes);
            this.reloadColumn();
            D._reDefColumns();
            this.comptuteNewColumnsNLS();
            D._forcedCustoView = O;
            D.collection._snSkeleton._loadFirstPage()
        },
        reloadColumn: function() {
            var w = this.view.options;
            w.columns.length = 3;
            var y = this._columns;
            for (var x = 0; x <= y.length - 1; x++) {
                if (y[x]) {
                    w.columns.push(y[x])
                }
            }
            if (this._model.getChildren() && this._model.getChildren().length > 0) {
                this._model.empty()
            }
            this.view.loadColumns(w.columns)
        },
        comptuteNewColumnsNLS: function() {
            var F = this;
            var z = {};
            var G = ["ds6wg:PLMEntity"];
            if (n.is(F.collection.service_parameters) && (F.collection.service_parameters.isAPQSearch)) {
                var y = null;
                if (n.is(F.collection.options.tagger_proxy)) {
                    y = F.collection.options.tagger_proxy.latest_tagValues
                }
                var G = [];
                if (n.is(y, "array") && y.length > 0) {
                    var M = "";
                    for (var L = 0; L < y.length; L++) {
                        var B = y[L];
                        if (B.sixw === "ds6w:what/ds6w:type") {
                            G.push("ds6wg:" + B.object);
                            M = B.dispValue
                        }
                    }
                    G.push("ds6wg:PLMEntity");
                    var K = G.filter(function(S, R, Q) {
                        return Q.indexOf(S) === R
                    })
                }
            }
            var P = {
                vocabIds: []
            };
            for (var A = 0, x = this._columnsAttributes.length; A < x; A++) {
                if (this._columnsAttributes[A].dataIndex.startsWith("ds6wg")) {
                    if (n.is(this._columnsAttributes[A].dataType) && !n.is(z[this._columnsAttributes[A].dataType])) {
                        z[this._columnsAttributes[A].dataType] = true;
                        G.push(this._columnsAttributes[A].dataType)
                    } else {
                        var C = this._columnsAttributes[A].dataIndex;
                        var N = C.indexOf(".");
                        if (N > 0) {
                            C = this._columnsAttributes[A].dataIndex.slice(0, N);
                            if (!n.is(z[C])) {
                                z[C] = true;
                                G.push(C)
                            }
                        }
                    }
                } else {
                    var w = this._columnsAttributes[A].dataIndex;
                    var O = o.getVocabId(w);
                    if (n.is(O)) {
                        if (!o.isLoaded(O)) {
                            if (-1 === P.vocabIds.indexOf(O)) {
                                P.vocabIds.push(O);
                                P[O] = []
                            }
                            P[O].push(w)
                        }
                    }
                    this._columnsAttributes[A].text = o.getNLSValueForPredicate(this._columnsAttributes[A].dataIndex)
                }
            }
            var J = P.vocabIds.length;
            if (J > 0) {
                for (var H = 0; H < J; H++) {
                    var O = P.vocabIds[H];
                    o.loadVocabulary(O, function(Q) {
                        if (n.is(Q) && Q.status === "success") {
                            var S = P[Q.id];
                            if (n.is(S)) {
                                F.view.getManager().prepareUpdateView();
                                for (var W = 0; W < S.length; W++) {
                                    var V = S[W];
                                    var U = o.getNLSValueForPredicate(V);
                                    F.view.getManager().setColumnOptions(V, {
                                        text: U
                                    })
                                }
                                var T = F._columnsAttributes.length;
                                for (var R = 0; R < T; R++) {
                                    var V = F._columnsAttributes[R].dataIndex;
                                    if (-1 !== S.indexOf(V)) {
                                        F._columnsAttributes[R].text = o.getNLSValueForPredicate(V)
                                    }
                                }
                                F.view.getManager().pushUpdateView()
                            }
                        } else {
                            console.warn("Error in PredicatesNLS.loadVocabulary !")
                        }
                    })
                }
            }
            if (G.length > 0) {
                var K = G.filter(function(S, R, Q) {
                    return Q.indexOf(S) === R
                });
                var I = o._asyncCallToPredicatesWS(G).then(function E(Q) {
                    F.retrieveNewNLSSuccess(F, Q)
                }, function D() {
                    console.log("promisePredicate fail !")
                })
            }
        },
        retrieveNewNLSSuccess: function(D, z) {
            if (!n.is(z.classPredicates)) {
                console.error("Unexpected response from GetRelevantPredicates !");
                return null
            }
            var H = false;
            for (var G = 0, x = D._columnsAttributes.length; G < x; G++) {
                if (D._columnsAttributes[G].dataIndex.startsWith("ds6wg:")) {
                    for (var y = 0, F = z.classPredicates.length; y < F; y++) {
                        if (!n.is(z.classPredicates[y].className) || !n.is(z.classPredicates[y].vocabularyPredicateInfo)) {
                            console.error("Unexpected response from GetRelevantPredicates !");
                            return null
                        }
                        for (var E = 0, w = z.classPredicates[y].vocabularyPredicateInfo.length; E < w; E++) {
                            if (z.classPredicates[y].vocabularyPredicateInfo[E].uri === D._columnsAttributes[G].dataIndex) {
                                if (D._columnsAttributes[G].text !== z.classPredicates[y].vocabularyPredicateInfo[E].nlsName) {
                                    D._columnsAttributes[G].text = z.classPredicates[y].vocabularyPredicateInfo[E].nlsName;
                                    H = true
                                }
                                E = w;
                                y = F
                            }
                        }
                    }
                }
            }
            var B = {};
            for (var A = 0, C = D._columnsAttributes.length; A < C; A++) {
                if (!n.is(B[D._columnsAttributes[A].text])) {
                    B[D._columnsAttributes[A].text] = 0
                }
                B[D._columnsAttributes[A].text] += 1
            }
            for (var A = 0, C = D._columnsAttributes.length; A < C; A++) {
                if (n.is(B[D._columnsAttributes[A].text]) && B[D._columnsAttributes[A].text] > 1) {
                    D._columnsAttributes[A].text += " (" + (n.is(D._columnsAttributes[A].dataType) ? D._columnsAttributes[A].dataType : n.is(D._columnsAttributes[A].dataIndex) ? D._columnsAttributes[A].dataIndex : A) + ")";
                    H = true
                }
            }
            if (true === H) {
                q.commit();
                D.updateColumnsNLS()
            }
        },
        setShadings: function(y) {
            this.log("DataGridView setShadings");
            if (this.collection && this.collection.length && this.view) {
                var w = 0;
                var x = this.view.getManager();
                if (x) {
                    x.prepareUpdateView();
                    this.collection.forEach(function(z) {
                        if (!y) {
                            x.unstyleRow(w)
                        } else {
                            for (var A = 0; A < y.length; A++) {
                                if (y[A].criteria(z)) {
                                    x.styleRow(w, {
                                        "background-color": y[A].color
                                    })
                                }
                            }
                        }
                        w++
                    });
                    x.pushUpdateView()
                }
            }
        },
        updateView: function() {
            this.view && this.view.getManager() && this.view.getManager().updateView()
        },
        createMultiCheckbox: function() {
            var w = this;
            w.view.getManager().registerReusableCellContent({
                id: "checkbox_search",
                buildContent: function() {
                    var x = new d();
                    x.getContent().addEventListener(f.POINTERDOWN, function(z) {
                        z.stopPropagation()
                    });
                    x.getContent().addEventListener(f.POINTERUP, function(z) {
                        z.stopPropagation()
                    });
                    x.getContent().addEventListener("touchstart", function(z) {
                        z.stopPropagation()
                    });
                    x.getContent().addEventListener("touchend", function(z) {
                        z.stopPropagation()
                    });
                    x.getContent().addEventListener("focus", function(z) {
                        z.preventDefault();
                        z.stopPropagation()
                    });
                    var y = w.view.getManager();
                    x.getContent().addEventListener("change", function(z) {
                        if (!x.ignoreUpdate) {
                            if (x.currentNodeModel === null) {
                                if (UWA.is(w.collection && w.collection.getSNSkeleton())) {
                                    if (x.checkFlag && y.getNodesXSO().get().length === 0) {
                                        s.publish({
                                            channel: w.collection.getSNSkeleton().getOption("messagingChannel"),
                                            topic: "onFetchAndSelectAll",
                                            data: {
                                                DoSelection: true
                                            }
                                        })
                                    } else {
                                        s.publish({
                                            channel: w.collection.getSNSkeleton().getOption("messagingChannel"),
                                            topic: "onResetMultisel",
                                            data: {}
                                        })
                                    }
                                }
                            }
                        }
                    });
                    return x
                }
            });
            w.initMultiCheckbox()
        },
        initMultiCheckbox: function() {
            var x = this.view.getManager();
            var w = x.getNodesXSO();
            w.onEmpty(function() {
                var y = x.getVirtualViewport();
                x.updateCellView(-1, "selection_search");
                for (var z = y.minRowID; z <= y.maxRowID; z++) {
                    x.updateCellView(z, "selection_search")
                }
            });
            w.onAdd(function(y) {
                x.updateCellView(-1, "selection_search");
                x.updateCellView(y, "selection_search")
            });
            w.onRemove(function(y) {
                x.updateCellView(-1, "selection_search");
                x.updateCellView(y, "selection_search")
            })
        },
        render: function() {
            this.log("TreeListView render");
            var w = this;
            w._parent();
            require(["DS/Tree/TreeListView", "DS/Tree/Manager"], function(C, A) {
                var z = A.extend({
                    multiselMode: false,
                    init: function(E, D) {
                        this._parent(E, D)
                    },
                    toMultiSelection: function(D) {
                        this.multiselMode = D;
                        var F = n.extendElement(this.elements.gridHeaderContainerRel).getElements(".column-action");
                        for (var E = 0; E < F.length; E++) {
                            F[E].style.display = D ? "none" : ""
                        }
                    },
                    isInMultiSelection: function() {
                        return this.multiselMode || this._modeIsMultiSel || w._iShiftDown
                    },
                    setColumnWidth: function(G, E, F) {
                        if (n.is(localStorage)) {
                            if (w.view && w.view._datagrid.options.columns) {
                                var H = {};
                                H[w.view._datagrid.options.columns[G].dataIndex] = E;
                                var D = JSON.stringify(H);
                                q.setItem("listColumnsWidth", D);
                                q.commit()
                            }
                        }
                        this._parent(G, E, F)
                    },
                    isColumnHidden: function(E) {
                        if (typeof E === "string") {
                            E = this.getColumnIDFromDataIndex(E)
                        }
                        var D = false;
                        if (this.getColumnWidth(E) === 0) {
                            D = true
                        }
                        if (n.is(this.options) && n.is(this.options.columns, "array") && E >= 0 && E < this.options.columns.length && this.options.columns[E].isHidden) {
                            D = true
                        }
                        return D
                    }
                });
                w._reinitialisationColums(w.options);
                var B = w._canMultiSelect;
                var x = {
                    columns: n.clone(w._columnsAttributes),
                    treeDocument: w._model,
                    height: "auto",
                    headersDimensions: {
                        width: 35,
                        height: 30
                    },
                    defaultCellHeight: 30,
                    resize: {
                        columns: true,
                        rows: false
                    },
                    apiVersion: 2,
                    selection: {
                        rowHeaders: false,
                        columnHeaders: false,
                        cells: false,
                        unselectAllOnEmptyArea: true,
                        canMultiSelect: B,
                        enableListSelection: true,
                        toggle: false
                    },
                    show: {
                        rowHeaders: true,
                        canMultiSelect: B
                    },
                    performances: {
                        buildLinks: false,
                        useRequestAnimationFrameRendering: false,
                        debounceCellInternalUpdateTimer: 0,
                    },
                    enableActiveUI: true,
                    enableKeyboardNavigation: true,
                    infiniteScrolling: true,
                    rowsAreDraggable: true,
                    nodesAreDraggable: false,
                    useTransparentScroller: false,
                    shouldDisplayTooltip: function(F) {
                        var E = "";
                        if (F.dataIndex === "selection") {
                            return {
                                longHelp: E
                            }
                        }
                        if (F.isHeader && n.is(F.manager.options.columns[F.virtualColumnID])) {
                            E = F.manager.options.columns[F.virtualColumnID].text
                        } else {
                            var D = null;
                            if (n.is(F.cellModel) && n.is(F.cellModel.options) && n.is(F.cellModel.options.value)) {
                                D = F.cellModel.options.value
                            }
                            if (n.is(F.nodeModel) && n.is(F.nodeModel._options) && n.is(F.nodeModel._options._attributes) && n.is(F.nodeModel._options._attributes[F.dataIndex])) {
                                D = F.nodeModel._options._attributes[F.dataIndex]
                            }
                            if (n.is(D)) {
                                if (n.is(D, "string")) {
                                    E = a.decodeHtml(D)
                                } else {
                                    if (n.is(D) && n.is(D.toString, "function")) {
                                        E = a.decodeHtml(D.toString())
                                    }
                                }
                            }
                        }
                        return {
                            longHelp: E
                        }
                    },
                    onDragStartColumnHeaderDefault: function(E, D) {
                        if (E) {
                            E.preventDefault();
                            E.stopPropagation()
                        }
                    }
                };
                x = b.initColumnsTreeList(x, w.options);
                var y = w.getOptionCommon();
                y = Object.assign(y, x);
                w.view = new C(y);
                a.isFUNActive("FUN075064") && w.createMultiCheckbox();
                w.updateGridViewAfterSync();
                w.view.inject(w.container);
                w._model.search_multiselMode && w.toggleMultiSelMode(true);
                w._managerInit();
                w._afterRender()
            });
            return this
        }
    });
    return r
});
define("DS/SNResultUX/views/SearchTileGridView", ["DS/SNResultUX/views/SearchGridView", "UWA/Core", "DS/SNInfraUX/SearchSettings"], function(c, a, b) {
    var d = c.extend({
        className: "TileGridView",
        attributes: {
            styles: {
                width: "100%",
                height: "100%"
            },
            "data-rec-id": "TileGridView"
        },
        bShowTooltip: false,
        _viewRoot: null,
        init: function(e) {
            this._parent(e);
            this.bShowTooltip = a.is(b.getOption("showTooltip")) ? b.getOption("showTooltip") : false;
            this.neverCheckbox = a.is(b.getOption("neverCheckbox")) ? b.getOption("neverCheckbox") : false;
            this.neverAction = a.is(b.getOption("neverAction")) ? b.getOption("neverAction") : false
        },
        onSearch: function(e) {
            this._parent(e);
            var f = this
        },
        onSwitch: function(e) {
            this._parent(e)
        },
        getMinNumberModel: function(f, e) {
            f = f || this._rowMaxNumber;
            e = e || this._columnsMaxNumber;
            return f * e
        },
        destroy: function() {
            this._parent()
        },
        render: function() {
            this.log("TileGridView render");
            var e = this;
            require(["DS/Tree/TileGridView"], function(g) {
                var f = e.getOptionCommon();
                e.view = new g(f);
                e.view.setCheckboxVisibilityFlag("atCellHover");
                if (e.neverCheckbox === true) {
                    e.view.setCheckboxVisibilityFlag("never")
                }
                e.view.setTitleDisplayedOnTwoLines && e.view.setTitleDisplayedOnTwoLines(true);
                e.view.options.responsiveWidthBehavior = true;
                e.view.options.shouldDisplayTooltipFlag = e.bShowTooltip;
                e.view.inject(e.container);
                e._model.search_multiselMode && e.toggleMultiSelMode(true);
                e.view.onGridViewCellDoubleClick(function(h) {
                    e.onItemDblClick(h)
                });
                e.view.onInfiniteScrollAsync(function(h) {
                    e.onInfiniteScrollAsync(h, function() {
                        e.view.infiniteScrollAsyncProcessDone()
                    })
                });
                e.view.onEndResizeOrOnReadyModelRequestAsync && e.view.onEndResizeOrOnReadyModelRequestAsync(function(h) {
                    e.onResizeOrFirstLoaded(h, function() {
                        e.view.EndResizeOrOnReadyModelRequestAsyncDone()
                    })
                });
                e._afterRender();
                e.onSearch()
            });
            return this
        }
    });
    return d
});
define("DS/SNResultUX/SNSkeletonMgt_v2", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class/Options", "UWA/Class/Events", "UWA/Class/Listener", "DS/WAFData/WAFData", "UWA/Utils/InterCom", "DS/WebappsUtils/Performance", "DS/MessageBus/MessageBus", "DS/W3DXComponents/Skeleton", "DS/W3DXComponents/Views/Layout/ListView", "DS/UIKIT/Alert", "DS/UIKIT/Mask", "DS/UIKIT/Native/Dropdown", "DS/UIKIT/DropdownMenu", "DS/UIKIT/Spinner", "DS/SNInfraUX/SearchDebug", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchPreferences", "DS/SNInfraUX/SearchCom", "DS/Utilities/Utils", "DS/SNInfraUX/SearchUtils", "DS/SNInfraUX/SearchViewServices", "DS/SNResultUX/utils/SearchActions", "DS/SNResultUX/utils/SearchLocalActions", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/utils/SearchViewOptions", "DS/SNResultUX/utils/ResultUX_customization", "DS/SNResultUX/utils/AdvSearchMgr", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNResultUX/views/SearchTreeListView", "DS/SNResultUX/views/SearchTileGridView", "DS/SNResultUX/views/SearchRespLargeTileGridView", "DS/SNResultUX/views/SearchRespThumbnailGridView", "DS/SNResultUX/views/SearchThumbnailGridView", "DS/SNResultUX/SearchPQListUX", "DS/SNResultUX/views/SearchCounterView", "DS/i3DXCompassPlatformServices/i3DXCompassPlatformServices", "DS/i3DXCompassPlatformServices/OpenWith", "DS/SNResultUX/utils/SearchDoubleClickHandler", "DS/WebRecordEnabler/Adapter", "DS/SNInfraUX/SearchVersioning", "css!DS/UIKIT/UIKIT.css"], function(G, M, g, d, n, o, O, t, C, S, I, r, H, s, m, x, D, F, R, L, J, c, E, B, q, a, v, w, p, P, K, h, y, A, z, i, k, Q, b, l, f, N, e, u) {
    var j = M.extend(D, g, d, n, {
        uwaClassName: "DS/SNResultUX/SNSkeletonMgt_v2",
        name: "DS_SNResultUX_SNSkeletonMgt_v2",
        _skeleton: null,
        _onesearch_collection: null,
        _panelTitle: null,
        _searchcom_socket: null,
        _compass_socket: null,
        _WebInWinCtxActionSocket: null,
        _currentItemView: null,
        _myDatagridView: null,
        _isStartWithTableView: false,
        _isFirstTimeTableViewSwitch: true,
        _WidgetTitleObj: null,
        _advSearchMgr: null,
        _searchActions: null,
        _model: null,
        ctxMenu: null,
        _currentItemViewCid: null,
        _BI_Shades: null,
        _selectionMode_techno: "nullToMany",
        _neverAction: false,
        _informationPanel: null,
        _lastSelectedItem: null,
        _lightBoxView: null,
        _destroyed: false,
        _ctxMenuTarget: null,
        _IsFirstTimeDone: false,
        _IsFirstPageOfResultsDone: false,
        _lastSearchOptions: null,
        _firstPage: 0,
        _default_results_perpage: 0,
        _in_app_multiSel: null,
        _printWindow: null,
        _subscriptions: null,
        init: function(U) {
            this.log("init");
            var W = this;
            window.onbeforeunload = function(aa) {
                if (G.is(W._printWindow)) {
                    W._printWindow.close()
                }
                return
            };
            this._subscriptions = {};
            this._WidgetTitleObj = {};
            if (G.is(U) && !G.is(U._selectionMode_techno)) {
                if (G.is(U.in_apps_search) && G.is(U.in_apps_search.multiSel)) {
                    if (true === U.in_apps_search.multiSel) {
                        U._selectionMode_techno = "nullToMany"
                    } else {
                        U._selectionMode_techno = "oneToOne"
                    }
                }
            }
            if (G.is(F) && G.is(F.options.search_settings) && G.is(F.options.search_settings.multiSel)) {
                if (F.options.search_settings.multiSel === false) {
                    U._selectionMode_techno = "oneToOne"
                }
            }
            U._neverAction = false;
            if (G.is(F) && G.is(F.options.search_settings) && G.is(F.options.search_settings.neverAction)) {
                if (F.options.search_settings.neverAction === true) {
                    U._neverAction = true
                }
            }
            this._parent(U);
            var Z = this.getOption("in_apps_search");
            if (Z) {
                v.setContextOptions(Z);
                if (UWA.is(Z.title, "string")) {
                    this._WidgetTitleObj.searchTitlePrefix = Z.title
                }
            } else {
                v.setContextOptions(null)
            }
            this._selectionMode_techno = U._selectionMode_techno || "nullToMany";
            this._neverAction = U._neverAction;
            this._skeleton = new S(this._buildSkeletonRenderers());
            if (G.is(this.getOption("renderTo"))) {
                this.render().inject(this.getOption("renderTo"));
                var T = "100%";
                if (this.getOption("furtive") === true) {
                    T = "calc(100% - 48px)"
                }
                this._skeleton.setHeight(T);
                this._skeleton.container.addClassName("onesearch_skeleton")
            }
            if (G.is(this.getOption("observable"), "object")) {
                this.listenTo(this.getOption("observable"), {
                    onSearchSkeletonPQ: function(aa) {
                        if (!G.is(W._skeleton)) {
                            console.error("No skeleton !");
                            return null
                        }
                        i.showPQSelector({
                            pqSelectionCallback: function(ab) {
                                if (F.getOption("search_web_in_win") === true) {
                                    if (window.hasOwnProperty("sendNotificationWebInWin") && G.is(sendNotificationWebInWin, "function")) {
                                        sendNotificationWebInWin("PQSelector", ab)
                                    }
                                }
                            }
                        })
                    },
                    onSearchSkeleton: function(ad) {
                        W._IsFirstTimeDone = false;
                        W._IsFirstPageOfResultsDone = false;
                        if (!G.is(W._skeleton)) {
                            console.error("No skeleton !");
                            return null
                        }
                        if (W._skeleton._alert) {
                            W._skeleton._alert.destroy();
                            W._skeleton._alert = null
                        }
                        if (W._searchActions.popover) {
                            W._searchActions.popover.hide()
                        }
                        if (W.getCollection().custoAction && W.getCollection().custoAction.popover) {
                            W.getCollection().custoAction.popover.hide()
                        }
                        if ("/onesearch/" !== W._skeleton.getRoute()) {
                            W._skeleton.slideBack()
                        }
                        var ac = {
                            query: ad.search_criteria,
                            mode: ad.search_mode,
                            refine: ad.tag_filter,
                            adv_search: ad.adv_search,
                            advanced_criteria: ad.advanced_criteria,
                            source: ad.source,
                            originalSearchCriteria: ad.originalSearchCriteria,
                            specific_source_parameter: ad.specific_source_parameter,
                            order_field: ad.order_field ? ad.order_field : ((W._onesearch_collection && W._onesearch_collection.service_parameters) ? W._onesearch_collection.service_parameters.order_field : ""),
                            order_by: ad.order_by ? ad.order_by : ((W._onesearch_collection && W._onesearch_collection.service_parameters) ? W._onesearch_collection.service_parameters.order_by : ""),
                            recent_search: ad.recent_search,
                            context: ad.context,
                            searchInCriteria: ad.searchInCriteria
                        };
                        if ((F.getOption("search_web_in_win")) && (G.is(W.order_field)) && (G.is(W.order_by))) {
                            ac.order_field = W.order_field;
                            ac.order_by = W.order_by
                        }
                        var aj = W.getCollection();
                        var aa = true;
                        if (ac.query == c.SearchTypeEnum.ADVANCED_SEARCH && !G.is(ad.advanced_criteria)) {
                            if (aj._ctx_options && aj._ctx_options.advanced_search) {
                                if (aj._ctx_options.advanced_search.searchOnInit) {
                                    if (G.is(aj._ctx_options.precond, "string") && aj._ctx_options.precond.trim().length > 0) {
                                        ad.advanced_criteria = aj._ctx_options.precond
                                    }
                                }
                                if (aj._ctx_options.advanced_search.showByDefault === false) {
                                    aa = false
                                }
                            }
                        }
                        var am = false;
                        if (G.is(ad.advanced_criteria) && ad.advanced_criteria.length) {
                            if (ac.query == c.SearchTypeEnum.ADVANCED_SEARCH) {
                                ac.query = "";
                                am = true
                            }
                            if (ac.query.length) {
                                ac.query += " AND "
                            }
                            ac.query += ad.advanced_criteria
                        }
                        if (G.is(ad.localFilter, "object")) {
                            ac.localFilter = ad.localFilter
                        }
                        var ab = false;
                        var ae = null;
                        var af = null;
                        var an = W.getCollection().getTaggerProxy();
                        var ag = an.getCurrentFilter();
                        if (G.is(ag)) {
                            ae = ag.localfilters
                        }
                        if (G.is(ad.tag_filter, "object")) {
                            af = ad.tag_filter.localfilters
                        }
                        if (!UWA.equals(ae, af)) {
                            if (((G.is(ae, "object") && !Object.keys(ae).length)) || !G.is(ae)) {
                                if (G.is(af)) {
                                    if (true != ad.refresh) {
                                        if (G.is(an) && G.is(an.setLocalFilter, "function")) {
                                            an.setLocalFilter(af, false);
                                            ab = true
                                        }
                                    }
                                }
                            }
                        }
                        if (ad.savedSearch && !ab) {
                            an.setLocalFilter(af, false)
                        }
                        if (G.is(ad.search_criteria_to_display, "string") && ad.search_criteria_to_display.length > 0) {
                            ac.search_criteria_to_display = ad.search_criteria_to_display
                        }
                        ac.incontext_precond_2 = ad.incontext_precond_2;
                        aj.setRequestCriteria("fed_search", ac);
                        aj.setSearchSource(ad.source);
                        var ak = W._skeleton.getViewAt(0);
                        if (ak && ak.contentsViews) {
                            for (var al in ak.contentsViews) {
                                ak.contentsViews[al].onSearch && ak.contentsViews[al].onSearch(ad)
                            }
                        }
                        aj._resetState();
                        aj.reset();
                        this._updateWidgetTitleWithNbResult(ad);
                        var ao = false;
                        var ai = aj.getRequestCriteria().service_params;
                        var ah = true;
                        if (G.is(an.filters) && G.is(an.filters.allfilters)) {
                            if (Object.keys(an.filters.allfilters).length !== 0) {
                                ah = false
                            }
                        }
                        if (G.is(ai) && ((ai.query === c.SearchTypeEnum.ADVANCED_SEARCH) || am) && !(ai.query === c.SearchTypeEnum.MY_RECENT_CONTENT) && ah) {
                            if (!(G.is(ai.refine) && G.is(ai.refine.PLMParameters) && G.is(ai.refine.PLMParameters.plmparam) && G.is(ai.refine.PLMParameters.plmparam.length > 0))) {
                                ao = true
                            }
                        }
                        if (aa && ao) {
                            aj.getTaggerProxy().clearLocalFilter();
                            if (G.is(W._advSearchMgr)) {
                                W._advSearchMgr.clearFilters();
                                W._advSearchMgr.getAndDisplayAdvancedSearch(true)
                            }
                        }
                        this._defineViews();
                        this._loadFirstPage()
                    }
                })
            }
            var Y = "com.ds." + this.getOption("widgetId");
            var X = "com.ds.compass";
            this._compass_socket = new O.Socket(Y);
            this._compass_socket.subscribeServer(X, window.parent);
            this._searchcom_socket = L.createSocket({
                socket_id: "search_skeleton_" + t.now(),
                widgetId: this.options.widgetId
            });
            if (!G.is(this._WebInWinCtxActionSocket)) {
                this._WebInWinCtxActionSocket = L.createSocket({
                    socket_id: "_searchcom_socket_CtxAction" + Math.floor((Math.random() * 100000) + 1)
                })
            }
            var V = this.getOption("messagingChannel");
            this._WebInWinCtxActionSocket.addListener("onSetCtxMenuForItemViewOptions", this.setCtxMenuForItemViewOptions.bind(this));
            this._subscriptions.onResetMultisel = C.subscribe({
                channel: V,
                topic: "onResetMultisel",
                callback: this.resetMultisel.bind(this)
            });
            this._WebInWinCtxActionSocket.addListener("onLogout", this.logout.bind(this));
            this._searchcom_socket.addListener("onItemSelected", J.debounce(this.onItemSelected.bind(this), 100));
            this._searchcom_socket.addListener("onItemUnselected", this.onItemUnselected.bind(this));
            this._searchcom_socket.addListener("onItemDblClick", this.onItemDblClick.bind(this));
            this._subscriptions.onFetchAndSelectAll = C.subscribe({
                channel: V,
                topic: "onFetchAndSelectAll",
                callback: this.onFetchAndSelectAllCallback.bind(this)
            });
            this._searchcom_socket.addListener("widgetResize", function() {
                if (this._searchActions) {
                    this._searchActions.updatePopoverPosition()
                }
                var ae = G.extendElement(document.body).getElements(".dropdown-root");
                var ad = G.extendElement(document.body).getElements(".icon-dropdown");
                var aa = null;
                if (G.is(ae, "array") && G.is(ad, "array")) {
                    aa = ae.concat(ad)
                } else {
                    if (G.is(ae, "array")) {
                        aa = ae
                    } else {
                        aa = ad
                    }
                }
                if (G.is(aa, "array")) {
                    for (var ac = 0, ab = aa.length; ac < ab; ac++) {
                        if (G.is(aa[ac]) && G.is(aa[ac].hide, "function")) {
                            aa[ac].hide()
                        }
                    }
                }
            }.bind(this));
            this._subscriptions.sortForAllView = C.subscribe({
                channel: V,
                topic: "sortForAllView",
                callback: this.sortForAllView.bind(this)
            });
            this._searchActions = new B({
                SNSkeleton: this
            })
        },
        destroy: function() {
            var V = this;
            this.log("destroy");
            this._destroyed = true;
            if (G.is(this._searchcom_socket)) {
                this._searchcom_socket.dispatchEvent("clearSearch", {
                    destroy: true
                })
            }
            if (this._onesearch_collection && this._onesearch_collection.service_parameters) {
                this._onesearch_collection.service_parameters.order_by = "";
                this._onesearch_collection.service_parameters.order_field = ""
            }
            var U = this.getHelperCollectionId();
            var X = c.getHelperCollection(U);
            if (X) {
                c.deleteHelperCollection(U)
            }
            C.unsubscribe(this._subscriptions.sortForAllView);
            C.unsubscribe(this._subscriptions.onFetchAndSelectAll);
            C.unsubscribe(this._subscriptions.onResetMultisel);
            if (this._skeleton && this._skeleton.getViewAt(0).contentsViews.tile || this._skeleton.getViewAt(0).contentsViews.thumbnail) {
                var T = this._skeleton.getViewAt(0).contentsViews.tile ? this._skeleton.getViewAt(0).contentsViews.tile : this._skeleton.getViewAt(0).contentsViews.thumbnail;
                var W = this._skeleton.getViewAt(0).contentsViews.thumbnail ? this._skeleton.getViewAt(0).contentsViews.thumbnail : this._skeleton.getViewAt(0).contentsViews.tile;
                T._searchcom_socket.removeListener("onSelectAll");
                T._searchcom_socket.removeListener("onSelectShift");
                W._searchcom_socket.removeListener("onSelectAll");
                W._searchcom_socket.removeListener("onSelectShift")
            }
            if (this._skeleton) {
                this._skeleton.destroy();
                this._skeleton = null
            }
            if (G.is(this._onesearch_collection) && G.is(this._onesearch_collection.setSNSkeleton)) {
                this._onesearch_collection.setSNSkeleton(null)
            }
            this._onesearch_collection.destroy();
            this._onesearch_collection = null;
            if (G.is(this._searchcom_socket)) {
                this._searchcom_socket.removeListener("onItemSelected", J.debounce(this.onItemSelected.bind(this), 0));
                this._searchcom_socket.removeListener("onItemUnselected", this.onItemUnselected.bind(this));
                this._searchcom_socket.removeListener("widgetResize");
                this._searchcom_socket.removeListener("onItemDblClick");
                this._searchcom_socket.disconnect();
                L.deleteSocket(this._searchcom_socket.id);
                this._searchcom_socket = null
            }
            if (G.is(this._compass_socket)) {
                this._compass_socket.unsubscribeServer("com.ds.compass");
                this._compass_socket.disconnect();
                this._compass_socket = null
            }
            if (G.is(this._WebInWinCtxActionSocket)) {
                this._WebInWinCtxActionSocket.removeListener("onSetCtxMenuForItemViewOptions", this.setCtxMenuForItemViewOptions.bind(this));
                this._WebInWinCtxActionSocket.removeListener("onLogout", this.logout.bind(this));
                this._WebInWinCtxActionSocket.disconnect();
                L.deleteSocket(this._WebInWinCtxActionSocket.id);
                this._WebInWinCtxActionSocket = null
            }
            this._myDatagridView = null;
            this._WidgetTitleObj = null;
            this._dynamicPredicateSetType = null;
            this._dynamicPredicateSetKind = null;
            if (this._informationPanel !== null) {
                this._informationPanel.destroy()
            }
            this._informationPanel = null;
            this._lastSelectedItem = null;
            if (G.is(this._mySpinner)) {
                this._mySpinner.destroy();
                this._mySpinner = null
            }
            if (G.is(this._searchActions)) {
                this._searchActions.destroy()
            }
            if (G.is(V._printWindow)) {
                V._printWindow.close()
            }
            if (G.is(this.ctxMenu)) {
                this.ctxMenu.destroy()
            }
            this._parent()
        },
        render: function() {
            var T = this._skeleton.render();
            return T
        },
        getCollection: function() {
            if (this._onesearch_collection === null) {
                throw new Error("Collection isn't defined yet")
            }
            return this._onesearch_collection
        },
        getContainer: function() {
            var T;
            var U = this;
            if (this._skeleton && this._skeleton.container) {
                T = this._skeleton.container
            } else {
                if (UWA.is(UWA.Widgets) && UWA.is(UWA.Widgets.instances)) {
                    UWA.Widgets.instances.forEach(function(V) {
                        if (V.id === U.getOption("widgetId")) {
                            T = G.extendElement(V.elements.body).getElement(".search-content-set-contents")
                        }
                    })
                } else {
                    T = G.extendElement(document.body).getElement(".search-content-set-contents")
                }
            }
            return T
        },
        onSkeletonReady: function() {},
        onItemDblClick: function(T) {
            l.handle({
                skeleton: this,
                id: T
            })
        },
        getCurrentScrollView: function() {
            if (G.is(this._skeleton)) {
                var U = this._skeleton.getViewAt(0);
                if (G.is(U) && G.is(U.contentsViews) && G.is(U.currentViewId) && U.currentViewId !== "table" && U.contentsViews[U.currentViewId]) {
                    if (G.is(U.contentsViews[U.currentViewId].nestedView.view)) {
                        var T = null;
                        if (G.is(U.contentsViews[U.currentViewId].nestedView.view.getScroller, "function")) {
                            T = U.contentsViews[U.currentViewId].nestedView.view.getScroller()
                        } else {
                            if (G.is(U.contentsViews[U.currentViewId].nestedView.view._getScroller, "function")) {
                                T = U.contentsViews[U.currentViewId].nestedView.view._getScroller()
                            }
                        }
                    }
                    return T
                }
            }
            return null
        },
        getCurrentView: function() {
            return this._skeleton.getViewAt(0) ? this._skeleton.getViewAt(0).contentsViews[this._skeleton.getViewAt(0).currentViewId] : null
        },
        getHelperCollectionId: function() {
            var T = null;
            var U = this.getOption("transient_context");
            if (G.is(U)) {
                if (U === "true" || U === true) {
                    T = c.TRANSIENT_WIDGET_HELPER_ID
                }
            }
            if (!UWA.is(T)) {
                var V = this.getOption("use_preexisting_call");
                if (V === true || V === "true") {
                    T = c.TRANSIENT_WIDGET_HELPER_ID
                }
            }
            if (!G.is(T)) {
                T = this.getOption("widgetId")
            }
            return T
        },
        copyDataFromHelperCollection: function(V, X) {
            if (G.is(V) && G.is(X)) {
                V.totalCount = UWA.clone(X.totalCount);
                if (V.totalCount === 0) {
                    var W = P.get("no_result");
                    if (G.is(W)) {
                        this._searchActions.setEmptyViewMessage(W)
                    }
                }
                V._indexingDate = UWA.clone(X._indexingDate);
                V._fedSearchLabel = UWA.clone(X._fedSearchLabel);
                V.state = UWA.clone(X.state);
                var U = V._ctx_options;
                X.forEach(function(Z) {
                    Z.collection = V;
                    var Y = false;
                    if (UWA.is(Z.isAShowOnlyObject, "function")) {
                        Y = Z.isAShowOnlyObject()
                    }
                    if (Y === false) {
                        w.getAvailableActions({
                            attributes: Z._attributes
                        }, function(aa) {
                            aa.forEach(function(ab) {
                                if (Z.action_ids.indexOf(ab.id) === -1) {
                                    Z.action_ids.push(ab.id);
                                    Z.actions.push(ab)
                                }
                            });
                            if (!Z._attributes.actions || Z._attributes.actions.length === 0) {
                                Z._attributes.actions = Z.actions.pluck("title")
                            }
                        }, {
                            inCtxOptions: U
                        })
                    }
                });
                X._fedsearchOptions.parse = false;
                X._fedsearchOptions.silent = false;
                var T = X.toArray();
                V.reset(T, X._fedsearchOptions);
                V._setTags(UWA.clone(X._helperSubjectsTags), UWA.clone(X._helpertagValues));
                if (!F.getOption("actionsProtocol_FUN065512")) {
                    this.computeCtxActions({
                        data: T,
                        rawData: false
                    })
                }
            }
        },
        _isOpenWithMenuAsked: function(X) {
            var U = null;
            if (UWA.is(X, "array") && !F.getOption("search_web_in_win")) {
                for (var T = 0; T < X.length && !UWA.is(U); T++) {
                    var V = X[T];
                    if (UWA.is(V)) {
                        if (V.id === "3DCompass_#OpenWith") {
                            if (UWA.is(V.internalHelper, "object")) {
                                var W = V.internalHelper.getCmdInfo();
                                if (UWA.is(W, "object")) {
                                    if ((UWA.is(W.type, "string") && W.type.length > 0) || (UWA.is(W.type, "array") && W.type.length > 0)) {
                                        U = {
                                            data: {
                                                items: [{
                                                    objectId: V.internalHelper.getObjectID(),
                                                    objectType: V.internalHelper.getType(),
                                                    envId: V.internalHelper.getPlatformID(),
                                                    serviceId: V.internalHelper.getServiceID()
                                                }]
                                            }
                                        };
                                        if (UWA.is(W.type, "string")) {
                                            U.data.items[0].objectTaxonomies = [W.type]
                                        } else {
                                            U.data.items[0].objectTaxonomies = W.type
                                        }
                                        X.splice(T, 1)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return U
        },
        _initDropDown: function(Y, U) {
            var V = this;
            var Z = Y;
            if (!G.is(Z)) {
                Z = []
            }
            if (Z.length == 0) {
                Z.push({
                    text: P.get("noActionsAvailable")
                })
            }
            var T = this._isOpenWithMenuAsked(Y);
            var X = {
                items: Z
            };
            if (UWA.is(U, "object")) {
                X.target = U.target
            }
            if (!UWA.is(X.target)) {
                X.target = this._ctxMenuTarget
            }
            if (!UWA.is(X.target)) {
                if (true !== F.getOption("search_web_in_win")) {
                    console.error("_initDropDown : ERROR, target div is not available for dropdown !")
                }
            }
            var W = undefined;
            if (UWA.is(U) && UWA.is(U.altPosition)) {
                W = {
                    pageX: U.altPosition.x,
                    pageY: U.altPosition.y
                };
                X.contextual = true
            }
            X.bound = false;
            X.removeOnHide = true;
            if (G.is(this.ctxMenu)) {
                this.ctxMenu.destroy()
            }
            if (F.getOption("search_web_in_win")) {
                X.id = "SearchMenu";
                this.ctxMenu = new s(X)
            } else {
                X.events = {
                    onHide: function() {
                        this.destroy();
                        V.ctxMenu = null
                    },
                    onClickOutside: function() {
                        this.destroy();
                        V.ctxMenu = null
                    }
                };
                this.ctxMenu = new m(X)
            }
            if (UWA.is(T, "object")) {
                new b().set3DXContent(T).render(this.ctxMenu)
            }
            if (UWA.is(W)) {
                this.ctxMenu.show(false, W)
            } else {
                this.ctxMenu.show()
            }
        },
        setCtxMenuForItemViewOptions: function(V) {
            if (!UWA.is(V)) {
                return
            }
            var Y = this;
            var U = V.actions_data;
            var ae = V.dropdownOptions;
            if (!(G.is(U) && G.is(U.actions))) {
                return
            }
            var X = this.getCollection();
            var ab = U.actions.length;
            var Z = F.getOption("max_item_for_contextualPanel");
            if ((ab > Z) && F.getOption("search_web_in_win")) {
                a._displayAlert({
                    message: P.get("warning_max_ctx_panel", {
                        nb1: ab
                    }),
                    className: "info",
                })
            }
            for (var aa = 0; aa < ab; aa++) {
                var W = X.get(U.actions[aa].id);
                if (G.is(W) && G.is(W.actions)) {
                    if (!G.is(U.actions[aa].actions)) {
                        U.actions[aa].actions = []
                    }
                    W.actions.forEach(function(ag) {
                        if (ag._attributes.multisel && U.actions.length > 1) {
                            U.actions[aa].actions.push(ag)
                        } else {
                            if (U.actions.length === 1) {
                                var af = Y.chechActionToAddInMenu(ag)
                            }
                        }
                        if (af === true) {
                            U.actions[aa].actions.push(ag)
                        }
                    })
                }
            }
            if (U.actions.length > 0) {
                var ac = Y._parseContextualMenu(U.actions);
                var ad = null;
                var T = ac.length;
                if (T == 1) {
                    ad = ac[0]
                } else {
                    ad = Y._menusIntersection(U.actions, ac)
                }
                Y._initDropDown(ad, ae)
            }
        },
        chechActionToAddInMenu: function(W) {
            var T = this;
            var V = true;
            if (!UWA.is(W)) {
                return
            }
            var X = F.getOption("nav_history");
            if (X === true) {
                if (W.id === "config_explore" || W.id === "whereUsed") {
                    var U = T.getOption("navHistory");
                    if (U === false) {
                        V = false
                    }
                }
            }
            return V
        },
        fetchAll: function(af) {
            var Y = this;
            var ab = "fetch";
            var ae = "fetch";
            if (G.is(af) && (G.is(af.type))) {
                ab = af.type
            }
            if (G.is(af) && (G.is(af.subType))) {
                ab = af.subType
            }
            if (G.is(af) && (G.is(af.action_type))) {
                ae = af.action_type
            }
            if (G.is(af) && (G.is(af.subType))) {
                ae = af.subType
            }
            if (G.is(Y._in_app_multiSel) && (Y._in_app_multiSel != "nullToMany") && (ae === "fetch")) {
                a._displayAlert({
                    message: P.get("error_select_all"),
                    className: "info",
                });
                return
            }
            var W = F.getOption("max_selection_for_selectall");
            Y.param = af;
            if (G.is(Y._searchActions.setSelected, "function")) {
                Y._searchActions.setSelected(Y._modelSelected)
            }
            var ad = F.getOption("max_selection_for_actions");
            var Z = W;
            var aa = this._skeleton.getViewAt(0);
            if (!G.is(aa)) {
                throw new Error("Error, rootView undefined in SNSkeletonMgt.fetchAll !")
            }
            var U = aa.collection.totalCount;
            if ((false === aa.collection.hasNextPage()) || (aa.collection.length >= W)) {
                Y.resetMultisel();
                var X = Math.max(W, aa.collection.length);
                if (U > X) {
                    ab = "msgType_" + ae;
                    ab = P.replace(P.get(ab), {
                        action_type: P.get("msgType_" + ae)
                    });
                    a._displayAlert({
                        message: P.get("warning_fetch_all", {
                            nb1: aa.collection.length,
                            nb2: aa.collection.totalCount,
                            msgType: ab
                        }),
                        className: "success",
                    })
                }
                if (G.is(af) && G.is(af.callback, "function")) {
                    af.callback.call(af.context, af)
                }
            } else {
                aa.collection.state.pageSize = Z;
                var ac = F.serialize();
                var V = JSON.parse(ac);
                Y._default_results_perpage = V.search_settings.results_perpage;
                V.search_settings.results_perpage = Z;
                F.initialize(V);
                aa.collection.reset();
                var T = Y.getContainer();
                T && H.mask(T);
                aa.collection.getFirstPageOfResults({
                    reset: true,
                    onComplete: function() {
                        console.log("SNSkeletonMgt_v2.fetchAll->onComplete getFirstPageOfResults");
                        var ah = aa.collection.totalCount;
                        var ag = Math.max(W, aa.collection.length);
                        if (ah > ag) {
                            ab = "msgType_" + ae;
                            ab = P.replace(P.get(ab), {
                                action_type: P.get("msgType_" + ae)
                            });
                            a._displayAlert({
                                message: P.get("warning_fetch_all", {
                                    nb1: aa.collection.length,
                                    nb2: aa.collection.totalCount,
                                    msgType: ab
                                }),
                                className: "success",
                            })
                        }
                        aa.collection.generateTreeModelAsync().then(function() {
                            var aj = F.serialize();
                            var ak = JSON.parse(aj);
                            ak.search_settings.results_perpage = Y._default_results_perpage;
                            F.initialize(ak);
                            H.unmask(T);
                            if (window.hasOwnProperty("sendNotificationWebInWin") && G.is(sendNotificationWebInWin, "function")) {
                                var ai = Y.getCollection().totalCount;
                                sendNotificationWebInWin("QueryEnd", JSON.stringify({
                                    nb_results: ai,
                                    collection: aa.collection
                                }))
                            }
                            if (G.is(af) && G.is(af.callback, "function")) {
                                af.callback.call(af.context, af)
                            }
                        })
                    },
                    onFailure: function() {
                        var ag = F.serialize();
                        var ah = JSON.parse(ag);
                        ah.search_settings.results_perpage = Y._default_results_perpage;
                        F.initialize(ah);
                        H.unmask(T);
                        if (G.is(af) && G.is(af.callback, "function")) {
                            af.callback.call(af.context, {
                                error: "TOO_MANY_RESULTS"
                            })
                        }
                    }
                })
            }
        },
        onFetchAndSelectAllCallback: function(T) {
            var U = this;
            if (!G.is(T)) {
                T = {}
            }
            T.callback = function(V) {
                if (!G.is(V.error)) {
                    U._selectAll()
                }
            };
            U.fetchAll(T)
        },
        notifyReset: function() {
            var U = this.getCollection();
            var T = U.getTaggerProxy();
            this.resetCompassSelection();
            if (G.is(T)) {
                T.unfocus()
            }
            this.notifySelectionAddinMode()
        },
        resetCompassSelection: function() {
            var T = {
                objectId: "",
                envId: "",
                contextId: ""
            };
            if (this._compass_socket) {
                this._compass_socket.dispatchEvent("onSetObject", T);
                this._compass_socket.dispatchEvent("onResetX3DContent", {})
            }
        },
        clearWebInWinCSO: function() {
            if (true === F.getOption("search_web_in_win")) {
                var T = [];
                var U = {
                    objets_name: T,
                };
                this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                    notif_name: "onAddToCSO",
                    notif_parameters: JSON.stringify(U)
                }, "search_web_in_win")
            }
        },
        resetMultisel: function() {
            this._model.unselectAll();
            this.notifyReset();
            this.clearWebInWinCSO()
        },
        logout: function() {
            if (G.is(this._searchActions) && (G.is(this._searchActions.logOut))) {
                this._searchActions.logOut()
            } else {
                console.error("!UWACore.is(this._searchActions) && (UWACore.is(this._searchActions.logOut)")
            }
        },
        _parseContextualMenu: function(W) {
            var V = this;
            var X = [];
            var T = 0;
            var U = W.length;
            for (T = 0; T < U; T++) {
                X[T] = this._getActionsForOneObject(W[T].id, W[T].actions, "")
            }
            return X
        },
        _getActionsForOneObject: function(Z, Y, W) {
            var X = this;
            var T = [];
            var U = 0;
            var V = Y.length;
            for (U = 0; U < V; U++) {
                T[U] = this._getOneActionForOneObject(Z, Y[U], W)
            }
            return T
        },
        _getActionsHelper: function(U) {
            var V = this;
            var T = this.getCollection();
            return {
                getValue: function(Y) {
                    var W = T.get(Y.id);
                    var X;
                    if (UWA.is(W)) {
                        var Z = Y.predicate ? Y.predicate : Y.attribute;
                        X = W.get(Z + "_value")
                    }
                    return X
                },
                getNLSValue: function(X) {
                    var W = T.get(X.id);
                    if (UWA.is(W)) {
                        return W.get(X.predicate)
                    }
                },
                getAllValues: function(X) {
                    var W = T.get(X.id);
                    if (UWA.is(W)) {
                        return W.toJSON()
                    }
                },
                setLabel: function(Y) {
                    var W = T.get(Y.id);
                    if (UWA.is(W)) {
                        var X = T.indexOf(W);
                        W.set("ds6w:label", Y.newLabel);
                        T.getTreeDocument().getNthRoot(X)._options.label = Y.newLabel;
                        T.getTreeDocument().getNthRoot(X)._options.grid["ds6w:label"] = Y.newLabel;
                        T.getTreeDocument().getNthRoot(X)._options.grid["ds6w:label_value"] = Y.newLabel;
                        V.getCurrentView().updateView()
                    }
                },
                getCurrentViewID: function() {
                    return V._skeleton.getViewAt(0).currentViewId
                },
                deleteResults: function(Y) {
                    for (var Z = 0; Z < Y.ids.length; Z++) {
                        var W = T.get(Y.ids[Z]);
                        if (UWA.is(W)) {
                            var X = T.indexOf(W);
                            T.remove(Y.ids[Z]);
                            T.totalCount--;
                            T.getTreeDocument().removeRoot(T.getTreeDocument().getNthRoot(X));
                            T.generateTreeModel();
                            V.getCurrentView().updateView()
                        }
                    }
                },
                displayAlert: function(W) {
                    W.widgetId = V.getOption("widgetId");
                    var X = UWA.clone(W, true);
                    if (X.level) {
                        X.className = X.level
                    }
                    a._displayAlert(X)
                },
                getServiceID: function(X) {
                    var W = T.get(X.id);
                    if (UWA.is(W)) {
                        return W.getServiceID()
                    }
                },
                getPlatformID: function(X) {
                    var W = T.get(X.id);
                    if (UWA.is(W)) {
                        return W.getPlatformID()
                    }
                },
                getServiceURL: function(X) {
                    var W = T.get(X.id);
                    if (UWA.is(W)) {
                        var Y = W.getServiceID();
                        if (F.getOption("search_web_in_win")) {
                            switch (Y) {
                                case "3DSpace":
                                    X.onComplete.call(undefined, T.getSearchRessources().get3DSpaceUrl());
                                    break;
                                default:
                                    if (UWA.is(X.onFailure, "function")) {
                                        X.onFailure.call(undefined, "unknown service ID in native context : " + X.serviceID)
                                    }
                            }
                        } else {
                            Q.getServiceUrl({
                                serviceName: Y,
                                platformId: W.getPlatformID(),
                                onComplete: function(Z) {
                                    if (UWA.is(X.onComplete, "function")) {
                                        X.onComplete.call(undefined, Z)
                                    }
                                },
                                onFailure: function() {
                                    if (UWA.is(X.onFailure, "function")) {
                                        X.onFailure.call()
                                    }
                                }
                            })
                        }
                    }
                },
                isMultiSelMode: function() {
                    if (U && U.selectedModels && U.selectedModels.length > 1) {
                        return true
                    }
                    return false
                },
                getType: function(W) {
                    var X;
                    if (W) {
                        X = this.getValue({
                            id: W,
                            attribute: "ds6w:type"
                        })
                    } else {
                        if (U && U.id) {
                            X = this.getValue({
                                id: U.id,
                                attribute: "ds6w:type"
                            })
                        } else {
                            if (U && U.selectedModels && U.selectedModels.length > 0) {
                                if (U.selectedModels[0]) {
                                    X = this.getValue({
                                        id: U.selectedModels[0].id,
                                        attribute: "ds6w:type"
                                    })
                                }
                            }
                        }
                    }
                    return X
                },
                getParentContainer: function() {
                    var W = null;
                    if (G.is(V) && G.is(V._skeleton) && G.is(V._skeleton.container)) {
                        W = V._skeleton.container.parentElement
                    }
                    return W
                },
                getClientInfo: function() {
                    return c.identifyClientInfo(V.getOption("addinMode"))
                },
                isAPinnedWidget: function() {
                    var Z = V.getOption("widgetId");
                    var X = false;
                    if (UWA.is(UWA.Widgets) && UWA.is(UWA.Widgets.instances, "array")) {
                        for (var Y = 0; Y < UWA.Widgets.instances.length; ++Y) {
                            var W = UWA.Widgets.instances[Y];
                            if (W.id == Z) {
                                if (UWA.is(W.getView, "function") && W.getView().type === "windowed") {
                                    X = true
                                }
                                break
                            }
                        }
                    }
                    return X
                },
                canOpenATab: function() {
                    var X = false;
                    var W = V.getOption("observable").getOption("isTabBarVisible");
                    if (UWA.is(W, "function")) {
                        X = W.call(undefined)
                    }
                    return X
                },
                getTarget: function() {
                    if (UWA.is(V._ctxMenuTarget)) {
                        return V._ctxMenuTarget
                    }
                    return null
                },
                dispatchEvent: function(W) {
                    V.getSearchActions().dispatchEvent(W.event, W.params)
                },
                setPopover: function(W) {
                    V.popover = W
                },
                isInContextMode: function(X) {
                    var W = V.getOption("in_apps_search");
                    if (UWA.is(W, "object")) {
                        return true
                    }
                },
                hidePopover: function() {
                    if (UWA.is(V.popover)) {
                        V.popover.hide();
                        V.popover = null
                    }
                },
                selectAll: function(W) {
                    V.onFetchAndSelectAllCallback(W)
                },
                unselectAll: function(W) {
                    V.resetMultisel()
                },
            }
        },
        _getOneActionForOneObject: function(aa, Y, W) {
            var X = this;
            var V;
            if (G.is(Y.items)) {
                V = {
                    text: Y.title,
                    fonticon: Y.icon,
                };
                if ((Y.id !== undefined) && (Y.id !== null)) {
                    V.actionId = Y.id;
                    V.id = Y.id
                } else {
                    if ((Y.title !== undefined) && (Y.title !== null)) {
                        V.id = Y.title
                    }
                }
                V.items = this._getActionsForOneObject(aa, Y.items, Y.title)
            } else {
                var Z = false,
                    T = false,
                    U = false;
                if (Y.id == "action-id-separator") {
                    V = {
                        className: "divider"
                    }
                } else {
                    if (F.getOption("actionsProtocol_FUN065512")) {
                        if (G.is(Y.collection)) {
                            Z = true
                        } else {
                            if (UWA.is(Y.image)) {
                                U = true
                            } else {
                                T = true
                            }
                        }
                    } else {
                        if (G.is(Y.collection)) {
                            if (G.is(Y.get("sourcejs"))) {
                                T = true
                            } else {
                                Z = true
                            }
                        } else {
                            U = true
                        }
                    }
                    if (F.getOption("actionsProtocol_FUN065512")) {
                        V = {
                            text: (U || T) ? Y.title : Y.get("title"),
                            icon: U ? Y.image : (T ? Y.icon : Y.get("icon")),
                            multisel: (U || T) ? Y.multisel : Y.get("multisel"),
                            sourcejs: (U || T) ? Y.sourcejs : Y.get("sourcejs")
                        };
                        if ((T || Z) && !F.getOption("search_web_in_win")) {
                            V.fonticon = V.icon;
                            delete V.icon
                        }
                    } else {
                        V = {
                            text: U ? Y.title : Y.get("title"),
                            icon: U ? Y.image : Y.get("icon"),
                            multisel: U ? Y.multisel : Y.get("multisel"),
                            sourcejs: U ? Y.sourcejs : Y.get("sourcejs")
                        }
                    }
                    if (U === true) {
                        V.availabilityMode = Y.availabilityMode
                    }
                    if (Y.id !== undefined) {
                        V.actionId = Y.id;
                        V.data = Y.id;
                        V.id = Y.id
                    }
                    if (Y.accelerator !== undefined) {
                        V.accelerator = U ? Y.accelerator : Y.get("accelerator")
                    }
                    if (G.is(Y.disabled)) {
                        V.disabled = U ? Y.disabled : Y.get("disabled")
                    }
                    V.handler = function(ad) {
                        var ab = {
                            action_id: Y.id,
                            object_id: aa,
                            object_cid: X._currentItemViewCid,
                            collection: X.getCollection(),
                            model: X.getCollection().get(aa),
                            actionsHelper: X._getActionsHelper({
                                id: aa
                            }),
                            object_ids: [aa],
                            widget_id: X.getOption("widgetId"),
                            nav_history: R.getItem("nav_history")
                        };
                        if (Z) {
                            Y.get("callback").call(undefined, ab, arguments);
                            X.dispatchEvent("onExploreAction", ab)
                        } else {
                            if (T) {
                                var ac = F.getOption("actionsProtocol_FUN065512") ? Y.sourcejs : Y.get("sourcejs");
                                if (UWA.is(ac, "string")) {
                                    require([ac], function(af) {
                                        af.executeAction(ab, arguments)
                                    }, function(af) {
                                        console.warn("Cannot load action handler " + af.requireModules);
                                        requirejs.undef(ac);
                                        if (UWA.is(ac, "string")) {
                                            var ag = ac.split("/");
                                            if (UWA.is(ag, "array") && ag.length > 2) {
                                                ab.actionsHelper.getServiceURL({
                                                    id: aa,
                                                    onComplete: function(ak) {
                                                        var ai = ag[0] + "/" + ag[1];
                                                        var al = ak + "/webapps";
                                                        for (var aj = 1; aj < ag.length - 1; aj++) {
                                                            al += "/" + ag[aj]
                                                        }
                                                        var ah = {};
                                                        ah[ai] = al;
                                                        require.config({
                                                            paths: ah
                                                        });
                                                        require([ac], function(am) {
                                                            am.executeAction(ab, arguments)
                                                        }, function(am) {
                                                            console.warn("Cannot load action handler " + am.requireModules)
                                                        })
                                                    }
                                                })
                                            }
                                        }
                                    })
                                } else {
                                    console.log("action hanlder not provided");
                                    var ae = Y.executeOptions;
                                    if (UWA.is(ae, "object")) {
                                        ae.selected_obj = ab.object_id;
                                        ae.displayAlert = ab.actionsHelper.displayAlert;
                                        q.executeWSAction(ae)
                                    } else {
                                        console.warn("no options provided to execute the action")
                                    }
                                }
                            } else {
                                require([Y.sourcejs], function(af) {
                                    af.executeAction(ab, arguments)
                                })
                            }
                        }
                    };
                    V.internalHelper = function() {
                        return {
                            getCmdInfo: function() {
                                var ab = undefined;
                                if (UWA.is(Y.get, "function")) {
                                    ab = Y.get("cmdInfo")
                                } else {
                                    ab = Y.cmdInfo
                                }
                                return ab
                            },
                            getObjectID: function() {
                                return aa
                            },
                            getPlatformID: function() {
                                return (X.getCollection().get(aa)).getPlatformID()
                            },
                            getServiceID: function() {
                                return (X.getCollection().get(aa)).getServiceID()
                            },
                            getType: function() {
                                return (X.getCollection().get(aa)).getType()
                            }
                        }
                    }()
                }
                if (G.is(W)) {
                    V.menu = W
                }
            }
            return V
        },
        _menusIntersection: function(X, ab) {
            var ad = [];
            var V = ab.length;
            if (V === 0) {
                return ad
            }
            var ad = ab[0];
            var ac = [];
            for (var Y = 1; Y < V; Y++) {
                var ag = ab[Y];
                var T = 0;
                if (G.is(ag) && G.is(ag.length)) {
                    T = ag.length
                }
                for (var W = 0; W < T; W++) {
                    var aa = ad.length;
                    var af = false;
                    for (var U = 0; U < aa; U++) {
                        if (G.is(ag[W].sourcejs) && G.is(ag[W].actionId) && G.is(ad[U].sourcejs) && G.is(ad[U].actionId)) {
                            if (ag[W].actionId === ad[U].actionId && ag[W].sourcejs === ad[U].sourcejs) {
                                af = true;
                                break
                            }
                        } else {
                            if (ag[W].items && ad[U].items) {
                                if (ag[W].text === ad[U].text) {
                                    af = true;
                                    var ae = [];
                                    ae[0] = ag[W].items;
                                    ae[1] = ad[U].items;
                                    var Z = this._menusIntersection(X, ae);
                                    ag[W].items = Z;
                                    break
                                }
                            }
                        }
                    }
                    if (af === true) {
                        ac.push(ag[W])
                    }
                }
                ad = ac;
                ac = []
            }
            this._updateHandler(X, ad);
            return ad
        },
        _handleAction: function(U, X, W) {
            var V = this;
            var T = {
                action_id: W[U].id,
                actionsHelper: V._getActionsHelper({
                    selectedModels: X
                }),
                collection: V.getCollection(),
                object_ids: function() {
                    var Z = [];
                    for (var Y = 0; Y < X.length; Y++) {
                        Z.push(X[Y].id)
                    }
                    return Z
                }(),
                widget_id: V.getOption("widgetId")
            };
            require([W[U].sourcejs], function(Y) {
                Y.executeAction(T, arguments)
            })
        },
        _updateHandler: function(ac, aa) {
            var Y = this;
            var W = ac.length;
            if (W === 0) {
                return aa
            }
            var X = 0;
            if (G.is(aa)) {
                X = aa.length
            }
            if (W > 1) {
                for (var V = 0; V < X; V++) {
                    for (var U = 0; U < 1; U++) {
                        if ((aa[V].handler !== undefined) & (aa[V].handler !== null)) {
                            if (F.getOption("actionsProtocol_FUN065512")) {
                                aa[V].handler = Y._handleAction.bind(Y, V, ac, aa)
                            } else {
                                var ab = {
                                    object_id: ac[U].id,
                                };
                                aa[V].handler = function(ae) {
                                    var af = this;
                                    var ad = ac[0].actions[0].sourcejs || ac[0].actions[0]._attributes.sourcejs;
                                    require([ad], function(ah) {
                                        var ai;
                                        for (var ag = 0; ag < af.items.length; ag++) {
                                            if (ae.id === af.items[ag].id) {
                                                ai = af.items[ag].actionId;
                                                break
                                            }
                                        }
                                        ac.action_id = ai;
                                        ac.collection = Y.getCollection();
                                        ah.executeAction.call(ah, ac, ab)
                                    })
                                }
                            }
                        } else {
                            if ((aa[V].items !== undefined) & (aa[V].items !== null)) {
                                var Z = aa[V].items;
                                var T = Z.length;
                                Y._updateHandler(ac, aa[V].items)
                            }
                        }
                    }
                }
            }
        },
        _buildSkeletonRenderers: function() {
            var U = this;
            var T = {
                onesearch: {
                    collection: "DS/SNResultUX/collections/SearchCollection",
                    collectionOptions: function() {
                        U.log("onesearch renderer collection options");
                        var V = F.getOption("results_perpage");
                        if (G.is(V) && (G.typeOf(V) !== "number")) {
                            V = parseInt(V)
                        }
                        var W = {
                            state: {
                                pageSize: V
                            },
                            event: {
                                onSetup: function(X) {
                                    U.log("onesearch renderer:onSetup of the collection");
                                    if (!G.is(U._advSearchMgr)) {
                                        U._advSearchMgr = new p({
                                            collection: U._onesearch_collection = X,
                                            tagger_proxy: U.getOption("tagger_proxy"),
                                            resources: U.getOption("resources")
                                        })
                                    }
                                    U._onesearch_collection = X;
                                    U.setup();
                                    U._onesearch_collection.setSearchRessources(U.getOption("resources"));
                                    U._onesearch_collection.setTaggerProxy(U.getOption("tagger_proxy"));
                                    U._onesearch_collection.addEvent("failure_on_parse", function(Y) {
                                        U._failure(X, Y, "failure_on_parse")
                                    });
                                    U._onesearch_collection.addEvent("response_treated", function(Y) {
                                        if (!F.getOption("actionsProtocol_FUN065512")) {
                                            U.computeCtxActions(Y)
                                        }
                                    });
                                    U._onesearch_collection.addEvent("update_title", function(Y) {
                                        U._updateWidgetTitleWithNbResult(Y)
                                    });
                                    U._onesearch_collection._ctx_options = U.getOption("in_apps_search");
                                    U._onesearch_collection.setSearchSource(U.getOption("source"));
                                    U._searchActions.setCollection(X);
                                    U._searchActions.setSkeleton(U._skeleton);
                                    X.setSNSkeleton(U);
                                    U.dispatchEvent("onSkeletonReady");
                                    U._model = U._onesearch_collection.getTreeDocument()
                                }
                            },
                            transient_context: U.getOption("transient_context")
                        };
                        return W
                    },
                    view: "DS/SNResultUX/views/SearchContentSet",
                    viewOptions: U._onesearch_viewOptions.bind(U),
                    fetchMode: "never",
                    swipe: false,
                    cacheFacets: false
                }
            };
            G.merge(T, w.availableviews());
            return T
        },
        _onesearch_viewOptions: function(Y) {
            this.log("_onesearch_viewOptions");
            var Z = this,
                ae = v.getItemViewOptions(this.getOption("resources"));
            ae.request_criteria = Z._retrieveRequestCriterias.bind(Z);
            ae.request_criteria_without_precond = Z._retrieveRequestCriteriasWithoutPrecond.bind(Z);
            ae.getCollection = Z.getCollection.bind(Z);
            var ab = this.getOption("in_apps_search");
            var T = this.getOption("pinToDashboard");
            if (G.is(ab) && G.is(ab.multiSel) && ab.multiSel == false) {
                Z._selectionMode_techno = "oneToOne"
            }
            Z._in_app_multiSel = Z._selectionMode_techno;
            var V = Z._searchActions.getGlobalActions({
                    itemViewOptions: ae,
                    XMLViewOptions: v.getXMLViewOptions(),
                    widgetId: Z.getOption("widgetId"),
                    in_apps_search: Z.getOption("in_apps_search"),
                    pinToDashboard: T
                }),
                ac = {
                    name: "onesearch",
                    lazyRender: true,
                    detail: {
                        title: P.get("TitleSkeleton"),
                        view: k
                    },
                    actions: G.is(V) ? V : {},
                    contents: {
                        useInfiniteScroll: true,
                        usePullToRefresh: false,
                        selectionMode: "oneToOne",
                        selectionMode_techno: Z._selectionMode_techno,
                        neverAction: Z._neverAction,
                        views: [{
                            id: "thumbnail",
                            view: z,
                            itemViewOptions: ae,
                            title: P.get("view.thumbnail.title"),
                            widgetId: Z.getOption("widgetId"),
                            advSearchMgr: function() {
                                return Z.getAdvSearchMgr()
                            }
                        }, {
                            id: "tile",
                            view: h,
                            itemViewOptions: ae,
                            title: P.get("view.tile.title"),
                            widgetId: Z.getOption("widgetId"),
                            advSearchMgr: function() {
                                return Z.getAdvSearchMgr()
                            }
                        }, {
                            id: "table",
                            view: K,
                            itemViewOptions: ae,
                            title: P.get("view.table.title"),
                            widgetId: Z.getOption("widgetId"),
                            advSearchMgr: function() {
                                return Z.getAdvSearchMgr()
                            }
                        }, {
                            id: "list",
                            view: I,
                            itemViewOptions: ae,
                            selectionMode: "oneToOne"
                        }],
                        itemViewOptions: {
                            getCurrentView: function() {
                                var ag = null;
                                var af = Z._skeleton.getViewAt(0);
                                if (G.is(af) && G.is(af.currentViewId) && G.is(af.contentsViews)) {
                                    ag = af.contentsViews[af.currentViewId].nestedView
                                }
                                return ag
                            },
                            getWidgetId: function() {
                                return Z.getOption("widgetId")
                            }
                        }
                    },
                    events: {
                        onSwitch: function() {
                            Z._defineViews();
                            var ah = Z.getOption("in_apps_search");
                            var ag = "LastSearchViewMode";
                            if (G.is(ah)) {
                                ag = "LastInAppsSearchViewMode"
                            }
                            R.setItem(ag, arguments[2]);
                            R.commit();
                            var ai = Z._skeleton.getViewAt(0);
                            if (ai) {
                                for (var af in ai.contentsViews) {
                                    if (G.is(ai.contentsViews[af]) && G.is(ai.contentsViews[af].onSwitch, "function")) {
                                        ai.contentsViews[af].onSwitch(ai.currentViewId)
                                    }
                                }
                            }
                            var aj = arguments[2];
                            Z._searchActions.setDisplayMode(aj);
                            if (G.is(Z.options) && G.is(Z.options.observable) && G.is(Z.options.observable.options) && G.is(Z.options.observable.options.update_preference, "function")) {
                                Z.options.observable.options.update_preference("searchViewMode", aj)
                            }
                            if (Z._informationPanel !== null) {
                                Z._informationPanel.switchViewMode()
                            }
                            if (Z._searchActions) {
                                Z._searchActions.updatePopoverPosition()
                            }
                            if (G.is(Z._myDatagridView) && G.is(Z._myDatagridView._deleteCustoPanel, "function")) {
                                Z._myDatagridView._deleteCustoPanel()
                            }
                            if (Z.popover) {
                                Z.popover.hide()
                            }
                            if (Z.getCollection().custoAction && Z.getCollection().custoAction.popover) {
                                Z.getCollection().custoAction.popover.hide()
                            }
                            setTimeout(function() {
                                Z._BI_Shades && Z.setShadings(Z._BI_Shades)
                            }, 500)
                        }
                    }
                };
            if (F.getOption("activeResponsiveView")) {
                ac.contents.views.splice(0, 2, {
                    id: "thumbnail",
                    view: A,
                    itemViewOptions: ae,
                    title: P.get("view.thumbnail.title"),
                    widgetId: Z.getOption("widgetId"),
                    advSearchMgr: function() {
                        return Z.getAdvSearchMgr()
                    }
                }, {
                    id: "tile",
                    view: y,
                    itemViewOptions: ae,
                    title: P.get("view.tile.title"),
                    widgetId: Z.getOption("widgetId"),
                    advSearchMgr: function() {
                        return Z.getAdvSearchMgr()
                    }
                })
            } else {
                if (R.getItem("activeLargeView") || (N.isActiveWithCurrentVersion({
                        R2019x: "BETA2"
                    }) && !R.getItem("deactiveLargeView"))) {
                    ac.contents.views.splice(1, 1, {
                        id: "tile",
                        view: y,
                        itemViewOptions: ae,
                        title: P.get("view.tile.title"),
                        widgetId: Z.getOption("widgetId"),
                        advSearchMgr: function() {
                            return Z.getAdvSearchMgr()
                        }
                    })
                }
            }
            var aa = null;
            if (G.is(UWA.Widgets) && G.is(UWA.Widgets.instances)) {
                UWA.Widgets.instances.forEach(function(af) {
                    if (af.id == Z.getOption("widgetId")) {
                        if (G.is(af.data) && G.is(af.data.searchViewMode, "string")) {
                            aa = af.data.searchViewMode
                        }
                    }
                })
            }
            var U = Z.getOption("in_apps_search");
            if (G.is(U) && G.is(U.UXOptions) && G.is(U.UXOptions.viewMode, "string") && U.UXOptions.viewMode.length > 0) {
                aa = U.UXOptions.viewMode
            }
            if (G.is(U) && (!G.is(aa) || !G.is(aa, "string") || 0 == aa.length)) {
                aa = R.getItem("LastInAppsSearchViewMode")
            }
            if (!G.is(aa) || !G.is(aa, "string") || 0 == aa.length) {
                aa = R.getItem("LastSearchViewMode")
            }
            if (!G.is(aa) || !G.is(aa, "string") || 0 == aa.length) {
                aa = F.getOption("defaultViewModeAfterCacheCleaning")
            }
            var X = ac.contents.views;
            for (var ad = 0, W = X.length; ad < W; ad++) {
                if (X[ad].id === aa) {
                    X[ad]["default"] = true;
                    break
                }
            }
            ac.tempSingleIconOnMobile = true;
            ac["data-rec-id"] = true;
            return ac
        },
        _failure: function(ab, Y, U) {
            if (!G.is(this._skeleton)) {
                throw new Error("Error, this._skeleton undefined in SNSkeletonMgt._failure!")
            }
            var W = [];
            if (F.getDebug() === false) {
                if (E.getFailureView() === false) {
                    var X = "error";
                    var T = "<b>" + P.get("error.msg.display") + "</b><br>" + P.get("error.msg.display.cmd");
                    if (G.is(Y, "string")) {
                        T += "<br><br><b>" + P.replace(P.get("fetchFailure"), {
                            error: Y
                        }) + "</b>";
                        W.push({
                            message: T,
                            className: X
                        })
                    } else {
                        if (G.is(Y, "object")) {
                            switch (Y.service) {
                                case "fed_search":
                                    if (G.is(Y.messages)) {
                                        Y.messages.forEach(function(af) {
                                            if (G.is(af.message)) {
                                                var ag = af.message.split("Error ");
                                                if (G.is(ag) && ag.length) {
                                                    T += "<br><br><b>" + ag[ag.length - 1] + "</b>"
                                                }
                                                X = af.className;
                                                W.push({
                                                    message: T,
                                                    className: X
                                                })
                                            }
                                        })
                                    }
                                    break;
                                default:
                                    if (G.is(Y.error)) {
                                        if (G.is(Y.error_description)) {
                                            T += "<br><br><b>" + Y.error + "-" + Y.error_description + "</b>"
                                        } else {
                                            if (G.is(Y.error.errorCode) && P.get(Y.error.errorCode) !== Y.error.errorCode) {
                                                T += "<br><br><b>" + P.get(Y.error.errorCode) + "</b>"
                                            } else {
                                                if (G.is(Y.error.errorCode) && G.is(Y.error.errorMessage)) {
                                                    T += "<br><br><b>" + P.get(Y.error.errorCode) + " : " + Y.error.errorMessage + "</b>"
                                                }
                                            }
                                        }
                                        if (Y.error.errorCode === "FS_CAS_AUTHENTICATION_ERROR") {
                                            if (G.is(this._searchActions) && (G.is(this._searchActions.logOut))) {
                                                this._searchActions.logOut()
                                            } else {
                                                console.error("!UWACore.is(this._searchActions) && (UWACore.is(this._searchActions.logOut)")
                                            }
                                        }
                                        W.push({
                                            message: T,
                                            className: X
                                        })
                                    }
                                    break
                            }
                        }
                    }
                } else {
                    return
                }
            } else {
                var ac = null;
                if (G.is(ab) && G.is(ab.search_ressources) && G.is(ab.search_ressources.active_tenant) && G.is(ab.search_ressources.available_tenants) && G.is(ab.search_ressources.available_tenants[ab.search_ressources.active_tenant]) && G.is(ab.search_ressources.available_tenants[ab.search_ressources.active_tenant].sources) && G.is(ab.search_ressources.available_tenants[ab.search_ressources.active_tenant].sources.search) && G.is(ab.search_ressources.available_tenants[ab.search_ressources.active_tenant].sources.search.url)) {
                    ac = ab.search_ressources.available_tenants[ab.search_ressources.active_tenant].sources.search.url + "/debug/diag?tenant=" + ab.search_ressources.active_tenant + "&label=" + ab.getFedSearchLabel()
                }
                var V = "<b>" + P.get("downloadTraces") + ": </b><a href=" + ac + '><span title="' + P.get("downloadTracesTooltip") + '" class="fonticon fonticon-download site-icon"></span></a>';
                var ad = new Error();
                var ae = (G.is(ad) && G.is(ad.stack)) ? ad.stack : null;
                var aa = V;
                var Z = G.is(ae) ? "<br>" + ae.toString() : "";
                if (this._skeleton._alert) {
                    this._skeleton._alert.destroy();
                    this._skeleton._alert = null
                }
                if (G.is(ab)) {
                    ab._search_in_progress = false
                }
                if (G.is(Y, "string")) {
                    W.push({
                        message: "<b><br>" + P.replace(P.get("fetchFailure"), {
                            error: Y
                        }) + "</b>" + aa + Z,
                        className: "error"
                    })
                } else {
                    if (G.is(Y, "object")) {
                        switch (Y.service) {
                            case "fed_search":
                                Y.messages.forEach(function(af) {
                                    W.push({
                                        message: "<b>" + af.message + "</b><br>" + aa,
                                        className: af.className
                                    })
                                });
                                break;
                            default:
                                if (G.is(Y.error)) {
                                    if (G.is(Y.error_description)) {
                                        W.push({
                                            message: "<b>" + Y.error + "-" + Y.error_description + "</b><br>" + aa + Z,
                                            className: "error"
                                        })
                                    } else {
                                        if (G.is(Y.error.errorCode) && P.get(Y.error.errorCode) !== Y.error.errorCode) {
                                            W.push({
                                                message: "<b>" + P.get(Y.error.errorCode) + "</b>",
                                                className: "error"
                                            })
                                        } else {
                                            if (G.is(Y.error.errorCode) && G.is(Y.error.errorMessage)) {
                                                W.push({
                                                    message: "<b>" + P.get(Y.error.errorCode) + " : " + Y.error.errorMessage + "</b><br>" + aa + Z,
                                                    className: "error"
                                                })
                                            }
                                        }
                                    }
                                    if (Y.error.errorCode === "FS_CAS_AUTHENTICATION_ERROR") {
                                        if (G.is(this._searchActions) && (G.is(this._searchActions.logOut))) {
                                            this._searchActions.logOut()
                                        } else {
                                            console.error("!UWACore.is(this._searchActions) && (UWACore.is(this._searchActions.logOut)")
                                        }
                                    }
                                }
                                break
                        }
                    } else {
                        return
                    }
                }
            }
            if (W.length > 0) {
                this._skeleton._alert = new r({
                    className: "search-alert",
                    visible: true,
                    autoHide: false,
                    closable: true,
                    closeOnClick: false,
                    messages: W,
                    attributes: {
                        "data-rec-id": "search-alert"
                    }
                });
                if (this._skeleton.container.isInjected()) {
                    this._skeleton._alert.inject(this._skeleton.container, "top")
                } else {
                    this._skeleton._alert.inject(document.body, "top")
                }
            }
        },
        _retrieveRequestCriterias: function() {
            var T = {};
            if (G.is(this.getCollection())) {
                T = this.getCollection().getRequestCriteria()
            }
            return T
        },
        _retrieveRequestCriteriasWithoutPrecond: function() {
            var V = {};
            if (G.is(this.getCollection())) {
                V = this.getCollection().getRequestCriteria()
            }
            var T = v.getContextOptions();
            if (G.is(T) && G.is(T.precond) && G.is(T.default_with_precond) && G.is(T.show_precond)) {
                if (T.default_with_precond === true && T.show_precond === false) {
                    var U = " AND " + T.precond;
                    if (G.is(V.service_params) && G.is(V.service_params.query)) {
                        if (V.service_params.query.indexOf(U, V.service_params.query.length - U.length) !== -1) {
                            V.without_precond = V.service_params.query.replace(new RegExp(U + "$"), "")
                        }
                    }
                }
            }
            return V
        },
        _getAndDisplayLastIndexTime: function() {
            var X = this;
            if (!F.getOption("show_last_indexation_time")) {
                return
            }
            if (G.is(this._onesearch_collection) && G.is(this._onesearch_collection.service_parameters) && G.is(this._onesearch_collection.service_parameters.query) && c.SearchTypeEnum.MY_RECENT_CONTENT === this._onesearch_collection.service_parameters.query) {
                return
            }
            var W = X.getCollection();
            if (G.is(W)) {
                var ad = W.getIndexingDate();
                if (G.is(ad, "object")) {
                    var V = null;
                    var ac = "";
                    for (var U in ad) {
                        if (G.is(ad[U]) && ad[U] != -1) {
                            var ab = new Date(ad[U] * 1000);
                            var Z = ab.toLocaleString();
                            if (ac.length > 0) {
                                ac += "<br>"
                            }
                            ac += P.replace(P.get("lastVaultIndexedTime"), {
                                vault: U,
                                time: Z
                            });
                            if (!V) {
                                V = ad[U]
                            } else {
                                if (ad[U] < V) {
                                    V = ad[U]
                                }
                            }
                        }
                    }
                    var Y = null;
                    if (V) {
                        var ab = new Date(V * 1000);
                        var T = new Date();
                        var aa = (T - ab) / 1000 / 3600;
                        if (aa > 24 || ab.getDay() != T.getDay()) {
                            Y = ab.toLocaleString()
                        } else {
                            Y = ab.toLocaleTimeString()
                        }
                    }
                    this.updateLastIndexInfo(ab, Y)
                }
            }
        },
        _defineViews: function() {
            var T = this;
            var U = T._skeleton.getViewAt(0);
            if (U && U.currentViewId === "table") {
                if (!G.is(T._myDatagridView)) {
                    T._myDatagridView = U.contentsViews.table
                }
            } else {
                if (U && U.currentViewId === "tile") {
                    if (!G.is(T._myTileGridView)) {
                        T._myTileGridView = U.contentsViews.tile
                    }
                } else {
                    if (U && U.currentViewId === "thumbnail") {
                        if (!G.is(T._myThumbnailGridView)) {
                            T._myThumbnailGridView = U.contentsViews.thumbnail
                        }
                    }
                }
            }
        },
        updateLastIndexInfo: function(T, V) {
            if (this.indexedtimeIcon) {
                this.indexedtimeIcon.className = "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-clock";
                var X;
                if (this.indexedtimeIcon && T) {
                    var Y = new Date() - T;
                    var W = F.getOption("Recent_Content_Delta_Time");
                    var U = W * 60000;
                    if (Y <= U) {
                        this.indexedtimeIcon.removeClassName("icon-darkgray");
                        this.indexedtimeMenu.items[1].elements.container.hide()
                    } else {
                        if (Y > U) {
                            this.indexedtimeIcon.addClassName("icon-darkgray");
                            this.indexedtimeMenu.items[1].elements.container.show();
                            this.indexedtimeMenu.updateItem({
                                id: this.indexedtimeMenu.items[1].id,
                                text: P.get("warningIndexed"),
                                fonticon: "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-attention"
                            })
                        }
                    }
                    X = P.replace(P.get("lastIndexedTime"), {
                        indexTime: V,
                        recentDelta: W
                    });
                    this.indexedtimeMenu.items[0].elements.container.setAttribute("timestampIndex", T.getTime());
                    this.indexedtimeMenu.updateItem({
                        id: this.indexedtimeMenu.items[0].id,
                        text: X
                    });
                    this.indexedtimeMenu.elements.container.setStyles({
                        "max-width": "350px"
                    });
                    this.indexedtimeMenu.items[0].elements.container.setStyles({
                        "text-transform": "none"
                    });
                    this.indexedtimeMenu.items[1].elements.container.setStyles({
                        "text-transform": "none",
                        "font-weight": "bold"
                    });
                    this.updateByUXOptions(V)
                }
            }
        },
        updateByUXOptions: function(V) {
            if (G.is(this.options.observable) && G.is(this.options.observable.onesearch_indexedtimeIcon) && G.is(this.options.observable.onesearch_indexedtimeIcon.tooltip) && G.is(this.options.observable.onesearch_indexedtimeIcon.tooltip.setBody, "function")) {
                var U = this.getCollection().getSNSkeleton() && this.getCollection().getSNSkeleton().getOption("in_apps_search");
                var T = U && U.UXOptions && !U.UXOptions.searchRecentContent;
                var W = U && U.UXOptions && !U.UXOptions.lastIndexationTime;
                this.options.observable.indexedtimeMenu.enabled = !T;
                if (T && !W) {
                    this.options.observable.onesearch_indexedtimeIcon.style.cursor = "default";
                    this.options.observable.onesearch_indexedtimeIcon.tooltip.setBody(P.replace(P.get("lastIndexedTimeTooltip"), {
                        indexTime: V
                    }))
                } else {
                    if (!T && W) {
                        this.options.observable.onesearch_indexedtimeIcon.tooltip.setBody(P.get("switchToRecentContent"))
                    } else {
                        if (T && W) {
                            this.options.observable.onesearch_indexedtimeIcon.remove()
                        } else {
                            this.options.observable.onesearch_indexedtimeIcon.tooltip.setBody(P.get("switchToRecentContent") + "<br>" + P.replace(P.get("lastIndexedTimeTooltip"), {
                                indexTime: V
                            }))
                        }
                    }
                }
            }
        },
        _updateWidgetTitleWithNbResult: function(T) {
            if (G.is(this._WidgetTitleObj)) {
                if (G.is(T)) {
                    if (G.is(T.originalSearchCriteria)) {
                        this._WidgetTitleObj.search_criteria = T.originalSearchCriteria
                    }
                    if (G.is(T.search_criteria_to_display, "string")) {
                        this._WidgetTitleObj.search_criteria = T.search_criteria_to_display
                    }
                    if (G.is(T.applicativeTitle)) {
                        this._WidgetTitleObj.applicativeTitle = T.applicativeTitle;
                        if (G.is(T.applicativeTitleWithResults)) {
                            this._WidgetTitleObj.applicativeTitleWithResults = T.applicativeTitleWithResults
                        }
                    } else {
                        this._WidgetTitleObj.applicativeTitle = "";
                        this._WidgetTitleObj.applicativeTitleWithResults = ""
                    }
                }
                if (G.is(this._onesearch_collection) && G.is(this._onesearch_collection.state) && G.is(this._onesearch_collection.state.totalRecords)) {
                    this._WidgetTitleObj.nb_results = this._onesearch_collection.state.totalRecords
                } else {
                    this._WidgetTitleObj.nb_results = null
                }
            }
            this.setTitle(this._WidgetTitleObj)
        },
        setTitle: function(ad) {
            if (!G.is(ad, "object")) {
                throw new Error("Invalid Arg in SNSkeleton.setTitle!")
            }
            var T = new Date();
            var ah = new Date(T.getTime() - F.getOption("Recent_Content_Delta_Time") * 60000);
            var ac = (T - ah) / 1000 / 3600;
            var ab = ah.toLocaleTimeString();
            if (ac > 24 || ah.getDay() != T.getDay()) {
                ab = ah.toLocaleString()
            }
            if (!G.is(ad.nb_results) && (G.is(this._onesearch_collection) && G.is(this._onesearch_collection.state) && G.is(this._onesearch_collection.state.totalRecords))) {
                ad.nb_results = this._onesearch_collection.state.totalRecords
            }
            this._WidgetTitleObj = ad;
            var X = this;
            var V = false;
            if (G.is(X._onesearch_collection) && G.is(X._onesearch_collection.service_parameters)) {
                if (c.SearchTypeEnum.ADVANCED_SEARCH === X._onesearch_collection.service_parameters.query || (G.is(X._onesearch_collection.service_parameters.adv_search) && true == X._onesearch_collection.service_parameters.adv_search)) {
                    ad.specialSearchKey = "adv_search_launch"
                } else {
                    if (c.SearchTypeEnum.FAVORITE_SEARCH === X._onesearch_collection.service_parameters.query || c.SearchTypeEnum.FAVORITE_SEARCH === ad.search_criteria) {
                        ad.specialSearchKey = "myContent_searchFav"
                    } else {
                        if (c.SearchTypeEnum.MY_CONTENT === X._onesearch_collection.service_parameters.query) {
                            ad.specialSearchKey = "myContentTitle"
                        } else {
                            if (c.SearchTypeEnum.MY_RECENT_CONTENT === X._onesearch_collection.service_parameters.query) {
                                if (this._WidgetTitleObj.search_criteria === "*" || this._WidgetTitleObj.search_criteria === c.SearchTypeEnum.MY_RECENT_CONTENT) {
                                    ad.specialSearchKey = "AllRecentSearchTitle"
                                } else {
                                    ad.specialSearchKey = "RecentSearchTitle"
                                }
                            } else {
                                if (ad.specialSearchKey === "SearchTitleSavedSearch") {
                                    V = true
                                }
                                ad.specialSearchKey = "SearchTitle"
                            }
                        }
                    }
                }
            }
            var aa = "";
            var ag = G.is(ad.searchTitlePrefix, "string") ? ad.searchTitlePrefix : "";
            if (ag.length > 0) {
                ag += " - "
            }
            if (!G.is(this._WidgetTitleObj.applicativeTitle) || this._WidgetTitleObj.applicativeTitle.length <= 0) {
                var ae = G.is(ad.specialSearchKey, "string") ? ad.specialSearchKey : "SearchTitle";
                if (G.is(this._WidgetTitleObj.nb_results)) {
                    ae += "WithResults"
                }
                if ((G.is(ad.search_criteria_to_display, "string"))) {
                    aa = ad.search_criteria_to_display
                } else {
                    if (G.is(ad.search_criteria, "string") && ad.search_criteria.length > 0) {
                        aa = ad.search_criteria
                    }
                }
                if (aa.length > 0) {
                    ag += P.replace(P.get(ae), G.is(ad.replacingString, "object") ? ad.replacingString : {
                        search_criteria: aa,
                        nb_results: ad.nb_results,
                        date: ab
                    })
                }
            } else {
                ag += P.replace(G.is(this._WidgetTitleObj.nb_results) ? this._WidgetTitleObj.applicativeTitleWithResults : this._WidgetTitleObj.applicativeTitle, {
                    search_criteria: (G.is(ad.search_criteria_to_display, "string") && ad.search_criteria_to_display.length > 0) ? ad.search_criteria_to_display : ad.search_criteria,
                    nb_results: ad.nb_results,
                    date: ab
                })
            }
            if (ad.replacingString !== undefined) {
                if (G.is(ad.replacingString.search_name)) {
                    var af = ad.replacingString.search_name;
                    if (af !== undefined) {
                        ag = ag.replace(ad.replacingString.search_criteria, af)
                    }
                }
            }
            if (X._panelTitle !== ag) {
                X._panelTitle = ag
            }
            var Z = "";
            if (UWA.is(X._panelTitle, "string") && X._panelTitle.length > 0) {
                if (UWA.is(X.getCollection())) {
                    var U = X.getCollection().getSearchRessources();
                    if (UWA.is(U) && U.getAvailableTenants().length > 1) {
                        var Y = U.getActiveTenant();
                        if (UWA.is(Y, "string")) {
                            Z = U.getTenantDisplayName(Y);
                            if (UWA.is(Z, "string") && Z.length > 0) {
                                X._panelTitle += " (" + Z + ")"
                            }
                        }
                    }
                }
            }
            var W = X._panelTitle;
            if (ad.specialSearchKey === "SearchTitle" && aa.length > 0) {
                W = aa;
                if (UWA.is(Z, "string") && Z.length > 0) {
                    W += " (" + Z + ")"
                }
            }
            var ai = X.getOption("observable");
            if (UWA.is(ai)) {
                ai.dispatchEvent("onTitleUpdate", {
                    panelTitle: X._panelTitle,
                    tab_title: W,
                    tab_tooltip: X._panelTitle,
                })
            }
        },
        getTitle: function() {
            if (!G.is(this._panelTitle)) {
                this.setTitle(this._WidgetTitleObj)
            }
            return this._panelTitle
        },
        getAdvSearchMgr: function() {
            return this._advSearchMgr
        },
        getSearchActions: function() {
            return this._searchActions
        },
        setShadings: function(T) {
            this._BI_Shades = T;
            var V = this.getCollection();
            if (V.length && this._skeleton) {
                var U = this._skeleton.getViewAt(0);
                T && U.setShadings(T)
            }
        },
        getDataGridView: function() {
            return this._myDatagridView
        },
        computeCtxActions: function(X) {
            if (!G.is(this._onesearch_collection)) {
                throw ("invalid state: SNSkeletonMgt._onesearch_collection is null !")
            }
            var Y = this;
            if (G.is(X.data, "array")) {
                var U = [];
                var W = X.data.length;
                for (var T = 0; T < W; T++) {
                    var ab = X.data[T];
                    if (G.is(ab)) {
                        var V = X.rawData ? ab["ds6w:what/ds6w:type_value"] : ab.get("ds6w:what/ds6w:type_value");
                        if (!G.is(V)) {
                            V = X.rawData ? ab["ds6w:type_value"] : ab.get("ds6w:type_value")
                        }
                        if (V === "SavedSearch") {
                            U.push(ab.id)
                        }
                    }
                }
                var aa = function() {
                    if (G.is(Y._myDatagridView) && G.is(Y._myDatagridView.view)) {
                        return Y._myDatagridView.view.getManager()
                    }
                };
                if (U.length > 0) {
                    var Z = Y._onesearch_collection.getSearchRessources().getFetchOptions({
                        service_name: "actions_for_results",
                        service_data: {
                            ids: U
                        },
                        original_options: {
                            onComplete: function(af) {
                                var al = {},
                                    ae = 0,
                                    ad = "";
                                if (G.is(af, "string") && af.length > 0) {
                                    al = G.Json.decode(af)
                                } else {
                                    al = af
                                }
                                if (al.status === "success") {
                                    var ai = UWA.Class.extend(g, {
                                        _collection: null,
                                        init: function(am) {
                                            this.setOptions(am);
                                            this._collection = am.collection
                                        },
                                        executeAction: function() {
                                            var an = arguments;
                                            if (G.is(an) && G.is(an.length) && an.length > 0) {
                                                an[0].collection = this._collection
                                            }
                                            var am = this.getOption("sourcejs");
                                            require([am], function(ao) {
                                                Y._onesearch_collection.custoAction = ao;
                                                ao.executeAction.apply(ao, an)
                                            })
                                        }
                                    });
                                    var aj = aa();
                                    for (var ae = 0; ae < al.actions.length; ae += 1) {
                                        ad = al.actions[ae].actions;
                                        var ak = Y._onesearch_collection.get(al.actions[ae].id);
                                        if (ak) {
                                            for (var ag = 0; ag < al.actions[ae].actions.length; ag++) {
                                                var ac = al.actions[ae].actions[ag];
                                                ac.collection = Y._onesearch_collection;
                                                var ah = new ai(ac);
                                                ac.callback = ah.executeAction.bind(ah);
                                                ak.actions.push(ac)
                                            }
                                        }
                                    }
                                    if (aa()) {
                                        aa().updateView()
                                    }
                                }
                            },
                            onFailure: function(ac) {
                                Y.log("Cannot retrieve the actions");
                                Y.log(ac.message)
                            }
                        }
                    });
                    if (Y._onesearch_collection.getSearchRessources().is_odt_source() === true) {
                        console.warn("No action retrieved in ODT mode")
                    } else {
                        o.authenticatedRequest(Z.url, Z)
                    }
                }
            }
        },
        getGlobalDownOpen: function() {
            if (UWA.is(this._skeleton)) {
                var T = this._skeleton.getViewAt(0);
                return T.getElement(".fonticon-down-open")
            }
        },
        launchGlobalDropdown: function() {
            var T = {
                target: this.getGlobalDownOpen(),
                events: {
                    onHide: function() {
                        this.destroy()
                    },
                    onClickOutside: function() {
                        this.destroy()
                    }
                }
            };
            if (this._model.getSelectedNodes().length >= 0) {
                this.getCurrentView().launchContextMenu(this._model.getSelectedNodes()[0], T)
            }
        },
        computeCtxActions2: function(U, T) {
            var V = this;
            if (this.ctxMenu && this.ctxMenu.isVisible) {
                this.ctxMenu.hide();
                this.ctxMenu = null
            }
            if (!UWA.is(T, "object")) {
                T = {
                    skeleton: this
                }
            } else {
                T.skeleton = this
            }
            q.computeCtxActions(U, T)
        },
        ActivateDeactivateInformationsPanel: function() {
            if (a.getinformationPanel() === false) {
                return
            }
            var V = this;
            var W = true;
            var U = function() {
                var Y = V.getCurrentScrollView();
                if (UWA.is(Y) && UWA.is(V._lastSelectedItem)) {
                    var Z = V.getCollection().indexOf(V._lastSelectedItem);
                    if (Z === -1) {
                        Z = 0
                    }
                    if (Z >= 0) {
                        var aa = null;
                        var X = V.getCollection().getTreeDocument().getRoots();
                        if (UWA.is(X, "array")) {
                            if (Z < X.length) {
                                aa = X[Z];
                                if (aa && G.is(Y.scrollToCellAt, "function")) {
                                    Y.scrollToCellAt({
                                        cellID: aa._getRowID(true)
                                    })
                                }
                            }
                        }
                    }
                }
            };
            if (V._informationPanel === null) {
                require(["DS/SNResultUX/views/InformationsPanelView"], function(aa) {
                    var X;
                    if (R.getItem("nav_history")) {
                        var Z = V.getSearchWidget();
                        if (UWA.is(Z)) {
                            var Y = G.extendElement(Z.elements.body).getElementsByClassName("searchContainer")[0];
                            X = {
                                parentContainer: Y,
                                lastSelectedItem: V._lastSelectedItem
                            }
                        }
                    } else {
                        X = {
                            parentContainer: V._skeleton.getViewAt(0),
                            lastSelectedItem: V._lastSelectedItem
                        }
                    }
                    V._informationPanel = new aa(X);
                    V._informationPanel._initInformationsPanel();
                    V.breturn = true;
                    V._informationPanel.addEvent("onLightBoxPanelCreated", function(ac) {
                        var ab = U()
                    })
                })
            } else {
                if (V._informationPanel !== null) {
                    V._informationPanel.switchvisibleFlag();
                    W = V._informationPanel.getvisibleFlag();
                    if (W === true) {
                        var T = U()
                    }
                }
            }
            if (V._informationPanel !== null && W === false) {
                W = V._informationPanel.getvisibleFlag()
            }
            return W
        },
        ActivateDeactivatePreviewPanel: function() {
            if (a.getpreviewPanel() === false) {
                return
            }
            var T = this;
            var U = true;
            if (T._lightBoxView === null) {
                require(["DS/SNResultUX/views/LightBoxView"], function(X) {
                    var V = T._skeleton.container.parentElement;
                    var W = {
                        parentContainer: V,
                        treeDocument: T._model,
                        collection: T.getCollection(),
                        model: T._lastSelectedItem,
                        treeListView: T._myDatagridView,
                        widget_id: T.getOption("widgetId")
                    };
                    T._lightBoxView = new X(W);
                    T._lightBoxView._initPlayer();
                    T._lightBoxView.addEvent("onLightBoxPanelClose", function(Z) {
                        T.log("onLightBoxPanelClose");
                        var Y = false;
                        T.options.observable.managepreviewPanel(Y)
                    })
                })
            } else {
                if (T._lightBoxView !== null) {
                    T._lightBoxView.activate_deactivate(T._lastSelectedItem);
                    U = T._lightBoxView._LightBoxPanel.visibleFlag
                }
            }
            return U
        },
        sortForAllView: function(U) {
            var W = this;
            if (F.getOption("search_web_in_win")) {
                W.order_by = U.order_by;
                W.order_field = U.order_field
            }
            var X = this.getOption("observable").getOption("update_preference");
            if (UWA.is(X)) {
                X.call(null, "order_by", U.order_by);
                X.call(null, "order_field", U.order_field)
            }
            if (!G.is(W._onesearch_collection) || !G.is(W._onesearch_collection.service_parameters)) {
                throw new Error("No collection or service_parameters in SNSkeletonMgt.sortForAllView!")
            }
            if (G.is(W._onesearch_collection.service_parameters.query) && c.SearchTypeEnum.MY_RECENT_CONTENT === W._onesearch_collection.service_parameters.query) {
                W._onesearch_collection.sortCollection(U)
            } else {
                var Z = W._onesearch_collection;
                Z._resetState();
                Z.reset();
                Z.service_parameters.order_field = U.order_field;
                Z.service_parameters.order_by = U.order_by;
                var T = W.getContainer();
                T && H.mask(T);
                var V = function() {
                    W.getCollection().generateTreeModel();
                    H.unmask(T)
                };
                var Y = function() {
                    H.unmask(T)
                };
                Z.getFirstPageOfResults({
                    reset: true,
                    onComplete: V,
                    onFailure: Y
                })
            }
        },
        onItemSelected: function(ao) {
            var aa = this;
            var ac = this.getCollection();
            var ae = ac.get(ao);
            if (ae !== null) {
                aa._lastSelectedItem = ae
            }
            var af = ac.getTreeDocument();
            var ad = af.getXSO().get();
            var V = this.getCurrentView().isMultiSelMode();
            C.publish({
                channel: this.getOption("messagingChannel"),
                topic: "updateSelectionNumber",
                data: {
                    number: ad.length,
                    isMultiSelMode: V
                }
            });
            var al = [];
            ad.forEach(function(ar) {
                al.push(ac.get(ar._options.id))
            });
            if (al.length == 0) {
                aa._lastItemsSelected = [];
                aa._modelSelected = [];
                if (G.is(aa._searchActions.setSelected, "function")) {
                    aa._searchActions.setSelected(aa._modelSelected)
                }
            } else {
                if (G.is(aa._searchActions.setSelected, "function")) {
                    aa._searchActions.setSelected(al)
                }
            }
            if (!G.is(ac)) {
                console.error("No collection in onItemSelect !");
                return
            }
            var X = ac.getSearchRessources();
            var aj = ac.getTaggerProxy();
            var T = [];
            if (al.length == 0) {
                aa.notifyReset()
            } else {
                var ap = [],
                    am = [],
                    ak = {},
                    U = null,
                    aq = null;
                for (var ag = 0, Z = al.length; ag < Z; ag++) {
                    var ae = al[ag];
                    if (!G.is(ae)) {
                        throw new Error("Invalid itemModel in SNSkeletonMgt.onItemSelect")
                    }
                    U = ae.get("id");
                    if (!G.is(U, "string")) {
                        throw new Error("Unable to get id of object in SNSkeletonMgt.onItemSelect")
                    }
                    ap.push({
                        objectType: ae.get("ds6w:type_value"),
                        objectId: U,
                        envId: ae.getPlatformID(),
                        contextId: ""
                    });
                    T.push({
                        id: U,
                        session_object: ae.hasOwnProperty("session_object")
                    });
                    aq = c.getTaggerSubject({
                        id: U,
                        source: ae.getSourceID()
                    });
                    am.push(aq);
                    var W = ae.get("sourceid_value");
                    if (G.is(W, "string")) {
                        ak[aq] = (W.indexOf("3dspace") >= 0) ? "3DSpace" : "6WTagger"
                    }
                }
                var ah = a.buildCompassSelectionData({
                    widgetId: G.is(aa.getOption("widgetId")) ? aa.getOption("widgetId") : "",
                    selectedModels: al
                });
                if (1 == al.length) {
                    var Y = ap[0];
                    if (G.is(ah) && G.is(ah.data) && G.is(ah.data.items, "array") && ah.data.items.length === 1) {
                        Y = ah.data.items[0]
                    }
                    this._compass_socket.dispatchEvent("onSetObject", Y)
                }
                this._compass_socket.dispatchEvent("onSetX3DContent", ah);
                this.notifySelectionAddinMode(ah);
                if (G.is(aj)) {
                    aj.focusOnSubjects(am, null, ak)
                }
            }
            if (F.getOption("search_web_in_win")) {
                var an = {
                    objets_name: T,
                };
                this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                    notif_name: "onAddToCSO",
                    notif_parameters: JSON.stringify(an)
                }, "search_web_in_win")
            }
            this.dispatchEvent("selected_obj", al);
            if (a.getinformationPanel() === true) {
                if (
                    /*!UWACore.is(selectedViewItems) && selectedViewItems === null &&*/
                    G.is(window.event)) {
                    aa._currentItemView = window.event.currentTarget;
                    aa._currentItemView.container = window.event.currentTarget
                }
                var ai = false;
                var ab = 0;
                if (G.is(al, "array")) {
                    ab = al.length
                }
                if (ab !== 0) {
                    if (aa._lastSelectedItem !== null) {
                        al.forEach(function(ar) {
                            if (ar.id === aa._lastSelectedItem.id) {
                                ai = true
                            }
                        })
                    }
                }
                if (ai === false) {
                    aa._lastSelectedItem = al[al.length - 1]
                }
                if (aa._informationPanel !== null) {
                    if (ab === 0) {
                        aa._informationPanel.setInfomationPanelObject(null)
                    } else {
                        if (aa._lastSelectedItem) {
                            aa._informationPanel.setInfomationPanelObject(aa._lastSelectedItem)
                        }
                    }
                }
                aa._lastSelectedItem = null;
                if (al.length) {
                    aa._lastSelectedItem = al[al.length - 1]
                }
                ae = aa._lastSelectedItem
            }
            aa.options.events.onItemViewClick && aa.options.events.onItemViewClick(ae)
        },
        restoreSelectionOnTabActivation: function() {
            var Z = this.getCollection();
            if (UWA.is(this._model) && UWA.is(this._model.getXSO())) {
                var V = this._model.getXSO().get();
                var ac = [];
                V.forEach(function(ag) {
                    ac.push(Z.get(ag._options.id))
                });
                var af = [];
                if (ac.length == 0) {} else {
                    var ab = [],
                        W = [],
                        aa = null;
                    for (var X = 0, Y = ac.length; X < Y; X++) {
                        var ae = ac[X];
                        if (!G.is(ae)) {
                            throw new Error("Invalid itemModel in SNSkeletonMgt.onItemSelect")
                        }
                        aa = ae.get("id");
                        if (!G.is(aa, "string")) {
                            throw new Error("Unable to get id of object in SNSkeletonMgt.onItemSelect")
                        }
                        ab.push({
                            objectType: ae.get("ds6w:type_value"),
                            objectId: aa,
                            envId: ae.getPlatformID(),
                            contextId: ""
                        });
                        af.push({
                            id: aa,
                            session_object: ae.hasOwnProperty("session_object")
                        })
                    }
                    var ad = a.buildCompassSelectionData({
                        widgetId: G.is(this.getOption("widgetId")) ? this.getOption("widgetId") : "",
                        selectedModels: ac
                    });
                    if (1 == ac.length) {
                        var U = ab[0];
                        if (G.is(ad) && G.is(ad.data) && G.is(ad.data.items, "array") && ad.data.items.length === 1) {
                            U = ad.data.items[0]
                        }
                        this._compass_socket.dispatchEvent("onSetObject", U)
                    }
                    this._compass_socket.dispatchEvent("onSetX3DContent", ad);
                    this.notifySelectionAddinMode(ad)
                }
                if (F.getOption("search_web_in_win")) {
                    var T = {
                        objets_name: af,
                    };
                    this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                        notif_name: "onAddToCSO",
                        notif_parameters: JSON.stringify(T)
                    }, "search_web_in_win")
                }
            }
        },
        onItemUnselected: function(T) {},
        _selectAll: function() {
            var T = this._model;
            if (this._selectionMode_techno !== "oneToOne") {
                if (T.getXSO().get().length !== T.getRoots().length) {
                    T.selectAll()
                }
            }
        },
        _toggleLoader: function() {
            var U = this;
            var T;
            if (UWA.is(UWA.Widgets) && UWA.is(UWA.Widgets.instances)) {
                UWA.Widgets.instances.forEach(function(W) {
                    if (W.id === U.getOption("widgetId")) {
                        T = G.extendElement(W.elements.body).getElement(".onesearch_results")
                    }
                })
            } else {
                T = G.extendElement(document.body).getElement(".onesearch_results");
                if (!UWA.is(T)) {
                    return
                }
            }
            if (UWA.is(U._mySpinner)) {
                U._mySpinner.toggle()
            } else {
                var V = UWA.createElement("div", {
                    "class": "datagrid-loader"
                });
                V.setStyle("text-align", "center");
                V.setStyle("position", "relative");
                V.setStyle("top", "-12px");
                V.inject(T);
                U._mySpinner = new x().inject(V).show()
            }
        },
        loadMoreData: function(U, T) {
            var V = this;
            var X = this.getCollection();
            if (((G.is(X) && X.hasNextPage())) && ((!G.is(this._mySpinner)) || (G.is(this._mySpinner) && !this._mySpinner.isVisible))) {
                this._toggleLoader()
            }
            console.log("Infinite scroll : loading more models...");
            if (X._search_in_progress === false) {
                if (X.hasNextPage()) {
                    var W = Math.floor((Math.random() * 100000) + 1);
                    X.getNextPage({
                        remove: false,
                        onComplete: function() {
                            X.generateTreeModel();
                            V._toggleLoader();
                            V._updateWidgetTitleWithNbResult();
                            V._getAndDisplayLastIndexTime();
                            U && U();
                            t.mark("DS/SNResultUX/views/xxx$onInfiniteScrollAsync$getNextPage$group$" + W + "$end")
                        },
                        onFailure: function(Y) {
                            V.dispatchEvent("on_search_failure", P.get("on_search_failure"));
                            T && T();
                            t.mark("DS/SNResultUX/views/xxx$onInfiniteScrollAsync$getNextPage$group$" + W + "$end")
                        }
                    })
                } else {
                    U && U()
                }
            } else {
                U && U()
            }
        },
        _loadFirstPage: function(ad) {
            var aa = this;
            var Y = this.getCollection();
            var U = this.getContainer();
            if (Y.service_parameters && !Y.service_parameters.adv_search) {
                !U && aa._skeleton.container && H.mask(aa._skeleton.container)
            }
            var T = false;
            if (Y._ctx_options && Y._ctx_options.advanced_search && Y._ctx_options.advanced_search.searchOnInit) {
                T = true
            }
            if ((UWA.is(Y.getRequestCriteria().service_params) && (Y.getRequestCriteria().service_params.query === c.SearchTypeEnum.ADVANCED_SEARCH) && UWA.is(Y.getRequestCriteria().service_params.adv_search) && !(UWA.is(Y.getRequestCriteria().service_params.refine) && UWA.is(Y.getRequestCriteria().service_params.refine.PLMParameters) && UWA.is(Y.getRequestCriteria().service_params.refine.PLMParameters.plmparam) && UWA.is(Y.getRequestCriteria().service_params.refine.PLMParameters.plmparam.length > 0))) && !T) {
                var ae = this._advSearchMgr;
                if (UWA.is(ae) && !(UWA.is(ae._dataSetsForSource) && UWA.is(ae._dataSetsForSource.options) && UWA.is(ae._dataSetsForSource.options.datasets) && UWA.is(ae._dataSetsForSource.options.datasets.items) && Object.keys(ae._dataSetsForSource.options.datasets.items).length > 0)) {
                    var V = true;
                    ae.clearFilters();
                    ae.getAndDisplayAdvancedSearch(V)
                }
            } else {
                U && H.mask(U);
                var ab = Math.floor((Math.random() * 100000) + 1);
                var ag = this;
                if (UWA.is(ag)) {
                    var W = ag.getHelperCollectionId();
                    var af = function(ah, aj, ai) {
                        if (UWA.is(ah) && true === ah._isAHelper) {
                            ag.copyDataFromHelperCollection(Y, ah);
                            Y.dispatchAsEventListener("on_sync")();
                            if (UWA.is(ah.parsing_alert)) {
                                ag._failure(ah, {
                                    service: ah.snservices,
                                    messages: ah.parsing_alert
                                })
                            }
                            c.deleteHelperCollection(W)
                        }
                        Y.generateTreeModel();
                        ag._updateWidgetTitleWithNbResult.call(ag);
                        ag._getAndDisplayLastIndexTime.call(ag);
                        ag.getContainer() && H.unmask(ag.getContainer());
                        if (ad && G.is(ad.onComplete, "function")) {
                            ad.onComplete.call(this)
                        }
                        t.mark("DS/SNResultUX/views/xxx$_loadFirstPage$" + ab + "$end");
                        if (R.getItem("nav_history")) {
                            aa.dispatchEvent("onFedSearchComplete", Y.totalCount)
                        }
                    };
                    var ac = function(al, ak, ai) {
                        var an = "";
                        if (G.is(aa._searchActions) && G.is(aa._searchActions.setEmptyViewMessage, "function")) {
                            if (G.is(ak, "object") && G.is(ak.error, "object") && G.is(ak.error.errorMessage, "string")) {
                                var ah = P.get(ak.error.errorMessage);
                                if (G.is(ah, "string") && ah.length > 0) {
                                    an = P.get(ak.error.errorCode)
                                } else {
                                    an = ak.error.errorMessage
                                }
                            }
                            aa._searchActions.setEmptyViewMessage(an)
                        }
                        al.dispatchAsEventListener("onError")();
                        var am = aa.getCurrentView();
                        if (G.is(am) && G.is(am.checkToDisplayEmptyView, "function")) {
                            am.checkToDisplayEmptyView()
                        }
                        ag.getContainer() && H.unmask(ag.getContainer());
                        t.mark("DS/SNResultUX/views/xxx$_loadFirstPage$" + ab + "$end");
                        var aj = c.getHelperCollection(W);
                        if (G.is(aj)) {
                            al._fedSearchLabel = UWA.clone(aj._fedSearchLabel)
                        }
                        ag._failure(al, ak);
                        c.deleteHelperCollection(W)
                    };
                    var Z = c.getHelperCollection(W);
                    if (UWA.is(Z)) {
                        if (Z._currentState === c.HelperCollectionStatus.SEARCH_IN_PROGRESS) {
                            console.log("helper search_in_progress");
                            Z._CBOnComplete = af;
                            Z._CBOnFailure = ac
                        } else {
                            if (Z._currentState === c.HelperCollectionStatus.SEARCH_SUCCEEDED) {
                                console.log("helper search_succeeded");
                                af.call(undefined, Z)
                            } else {
                                if (Z._currentState === c.HelperCollectionStatus.SEARCH_FAILED) {
                                    console.log("helper search_failed");
                                    if (UWA.is(Z.fedSearch_error)) {
                                        ac.call(undefined, Z, Z.fedSearch_error)
                                    }
                                }
                            }
                        }
                    } else {
                        Y.getFirstPageOfResults({
                            reset: true,
                            onComplete: af,
                            onFailure: ac
                        })
                    }
                }
            }
            var X;
            if (aa.getOption("idWaitLoading")) {
                X = aa.getOption("idWaitLoading");
                f.WaitManager.removeWaitCondition(X)
            }
        },
        _updateResultsToNative: function(Y) {
            if (F.getOption("search_web_in_win")) {
                if (!UWA.is(Y)) {
                    Y = this.getCollection()
                }
                var X = UWA.is(F.getOption("tabbed_ui_support_level"));
                if (G.is(Y)) {
                    var T = [];
                    var W = Y.pluck("id");
                    for (var V = 0; V < W.length; V++) {
                        if (X) {
                            T.push({
                                id: W[V]
                            })
                        } else {
                            T.push(W[V])
                        }
                    }
                    var U = {
                        notif_name: "onResultsUpdate",
                        notif_parameters: {
                            tabID: this.getOption("observable").getTabID(),
                            objects: T
                        }
                    };
                    if (!X) {
                        U.notif_parameters = T
                    }
                    this._searchcom_socket.dispatchEvent("onDispatchToWin", U, "search_web_in_win")
                }
            }
        },
        setup: function(T) {
            var U = this;
            this.listenTo(this.getCollection(), {
                onAdd: function() {},
                onRemove: function() {},
                onSort: function() {},
                onAnyEvent: function() {},
                onReset: function() {
                    var V = U.getContainer();
                    V && H.mask(V);
                    if (U.getCollection() && U.getCollection().service_parameters && U.getCollection().service_parameters.adv_search && !U.getCollection().advanced_criteria) {
                        U._skeleton.container && H.unmask(U._skeleton.container);
                        V && H.unmask(V);
                        U.getCollection().initTreeDocument()
                    } else {
                        U._skeleton.container && H.unmask(U._skeleton.container)
                    }
                    console.log("onReset")
                },
                on_sync: function(W) {
                    var V = U.getContainer();
                    V && H.unmask(V);
                    W && W.generateTreeModel();
                    U._updateResultsToNative(W)
                },
                onInitTreeDocument: function(V) {
                    U._model = V;
                    if (U._lightBoxView) {
                        U._lightBoxView.changeModel(V)
                    }
                }
            })
        },
        notifySelectionAddinMode: function(T) {
            if (UWA.is(this.getOption("addinMode"), "string")) {
                var U = this;
                if (!UWA.is(T)) {
                    T = a.buildCompassSelectionData({
                        widgetId: this.getOption("widgetId"),
                        selectedModels: []
                    })
                }
                require(["DS/PlatformAPI/PlatformAPI"], function(V) {
                    var W = JSON.stringify({
                        event: "selection",
                        source: T.source,
                        version: T.version,
                        content: T
                    });
                    U.log("publishing webinwin:web:notification SELECTION event, data:" + W);
                    V.publish("webinwin:web:notification", W)
                })
            }
        },
        getSearchWidget: function() {
            var U = this;
            var V;
            var T = U.getOption("widgetId");
            if (G.is(T) && G.is(UWA.Widgets) && G.is(UWA.Widgets.instances)) {
                UWA.Widgets.instances.forEach(function(W) {
                    if (W.id === T) {
                        V = W
                    }
                })
            }
            return V
        },
        setPrintWindow: function(T) {
            this._printWindow = T
        },
        getSocketID: function(U) {
            var T = UWA.is(U) ? this._WebInWinCtxActionSocket : this._searchcom_socket;
            if (T) {
                return T.id
            }
        },
        handleKeyboardEvent: function(V) {
            var U = this;
            var T = UWA.Event.whichKey(V);
            if (T === "ctrl+a") {
                if (G.is(U._in_app_multiSel) && (U._in_app_multiSel === "oneToOne")) {
                    a._displayAlert({
                        message: P.get("error_select_all"),
                        className: "info",
                    });
                    return
                }
                if (G.is(V) && G.is(V.currentTarget) && G.is(V.currentTarget.activeElement) && (U._skeleton.container.contains(V.currentTarget.activeElement) || V.currentTarget.activeElement === document.body)) {
                    U._selectAll();
                    V.preventDefault();
                    V.stopPropagation()
                }
            } else {
                if (T === "ctrl+shift+a") {
                    U.onFetchAndSelectAllCallback({
                        DoSelection: true
                    })
                } else {
                    if (V.keyCode === 116) {
                        if (F.getOption("search_web_in_win")) {
                            V.returnValue = false;
                            V.preventDefault();
                            V.stopPropagation();
                            this._searchActions.dispatchEvent("onRefreshResultRequest")
                        }
                    }
                }
            }
        }
    });
    return j
});
define("DS/SNResultUX/SNResultMgt", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class/Options", "UWA/Class/Events", "UWA/Class/Collection", "UWA/Utils/Client", "UWA/Utils/InterCom", "DS/WebappsUtils/Performance", "DS/PlatformAPI/PlatformAPI", "DS/MessageBus/MessageBus", "DS/SNInfraUX/SearchRessources", "DS/SNInfraUX/SearchDebug", "DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "css!DS/SNResultUX/SNResultUX", "DS/SNResultUX/SNSkeletonMgt_v2", "DS/TagNavigatorProxy/TagNavigatorProxy", "DS/SNResultUX/utils/ResultUX_customization", "DS/SNResultUX/utils/ResultsUtils", "DS/SNResultUX/utils/SearchServices", "DS/SNResultUX/utils/SearchViewOptions", "text!DS/SNResultUX/assets/SNResultUX_custo.json", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/SNInfraUX/PredefinedQueries", "DS/SNInfraUX/SNUnitConversion", "DS/SNResultUX/utils/WildcardMgr", "DS/SNResultUX/utils/AdvSearchMgr", "DS/SNResultUX/utils/SNResultTypeCustoHelper", "DS/SNResultUX/utils/SearchSortView", "DS/UIKIT/DropdownMenu", "DS/UIKIT/Tooltip", "DS/SNResultUX/views/SearchHistoryTree", "DS/i3DXCompassServices/i3DXCompassPubSub", "DS/SNInfraUX/SearchPreferences", "DS/WebRecordEnabler/Adapter", "DS/SNResultUX/utils/ContentLocationServices"], function(A, F, h, f, b, s, G, r, p, x, B, y, D, z, e, j, l, k, u, E, a, t, I, H, c, v, d, o, L, C, m, w, K, q, J, g, n) {
    var i = F.extend(h, f, y, {
        uwaClassName: "DS/SNResultUX/SNResultMgt",
        name: "onesearch_results",
        _resources: null,
        _taggerProxy: null,
        _searchcom_socket: null,
        _search_criteria: "",
        _originalSearchCriteria: "",
        _search_tag_filter: {},
        _selected_objects: null,
        _adv_search: false,
        _advanced_criteria: "",
        _ok_Button: null,
        _apply_Button: null,
        _adv_search_field: null,
        onesearch_indexedtimeIcon: null,
        indexedtimeMenu: null,
        _isMultiSelModeOnTouch: false,
        _historySearch: null,
        _headersSearch: null,
        _idWaitLoading: null,
        _compass_socket: null,
        _subscriptions: null,
        _keydownEventHandler: null,
        _minimizedSidePanel: false,
        _incontext_precond_2: null,
        init: function(O) {
            var Q = this,
                R = r.now().toString();
            this._subscriptions = {};
            r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::init","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::init","drilldown":"SNResultMgt::init-DetailedView"}');
            if (!O.viewData) {
                O.viewData = {};
                O.viewData.global_actions = O.incontext_global_actions
            }
            Q._parent(O);
            Q.log("init");
            e.checkCustomerConfigs({
                resources: new B(this.getOption("resources"))
            }).then(function(U) {
                console.log("checkCustomerConfigs SUCCESS : " + U)
            }, function(U) {
                console.log("checkCustomerConfigs FAILURE : " + U)
            });
            Q._idWaitLoading = g.WaitManager.addWaitCondition(100 * 1000, "Wait loading search model");
            this._searchcom_socket = D.createSocket({
                socket_id: this.getSocketID(),
                widgetId: this.getOption("widget_id")
            });
            if (this._searchcom_socket) {
                this._searchcom_socket.addListener("toggleProxyFocus", this._toggleProxyFocus.bind(this));
                this._searchcom_socket.addListener("clearfilterbyclosesidepanel", this.clearfilterbyclosesidepanel.bind(this));
                this._searchcom_socket.addListener("manageActionIconOnSidePanel", this.manageActionIconOnSidePanel.bind(this));
                this._searchcom_socket.addListener("UpdateInContextSearch", this._updateInContextSearch.bind(this))
            }
            this._subscriptions.updateSelectionNumber = x.subscribe({
                channel: this.getMessagingChannel(),
                topic: "updateSelectionNumber",
                callback: this.updateSelectionNumber.bind(this)
            });
            var N = z.getOption("enablePLM");
            if (O.in_apps_search && O.in_apps_search.advanced_search && O.in_apps_search.advanced_search.showPLMParameter === false) {
                N = false
            }
            if (!UWA.is(this.getOption("getTabID"), "function")) {
                this._subscribeToKeyboardEvents()
            }
            var M = function(Z) {
                var X;
                if (UWA.is(Q._resources) && UWA.is(Q._resources.getActiveTenant())) {
                    X = Q._resources.getActiveTenant()
                }
                if (z.getOption("ENO_BI_ON_TAGGER")) {
                    require(["DS/ENOFilterBIUX/FilterBIComponentProxy"], function(ab) {
                        var ac = {
                            enablePLM: N,
                            tenant: X,
                            processingMode: "appProcessing",
                            colorize: true,
                            events: {
                                addFilterChangeListener: Q.onFilterChange.bind(Q),
                                addCriteriaChangeListener: Q.onCriteriaChange.bind(Q),
                                addPLMUpdateListener: Q.onPLMUpdate.bind(Q),
                                addOpenTaggerListener: Q.onOpenTagger.bind(Q),
                                addCloseTaggerListener: Q.onCloseTagger.bind(Q),
                                addRequestSuggestsListener: Q.OnSuggestUpdate.bind(Q)
                            }
                        };
                        if (UWA.is(Q.getOption("tagger_context_id"))) {
                            ac.contextId = Q.getOption("tagger_context_id")
                        } else {
                            if (J.getItem("integratedSearch")) {
                                var aa = Q.getSearchWidget();
                                if (UWA.is(aa)) {
                                    ac.contextId = aa.context
                                }
                            } else {
                                ac.widgetId = Q.getOption("widget_id")
                            }
                        }
                        Q._taggerProxy = new ab(ac);
                        Q._taggerProxy.addEvent("FilterBIColorize", Q.onTaggerColorization.bind(Q));
                        Q._taggerProxy.addEvent("FilterBIUnColorize", Q.onTaggerUnColorization.bind(Q));
                        Z.call()
                    })
                } else {
                    var W = {
                        enablePLM: N,
                        tenant: X,
                        filteringMode: "FilteringOnServer",
                        disableAutoComplete: true,
                        events: {
                            addFilterChangeListener: Q.onFilterChange.bind(Q),
                            addCriteriaChangeListener: Q.onCriteriaChange.bind(Q),
                            addPLMUpdateListener: Q.onPLMUpdate.bind(Q),
                            addCloseTaggerListener: Q.onCloseTagger.bind(Q),
                            addOpenTaggerListener: Q.onOpenTagger.bind(Q),
                            addRequestSuggestsListener: Q.OnSuggestUpdate.bind(Q)
                        },
                        freeInput: false,
                        defaultDatePicker: true,
                        preciseCount: z.getOption("preciseCount")
                    };
                    z.options.search_settings.taggerClosed = false;
                    if (UWA.is(Q.getOption("tagger_context_id"))) {
                        W.contextId = Q.getOption("tagger_context_id")
                    } else {
                        if (J.getItem("integratedSearch")) {
                            var U = Q.getSearchWidget();
                            var Y = true;
                            if (UWA.is(U)) {
                                var V = U.getValue("launch_mode");
                                if (UWA.is(U.data) && !UWA.is(U.data.pinToDashboard)) {
                                    W.contextId = "RightPanelContext"
                                }
                                if (V === e.widgetLaunchMode.COMPASS_TRANSIENT || V === e.widgetLaunchMode.COMPASS_PINNED || V === e.widgetLaunchMode.INCONTEXT_TRANSIENT) {
                                    W.contextId = ""
                                }
                                W.widgetId = Q.getOption("widget_id");
                                Y = false
                            }
                            if (Y === true) {
                                W.widgetId = Q.getOption("widget_id")
                            }
                        } else {
                            W.widgetId = Q.getOption("widget_id")
                        }
                    }
                    if (z.getOption("search_web_in_win") === true) {
                        require(["DS/SNResultUX/webinwin/WebInWinTaggerProxy"], function(aa) {
                            W.proxyId = Q.getTabID();
                            W.contextId = e.TAGGERPROXY_CONTEXTID_WEB_IN_WIN;
                            Q._taggerProxy = new aa(W);
                            if (!UWA.is(z.getOption("tabbed_ui_support_level"))) {
                                Q._taggerProxy.clearLocalFilter()
                            }
                            Z.call()
                        })
                    } else {
                        Q._taggerProxy = k.createProxy(W);
                        Z.call()
                    }
                }
            };
            var T = function() {
                    r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::ready_to_initialize","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::AddCusto"}');
                    M(function() {
                        r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::createTaggerProxy","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::init-DetailedView"}');
                        Q._selected_objects = new b();
                        var U = {
                            source: Q.options.source,
                            events: {
                                selected_obj: function() {
                                    Q._selected_objects.reset();
                                    if (A.is(arguments)) {
                                        for (var X = 0, V = arguments.length; X < V; X++) {
                                            Q._selected_objects.add(arguments[X])
                                        }
                                    }
                                    if (Q._ok_Button) {
                                        var W = Q.getInContextMinSelect();
                                        Q._ok_Button.setDisabled(Q._selected_objects.size() < W)
                                    }
                                    if (Q._apply_Button) {
                                        Q._apply_Button.setDisabled(Q._selected_objects.size() == 0)
                                    }
                                },
                                onItemViewClick: function(V) {
                                    var W = Q.options.itemViewClickHandler;
                                    if (UWA.is(W)) {
                                        require([W], function(X) {
                                            X.executeAction.call(X, {
                                                model: V
                                            })
                                        })
                                    }
                                },
                                onSkeletonReady: function() {
                                    if (UWA.is(Q.getOption("renderTo"))) {
                                        Q.render().inject(Q.getOption("renderTo"))
                                    }
                                    var W = Q.getOption("search_options");
                                    if (UWA.is(W)) {
                                        if (!UWA.is(W.viewData)) {
                                            W.viewData = Q.getOption("viewData")
                                        }
                                        Q.onSearch(W)
                                    } else {
                                        if (!UWA.is(Q.options.donotshowlastsearch)) {
                                            if (UWA.is(Q.options) && UWA.is(Q.options._lastSearchOptions)) {
                                                Q.dispatchEvent("onSearchSkeleton", Q.options._lastSearchOptions)
                                            }
                                        }
                                    }
                                    if (A.is(Q.elements) && A.is(Q.elements.skeleton) && A.is(Q.elements.skeleton.getSearchActions) && A.is(Q.elements.skeleton.getSearchActions())) {
                                        var aa = Q.elements.skeleton.getSearchActions();
                                        aa.addEvent("onRefreshResultRequest", function(ac) {
                                            Q.log("refreshSearchResult");
                                            var ab = undefined;
                                            if (UWA.is(ac)) {
                                                ab = {};
                                                if (UWA.is(ac.criteria)) {
                                                    if (UWA.is(ac.criteria.search_crit)) {
                                                        ab.search_criteria = ac.criteria.search_crit
                                                    }
                                                    if (UWA.is(ac.criteria.originalSearchCriteria)) {
                                                        ab.originalSearchCriteria = ac.criteria.originalSearchCriteria
                                                    }
                                                    if (UWA.is(ac.criteria.tagger_crit)) {
                                                        ab.tag_filter = ac.criteria.tagger_crit
                                                    }
                                                    if (UWA.is(ac.criteria.search_name)) {
                                                        ab.search_name = ac.criteria.search_name
                                                    }
                                                    if (UWA.is(ac.criteria.source)) {
                                                        ab.source = ac.criteria.source
                                                    }
                                                    if (UWA.is(ac.criteria.queryType)) {
                                                        ab.queryType = ac.criteria.queryType
                                                    }
                                                }
                                                ab.savedSearch = true;
                                                if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                                                    sendNotificationWebInWin("SaveSearch", JSON.stringify(ab))
                                                }
                                            } else {
                                                ab = A.clone(Q.options.search_options);
                                                if (UWA.is(ab)) {
                                                    ab.refresh = true;
                                                    if (A.is(ab.tag_filter, "object")) {
                                                        var ad = Q._taggerProxy.getCurrentFilter();
                                                        if (A.is(ad, "object") && A.is(ad.allfilters, "object") && 0 < Object.keys(ad.allfilters).length) {
                                                            Q.log("refreshSearchResult with tagg filter")
                                                        } else {
                                                            ab.tag_filter = null
                                                        }
                                                    }
                                                }
                                            }
                                            if (UWA.is(ab)) {
                                                if (Q._historySearch) {
                                                    if (A.is(Q.elements.containerProduct)) {
                                                        Q.elements.containerProduct.empty()
                                                    }
                                                    if (A.is(Q.elements.containerRelational)) {
                                                        Q.elements.containerRelational.empty()
                                                    }
                                                    Q._historySearch.cleanAll()
                                                }
                                                Q.onSearch(ab)
                                            }
                                        });
                                        aa.addEvent("onRunSavedSearch", function(ac) {
                                            Q.log("onRunSavedSearch");
                                            if (UWA.is(ac)) {
                                                if (UWA.is(Q.getOption("update_preference"), "function")) {
                                                    var ad = Q.getOption("update_preference");
                                                    ad.call(null, "tag_filter", ac.tag_filter);
                                                    ad.call(null, "search_criteria", ac.search_criteria);
                                                    ad.call(null, "search_criteria_to_display", ac.originalSearchCriteria);
                                                    ad.call(null, "originalSearchCriteria", ac.originalSearchCriteria);
                                                    ad.call(null, "saved_search", true);
                                                    ad.call(null, "search_name", ac.search_name);
                                                    var ab = false;
                                                    if (A.is(ac.originalSearchCriteria, "string") && ac.originalSearchCriteria === e.SearchTypeEnum.ADVANCED_SEARCH) {
                                                        ad.call(null, "adv_search", true)
                                                    }
                                                }
                                                ac.resetLocalFilter = true;
                                                Q.onSearch(ac)
                                            }
                                        });
                                        if (true === J.getItem("nav_history")) {
                                            aa.addEvent("onDisplayRelations", function(ad) {
                                                Q.log("onDisplayRelations");
                                                if (UWA.is(ad, "object") && UWA.is(ad.relation, "string") && UWA.is(ad.ids, "array")) {
                                                    var ab = "";
                                                    var ag;
                                                    if (UWA.is(Q._taggerProxy.clearLocalFilter, "function")) {
                                                        Q._taggerProxy.clearLocalFilter()
                                                    }
                                                    if (UWA.is(ad.searchParam)) {
                                                        ag = ad.searchParam;
                                                        ag.fromSearchHistory = true;
                                                        ag.refresh = false
                                                    } else {
                                                        for (var ac = 0; ac < ad.ids.length; ac++) {
                                                            ab += "physicalid:" + ad.ids[ac];
                                                            if (ac < ad.ids.length - 1) {
                                                                ab += " OR "
                                                            }
                                                        }
                                                        var af = "";
                                                        switch (ad.relation) {
                                                            case "parents":
                                                                af = H.get("parents.box");
                                                                break;
                                                            case "children":
                                                                af = H.get("children.box");
                                                                break;
                                                            case "drawings":
                                                                af = H.get("drawings.box");
                                                                break;
                                                            case "simulations":
                                                                af = H.get("simulations.box");
                                                                break;
                                                            case "configurations":
                                                                af = H.get("configurations.box");
                                                                break
                                                        }
                                                        ag = {
                                                            search_criteria: ab,
                                                            originalSearchCriteria: af,
                                                            tag_filter: {},
                                                            source: ["3dspace"],
                                                            fromSearchHistory: true
                                                        };
                                                        if (UWA.is(Q.getOption("update_preference"), "function")) {
                                                            var ae = Q.getOption("update_preference");
                                                            ae.call(null, "tag_filter", ag.tag_filter);
                                                            ae.call(null, "search_criteria", ag.search_criteria);
                                                            ae.call(null, "search_criteria_to_display", ag.originalSearchCriteria);
                                                            ae.call(null, "originalSearchCriteria", ag.originalSearchCriteria);
                                                            ae.call(null, "saved_search", false)
                                                        }
                                                    }
                                                    Q.onSearch(ag)
                                                }
                                            })
                                        }
                                        aa.addEvent("onNonDefaultGlobalAction", function(ac) {
                                            Q.log("onNonDefaultGlobalAction");
                                            if (UWA.is(ac) && UWA.is(ac.id) && Q._searchcom_socket) {
                                                var ae;
                                                var ab = t.getViewData();
                                                if (UWA.is(ab)) {
                                                    ae = ab.global_actions
                                                }
                                                var ad;
                                                if (ae) {
                                                    ad = ae.app_socket_id
                                                }
                                                if (ad) {
                                                    Q._searchcom_socket.dispatchEvent("Selected_global_action", {
                                                        selected_objects: Q._selected_objects.toArray(),
                                                        id: ac.id,
                                                        command_data: ac.command_data
                                                    }, ad)
                                                }
                                            }
                                        });
                                        aa.addEvent("onInformationPanelAction", function(ac) {
                                            Q.log("onInformationPanelAction");
                                            var ab = false;
                                            var ad = Q.getSNSkeleton();
                                            ab = ad.ActivateDeactivateInformationsPanel();
                                            Q.manageinformationPanel(ab)
                                        });
                                        aa.addEvent("onPreviewPanelAction", function(ac) {
                                            Q.log("onPreviewPanelAction");
                                            var ab = false;
                                            var ad = Q.getSNSkeleton();
                                            ab = ad.ActivateDeactivatePreviewPanel();
                                            Q.managepreviewPanel(ab)
                                        });
                                        aa.addEvent("onPinToDashboardAction", function(ab) {
                                            Q.log("onPinToDashboardAction");
                                            Q.onPinToDashboardAction()
                                        })
                                    } else {
                                        console.error("Unable to retrieve skeleton !")
                                    }
                                    Q.elements.container.addClassName(Q.getOption("css_view_class"));
                                    if (true == Q.getOption("swymContext")) {
                                        Q.elements.container.addClassName("swym")
                                    }
                                    Q.elements.container.addClassName(Q.getOption("css_view_class"));
                                    r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::init","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::init"}');
                                    Q.dispatchEvent.call(Q, "onReady");
                                    var Z = J.getItem("nav_history");
                                    if (Z === true) {
                                        Q.managehistoryPanel(false)
                                    }
                                    if (Z === true || J.getItem("integratedSearch")) {
                                        var Y = Q.getSNSkeleton();
                                        if (Y !== null) {
                                            var V = function(ac) {
                                                var af = ac;
                                                if (A.is(af.source) && (af.source === "ENXScene_appId" || af.source === "ENORIPE_AP") && A.is(af.data) && A.is(af.data.items)) {
                                                    var ab = af.data.items;
                                                    var ae = ab.length;
                                                    var ah = null;
                                                    if (ae > 0) {
                                                        var ag = ab[ae - 1];
                                                        if (A.is(ag)) {
                                                            ah = {
                                                                displayName: ag.displayName,
                                                                id: ag.objectId,
                                                                getServiceID: function() {
                                                                    return ("3DSpace")
                                                                },
                                                                getPlatformID: function() {
                                                                    return (ag.envId)
                                                                },
                                                                get: function(ai) {
                                                                    var aj;
                                                                    if (A.is(ai)) {
                                                                        if (ai === "id") {
                                                                            aj = ag.objectId
                                                                        } else {
                                                                            if (ai === "ds6w:type") {
                                                                                aj = ag.displayType
                                                                            } else {
                                                                                if (ai === "ds6w:type_value") {
                                                                                    aj = ag.objectType
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    return aj
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (Y._informationPanel !== null) {
                                                        Y._informationPanel.setInfomationPanelObject(ah)
                                                    }
                                                    var ad = {};
                                                    ad.size = ae;
                                                    ad.itemModel = {};
                                                    if (ah !== null) {
                                                        ad.itemModel.label = ah.displayName;
                                                        ad.itemModel.id = ah.id;
                                                        ad.itemModel.model = ah;
                                                        ad.itemModel.model.fromApp = true;
                                                        Q._addNavHistorySelectBox(ad)
                                                    }
                                                }
                                            };
                                            var X = "HistoryListen";
                                            if (Q._compass_socket === null) {
                                                Q._compass_socket = new G.Socket(X);
                                                Q._compass_socket.subscribeServer("com.ds.compass", window.parent)
                                            }
                                            if (Q._compass_socket) {
                                                Q._compass_socket.addListener("onSetX3DContent", function(ab) {
                                                    V(ab)
                                                })
                                            }
                                            q.subscribe("setX3DContentCallback", function(ab) {
                                                V(ab)
                                            });
                                            q.subscribe("resetType", function(ab) {
                                                if (Y._informationPanel !== null) {
                                                    var ac = null;
                                                    Y._informationPanel.setInfomationPanelObject(ac)
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        };
                        Q.opts_skeleton = U;
                        Q._buildSkeleton(U);
                        r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::createTaggerProxy","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::init-DetailedView"}');
                        r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::ready_to_initialize","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::AddCusto"}')
                    })
                },
                P = function() {
                    r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::ready_to_customized","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::init-DetailedView","drilldown":"SNResultMgt::AddCusto"}');
                    r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::AddCusto resultJSONParse","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::AddCusto","drilldown":"ResultUX_customization::addCustomization"}');
                    var U = JSON.parse(I);
                    u.setAddinMode(Q.getOption("addinMode"));
                    u.addCustomization(U, function() {
                        r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::AddCusto resultJSONParse","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::AddCusto"}');
                        if (UWA.is(O.result_ux_customization)) {
                            r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::AddCusto options.result_ux_customization","uuid":"' + R + '","status":"start","drilldown_serie_id":"SNResultMgt::AddCusto","drilldown":"ResultUX_customization::addCustomization"}');
                            u.addCustomization(O.result_ux_customization, function() {
                                r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::AddCusto options.result_ux_customization","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::AddCusto"}');
                                T(O)
                            })
                        } else {
                            T(O)
                        }
                        r.mark('{"module":"DS/SNResultUX/SNResultMgt","name":"SNResultMgt::ready_to_customized","uuid":"' + R + '","status":"end","drilldown_serie_id":"SNResultMgt::init-DetailedView"}')
                    })
                };
            if (O.resources instanceof B) {
                Q._resources = O.resources;
                P()
            } else {
                try {
                    Q._resources = new B(O.resources, function() {
                        Q._resources = this instanceof B ? this : Q._resources;
                        P()
                    })
                } catch (S) {
                    console.log("SearchRessources not initialized!")
                }
            }
            if (z.getOption("load_PQs")) {
                c.fetchPQsFromServer(Q._resources)
            }
        },
        _updateInContextSearch: function(M) {
            if (M.precond && M.precond.length > 0) {
                this._incontext_precond_2 = M.precond
            } else {
                this._incontext_precond_2 = null
            }
            if (!(M.refresh == false)) {
                this.refreshSearch()
            }
        },
        getInContextMinSelect: function() {
            var M = 1;
            var N = this.getOption("in_apps_search");
            if (N && N.furtive_options && A.is(N.furtive_options.min_select)) {
                M = N.furtive_options.min_select
            }
            return M
        },
        destroy: function() {
            this.log("destroy");
            if (this._resources) {
                delete this._resources
            }
            var N = this.getCollection() ? this.getCollection().getSearchRessources().is_odt_source() : false;
            if (this.sortPanelView && this.sortPanelView._view) {
                x.unsubscribe(this.sortPanelView._subscriptions.setOrderInGridView);
                if (N) {
                    this.sortPanelView._view.destroy()
                }
                this.sortPanelView.destroy();
                this.sortPanelView = null
            }
            if (this._searchcom_socket) {
                this._searchcom_socket.removeListener("OnRefreshWebInWin", this.onRefresh.bind(this));
                this._searchcom_socket.removeListener("toggleProxyFocus", this._toggleProxyFocus.bind(this));
                this._searchcom_socket.removeListener("clearfilterbyclosesidepanel", this.clearfilterbyclosesidepanel.bind(this));
                this._searchcom_socket.removeListener("manageActionIconOnSidePanel", this.manageActionIconOnSidePanel.bind(this));
                this._searchcom_socket.removeListener("UpdateInContextSearch", this._updateInContextSearch.bind(this));
                x.unsubscribe(this._subscriptions.updateSelectionNumber);
                D.deleteSocket(this.getSocketID());
                if (e._isSearchWidgetTransientAvailable(this.getOption("widget_id")) === false) {
                    var M = UWA.is(this.getOption("getTabID"), "function");
                    if (!M) {
                        if (true === e.isTaggerOpenedByCode()) {
                            this._searchcom_socket.dispatchEvent("closeTagger")
                        }
                    }
                    if (!M) {
                        var O = this.getOption("in_apps_search");
                        this._searchcom_socket.dispatchEvent("onCloseTransient", {
                            in_apps_search: O
                        })
                    }
                }
                this.log("Disconnect the socket from the server");
                this._searchcom_socket.disconnect();
                delete this._searchcom_socket
            }
            if (this._compass_socket) {
                this._compass_socket.removeListener("onSetX3DContent");
                this._compass_socket.disconnect();
                delete this._compass_socket
            }
            if (this._taggerProxy) {
                this._taggerProxy.die();
                delete this._taggerProxy
            }
            this._selected_objects = null;
            if (UWA.is(this._keydownEventHandler, "function")) {
                UWA.Element.removeEvent.call(document, "keydown", this._keydownEventHandler)
            }
            this._parent()
        },
        getMessagingChannel: function() {
            var M = this.getTabID();
            var N = this.getOption("widget_id");
            return N + "-#-" + M
        },
        getSocketID: function() {
            var N = "result_socket_" + this.getOption("widget_id");
            var M = this.getTabID();
            if (UWA.is(M, "string")) {
                N = N + "-" + M
            }
            return N
        },
        getTabID: function() {
            if (UWA.is(this.getOption("getTabID"), "function")) {
                return this.getOption("getTabID").call()
            } else {
                return "3DSearch-non-tabbed-ui"
            }
        },
        _getSearchType: function() {
            var O = e.SearchTypeEnum.SEARCH;
            var N = this.getOption("search_options");
            if (UWA.is(N, "object")) {
                var M = this.getOption("search_options").search_criteria;
                switch (M) {
                    case e.SearchTypeEnum.MY_CONTENT:
                        return e.SearchTypeEnum.MY_CONTENT;
                        break;
                    case e.SearchTypeEnum.ADVANCED_SEARCH:
                        return e.SearchTypeEnum.ADVANCED_SEARCH;
                        break;
                    case e.SearchTypeEnum.FAVORITE_SEARCH:
                        return e.SearchTypeEnum.FAVORITE_SEARCH;
                        break
                }
            }
            return O
        },
        getTabIcon: function() {
            var M = {
                iconName: "search",
                fontIconFamily: 1
            };
            switch (this._getSearchType()) {
                case e.SearchTypeEnum.MY_CONTENT:
                    M.iconName = "user";
                    break;
                case e.SearchTypeEnum.ADVANCED_SEARCH:
                    M.iconName = "search-cog";
                    break;
                case e.SearchTypeEnum.FAVORITE_SEARCH:
                    M.iconName = "favorite-on";
                    break
            }
            return M
        },
        OnTabActivated: function() {
            var M = z.getOption("search_web_in_win");
            var N = this.getOption("search_options");
            if (UWA.is(N)) {
                if (M && window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                    if (UWA.is(z.getOption("tabbed_ui_support_level"))) {
                        var P = {
                            search_criteria: UWA.is(N.search_criteria) ? N.search_criteria : ""
                        };
                        if (true === N.adv_search) {
                            P.search_criteria = N.originalSearchCriteria
                        }
                        sendNotificationWebInWin("UpdateSearchField", JSON.stringify(P))
                    }
                } else {
                    this._searchcom_socket.dispatchEvent("onSearch", {
                        parameters: {
                            search_criteria: UWA.is(N.search_criteria) ? N.search_criteria : "",
                            originalSearchCriteria: N.originalSearchCriteria,
                            search_criteria_to_display: N.search_criteria_to_display,
                            adv_search: N.adv_search,
                        },
                        transient_widget: this.getOption("transient_context") == "true",
                        widget_id: this.getOption("widget_id"),
                        in_apps_search: this.getOption("in_apps_search"),
                        tabInfo: {
                            tenant: this._resources.getActiveTenant(),
                            client_identifier: e.identifyClientInfo().identifier
                        }
                    })
                }
            }
            if (this._taggerProxy) {
                this._taggerProxy.activate();
                if (M && z.getOption("proxy_button_available") === true) {
                    this._taggerProxy.toggleProxyFocus(true)
                }
                if (this._getSearchType() !== e.SearchTypeEnum.ADVANCED_SEARCH) {
                    this.setTaggerMode("tags")
                }
            }
            var O = this.getSNSkeleton();
            if (A.is(O)) {
                O.restoreSelectionOnTabActivation();
                if (UWA.is(z.getOption("tabbed_ui_support_level"))) {
                    this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                        notif_name: "onTabActivated",
                        notif_parameters: {
                            tabID: this.getTabID()
                        },
                    }, "search_web_in_win")
                } else {
                    O._updateResultsToNative()
                }
                this.managehistoryPanel(false);
                this.manageinformationPanel();
                this.manageActionIconOnSidePanel()
            }
        },
        OnTabDeactivated: function() {
            if (this._taggerProxy) {
                this._taggerProxy.deactivate()
            }
            var M = this.getSNSkeleton();
            if (A.is(M)) {
                M.resetCompassSelection();
                M.clearWebInWinCSO();
                if (M._searchActions.popover) {
                    M._searchActions.popover.destroy();
                    M._searchActions.popover = null
                }
            }
        },
        OnTabRemoved: function() {
            this._searchcom_socket.dispatchEvent("onDispatchToWin", {
                notif_name: "onTabRemoved",
                notif_parameters: {
                    tabID: this.getTabID()
                },
            }, "search_web_in_win")
        },
        onKeyboardEvent: function(N) {
            var M = this.getSNSkeleton();
            if (A.is(M)) {
                M.handleKeyboardEvent(N)
            }
        },
        _subscribeToKeyboardEvents: function() {
            var M = this;
            this._keydownEventHandler = function(N) {
                M.onKeyboardEvent(N)
            };
            UWA.Element.addEvent.call(document, "keydown", this._keydownEventHandler)
        },
        onTaggerColorization: function(M) {
            var N = [{
                criteria: function(O) {
                    this.color = M.coloredSubjects["pid://" + O.get("id")];
                    return true
                }
            }];
            this.setShadings(N)
        },
        onTaggerUnColorization: function(M) {
            var N = [{
                color: "initial",
                criteria: function() {
                    return true
                }
            }];
            this.setShadings(N)
        },
        onReady: function() {},
        onRefresh: function() {
            var M = {};
            M.search_criteria = this._search_criteria;
            M.originalSearchCriteria = this._originalSearchCriteria;
            M.tag_filter = this._search_tag_filter;
            M.adv_search = this._adv_search;
            M.advanced_criteria = this._advanced_criteria;
            M.source = this.options.source;
            this.onSearch(M)
        },
        onSearchPQ: function(M) {
            this.log("onSearchPQ");
            var N = this;
            c.fetchPQsFromServer(N._resources).then(function() {
                N.dispatchEvent("onSearchSkeletonPQ", M)
            })
        },
        onSearch: function(M) {
            var N = this;
            if (M.in_apps_search) {
                var P = N.getOption("in_apps_search");
                if (!P) {
                    N.setOption("in_apps_search", M.in_apps_search);
                    var O = {
                        search_criteria: M.search_criteria,
                        originalSearchCriteria: M.originalSearchCriteria,
                        search_criteria_to_display: M.search_criteria_to_display,
                        source: M.source ? M.source : this.source,
                        search_mode: "index",
                        tag_filter: M.tag_filter,
                        adv_search: M.adv_search ? M.adv_search : false
                    };
                    N.setOption("search_options", O);
                    N._search_tag_filter = M.tag_filter;
                    if (UWA.is(N.getOption("update_preference"), "function")) {}
                    N._rebuildSkeleton(N.opts_skeleton);
                    return
                }
            }
            if (!UWA.is(this.getCollection())) {
                console.log("Skeleton Not Ready..");
                return
            }
            if (M && M.search_criteria && UWA.is(M.search_criteria, "string") && M.search_criteria.indexOf(":") > 0) {
                c.fetchPQsFromServer(N._resources).then(function() {
                    N.onSearchAsyncPQ(M)
                })
            } else {
                this.onSearchAsyncPQ(M)
            }
        },
        onSearchAsyncPQ: function(S) {
            this.log("onSearch");
            if (!A.is(S)) {
                console.error("no options provided in SNResultMgt.onSearch !");
                return
            }
            if (UWA.is(S.removeHistory) && S.removeHistory === true) {
                if (this._historySearch) {
                    if (A.is(that.elements.containerProduct)) {
                        that.elements.containerProduct.empty()
                    }
                    if (A.is(that.elements.containerRelational)) {
                        that.elements.containerRelational.empty()
                    }
                    this._historySearch.cleanAll()
                }
            }
            if (!A.is(S.recent_filter)) {
                if (A.is(this._taggerProxy) && A.is(this._taggerProxy.activate, "function")) {
                    this._taggerProxy.activate()
                }
            }
            if (A.is(S.adv_search) && true === S.adv_search) {
                if (S.search_criteria === e.SearchTypeEnum.ADVANCED_SEARCH) {
                    this.setTaggerMode("criteria");
                    if (S.displayValue === undefined && S.in_apps_search === undefined && S.source === undefined && S.search_mode === undefined) {
                        var ab = {
                            widgetId: this.getOption("widget_id")
                        };
                        this.showAdvancedSearch(ab);
                        return
                    }
                }
            } else {
                this.setTaggerMode("tags")
            }
            var O = this.getOption("in_apps_search");
            if (S.viewData || !O) {
                t.setViewData(S.viewData)
            }
            this.elements.skeleton._searchActions.setEmptyViewMessage(H.get("loading"));
            if (!A.is(S.originalSearchCriteria)) {
                S.originalSearchCriteria = S.search_criteria
            }
            if (this._search_criteria === e.SearchTypeEnum.MY_RECENT_CONTENT) {
                if (S.search_criteria === "") {
                    S.search_criteria = e.SearchTypeEnum.MY_RECENT_CONTENT
                }
                if (S.search_criteria !== e.SearchTypeEnum.MY_RECENT_CONTENT && this._taggerProxy) {
                    this._taggerProxy.activate()
                }
            }
            if (A.is(S) && A.is(S.search_mode) && A.is(S.search_criteria) && (e.SearchTypeEnum.MY_RECENT_CONTENT === S.search_criteria) && A.is(this.elements) && A.is(this.elements.skeleton) && A.is(this.elements.skeleton._onesearch_collection) && A.is(this.elements.skeleton._onesearch_collection.service_parameters) && A.is(this.elements.skeleton._onesearch_collection.service_parameters.mode) && e.SearchTypeEnum.MY_RECENT_CONTENT === this.elements.skeleton._onesearch_collection.service_parameters.query && !(A.is(S.refresh) && true === S.refresh)) {
                console.log("Working on recent cache");
                this.elements.skeleton._onesearch_collection.filterSearch(S);
                return
            }
            if ((!A.is(S.search_criteria) || S.search_criteria === "") && e.SearchTypeEnum.MY_RECENT_CONTENT !== S.search_criteria && true !== S.adv_search) {
                return
            }
            var Z = A.is(S.resetLocalFilter) ? true : false;
            if (e.SearchTypeEnum.FAVORITE_SEARCH === S.search_criteria) {
                var V = {
                    search_criteria: S.search_criteria,
                    originalSearchCriteria: H.get("my_fav_searches"),
                    search_name: H.get("my_fav_searches")
                };
                S = V
            }
            if (A.is(this._searchcom_socket)) {
                this._searchcom_socket.dispatchEvent("onSearch", {
                    parameters: S,
                    transient_widget: this.getOption("transient_context") == "true",
                    widget_id: this.getOption("widget_id"),
                    in_apps_search: this.getOption("in_apps_search")
                })
            }
            if (!UWA.is(O)) {
                S.search_criteria = d.manageWildcardAddtion(S.search_criteria)
            }
            var ae = false;
            if (A.is(S) && A.is(S.savedSearch) && S.savedSearch) {
                ae = S.savedSearch
            }
            if (O || ae) {} else {
                var ad = L.getGlobalSearchTypeCustoQuery(S.search_criteria);
                if (UWA.is(ad)) {
                    e.addSourceSpecificParameter(S, {
                        sourceIds: ["3dspace"],
                        param: {
                            id: "additional_query",
                            value: ad
                        }
                    })
                }
            }
            if (S.widget_search_criteria) {
                var ac = d.manageWildcardAddtion(S.widget_search_criteria);
                S.search_criteria = ac
            }
            S.incontext_precond_2 = this._incontext_precond_2;
            this.setOption("search_options", S);
            if (UWA.is(this._taggerProxy) && UWA.is(this._search_criteria)) {
                this._taggerProxy.unsetTags();
                if (z.getOption("search_web_in_win") && z.getOption("proxy_button_available") === true) {
                    this._taggerProxy.toggleProxyFocus(true)
                }
                var af = "";
                if (A.is(this._taggerProxy.options) && A.is(this._taggerProxy.options.widgetId, "string")) {
                    af = this._taggerProxy.options.widgetId
                } else {
                    if (A.is(this._taggerProxy.widgetId, "string")) {
                        af = this._taggerProxy.widgetId
                    }
                }
                if (A.is(S.tag_filter, "object") && A.is(S.tag_filter.allfilters, "object") && 0 < Object.keys(S.tag_filter.allfilters).length && af !== "IsNotInWidget") {
                    S.localFilter = A.clone(S.tag_filter.allfilters)
                }
                if (true === ae || (true === Z)) {
                    if (af !== "IsNotInWidget") {
                        if (z.getOption("search_web_in_win") === true) {
                            if (true === Z) {
                                this._taggerProxy.clearLocalFilter()
                            }
                        } else {
                            this._taggerProxy.clearLocalFilter()
                        }
                    }
                } else {
                    if ((S.search_criteria === e.SearchTypeEnum.ADVANCED_SEARCH) || (this._adv_search != S.adv_search)) {
                        if (!(UWA.is(S.tag_filter) && UWA.is(S.tag_filter.PLMParameters) && UWA.is(S.tag_filter.PLMParameters.plmparam) && UWA.is(S.tag_filter.PLMParameters.plmparam.length > 0))) {
                            if (A.is(this._taggerProxy.clearLocalFilter, "function")) {
                                var Y = false;
                                if (UWA.is(O) && O.app_socket_id == "socket_id_#saved_search_edit#" && UWA.is(O.advanced_search)) {
                                    Y = true
                                }
                                if (!Y) {
                                    this._taggerProxy.clearLocalFilter()
                                }
                            }
                        }
                    } else {
                        if (!A.is(S.tag_filter, "object")) {
                            if (UWA.is(this._taggerProxy)) {
                                var ai = this._taggerProxy.getCurrentFilter();
                                if (UWA.is(ai)) {
                                    S.tag_filter = this._removeAdvancedFiltersFromTagFilter(ai);
                                    S.advanced_criteria = "";
                                    this._taggerProxy.filters = S.tag_filter
                                }
                            }
                        }
                    }
                }
            }
            this._search_criteria = S.search_criteria;
            this._originalSearchCriteria = S.originalSearchCriteria;
            this._adv_search = S.adv_search;
            this._context = S.context;
            if (A.is(S.adv_search) && false === S.adv_search && A.is(this._advanced_criteria)) {
                this._advanced_criteria = ""
            } else {
                this._advanced_criteria = S.advanced_criteria
            }
            this.options.source = S.source;
            if (A.is(this.elements) && A.is(this.elements.recentcontent)) {
                var ag = this.getOption("search_options") || {};
                var X = e.SearchTypeEnum.MY_RECENT_CONTENT === ag.search_criteria;
                if (X) {
                    var W = new Date();
                    var P = new Date(W.getTime() - z.getOption("Recent_Content_Delta_Time") * 60000);
                    var N = (W - P) / 1000 / 3600;
                    var M = P.toLocaleTimeString();
                    if (N > 24 || P.getDay() != W.getDay()) {
                        M = P.toLocaleString()
                    }
                    var T = H.get("recent_label") + P.toLocaleString();
                    T = T.replace(/&nbsp;/g, "");
                    this.indexedtimeMenu.updateItem({
                        id: this.indexedtimeMenu.items[0].id,
                        text: T
                    })
                } else {
                    if (this._taggerProxy) {}
                    var ah = "";
                    if (e.SearchTypeEnum.ADVANCED_SEARCH == ag.search_criteria || true == ag.adv_search || e.SearchTypeEnum.MY_CONTENT == ag.search_criteria || e.SearchTypeEnum.MY_RECENT_CONTENT == ag.search_criteria || (A.is(ag.applicativeTitle, "string") && ag.applicativeTitle.length > 0)) {
                        ah = H.get("showAllMyRecentContent")
                    } else {
                        ah = H.get("switchToRecentContent")
                    }
                }
            }
            if (UWA.is(O)) {
                S.recent_search = O.recent_search;
                if (UWA.is(O.specific_source_parameter)) {
                    var U = {
                        specific_source_parameter: O.specific_source_parameter
                    };
                    S.context = U
                }
            }
            this.dispatchEvent("onSearchSkeleton", S);
            if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                var aa = this.getSNSkeleton();
                if (A.is(aa)) {
                    console.log("SNSkeleton title: " + aa.getTitle())
                }
                sendNotificationWebInWin("SaveSearch", JSON.stringify({
                    search_name: S.search_name,
                    search_criteria: S.search_name
                }));
                if (false === this._adv_search) {
                    this.hideAdvancedSearch()
                }
            }
            var R = this.getSNSkeleton();
            if (UWA.is(R)) {
                var Q = R.getSearchActions();
                if (UWA.is(Q)) {
                    Q.updateGlobalActions()
                }
            }
            this.HideInformationLightboxPanel();
            if (this.sortPanelView) {
                this.sortPanelView.updateMenu()
            }
        },
        onViewChange: function(M) {
            if (A.is(M.previous) && A.is(M.previous.type)) {
                this.elements.container.removeClassName(M.previous.type)
            }
            this.elements.container.addClassName(M.type)
        },
        openTagger: function(M) {
            if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                sendNotificationWebInWin("openTagger", JSON.stringify({}))
            } else {
                this._searchcom_socket.dispatchEvent("openTagger", "")
            }
        },
        setTaggerMode: function(M) {
            if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                sendNotificationWebInWin("setTaggerMode", M)
            } else {
                if (A.is(this._searchcom_socket)) {
                    this._searchcom_socket.dispatchEvent("setTaggerMode", M)
                }
            }
        },
        render: function() {
            return this
        },
        onFilterChange: function(O) {
            this.log("onFilterChange");
            var M = this;
            var N = function() {
                if (n.isContentLocationActive()) {
                    n.getAvblSource(M._resources.getActiveTenant());
                    n.transformFilterSourceToProject(O)
                }
                if (!A.is(M.options)) {
                    return null
                }
                var ag = M.getOption("search_options") || {};
                if (ag && ag.adv_search) {
                    M.manageIncontextAdvancedSearchFilters(O.allfilters)
                }
                M.options.search_options.tag_filter = A.clone(O);
                var ad = M._removeAdvancedFiltersFromTagFilter(O);
                var ab = null;
                var U = false;
                var ae = "";
                var V = [];
                var ag = M.getOption("search_options") || {};
                var Z, af, ac, aa;
                if (UWA.is(ag)) {
                    V = M.getOption("source");
                    ab = M._extractFTSFromFilter(O);
                    if (UWA.is(ab)) {
                        var W = ab.search_criteria;
                        U = (ab.search === true) ? true : false;
                        ae = M._getSearchCriteriaForAdvancedFilters(ab.new_filter, M._search_criteria);
                        if (ag.adv_search) {
                            if (A.is(M.getSNSkeleton, "function")) {
                                Z = M.getSNSkeleton().getAdvSearchMgr();
                                af = !(O.localfilters["sixw:ds6w:what/ds6w:type"] && O.localfilters["sixw:ds6w:what/ds6w:type"].some(function(ah) {
                                    return ah.object.split(":").pop() === Z._adv_search_field
                                }));
                                if (A.is(Z)) {
                                    ac = Z._dataSetsForType && Z._dataSetsForType.options && Z._dataSetsForType.options.datasets && Z._dataSetsForType.options.datasets.items;
                                    if (af && ac) {
                                        Z._adv_search_field = null;
                                        for (aa = 0; aa < Z._dataSetsForType.options.datasets.items.length; aa++) {
                                            if (Z._dataSetsForType.options.datasets.items[aa].predefined === true) {
                                                delete Z._dataSetsForType.options.datasets.items[aa].predefined
                                            }
                                        }
                                    }
                                }
                            }
                            V = ab.source;
                            if (UWA.is(W) && W.length) {
                                M._search_criteria = W
                            } else {
                                if (UWA.is(ae) && ae.length) {
                                    M._search_criteria = ""
                                } else {
                                    M._search_criteria = e.SearchTypeEnum.ADVANCED_SEARCH
                                }
                            }
                        }
                    }
                }
                if (!M._adv_search && M._search_criteria !== "#myContent") {
                    if (M._searchcom_socket) {
                        M._searchcom_socket.dispatchEvent("Last_Tag_Filter", M.options.search_options.tag_filter)
                    }
                }
                if (ag.adv_search) {
                    var R = M.getOption("in_apps_search");
                    if (R && R.advanced_search) {
                        if (UWA.is(R.precond, "string") && R.precond.trim().length > 0) {
                            if (UWA.is(ae, "string") && ae.trim().length > 0) {
                                ae = "(" + ae + ") AND " + R.precond
                            } else {
                                ae = R.precond
                            }
                        }
                    }
                }
                M._search_tag_filter = ad;
                if (n.isContentLocationActive()) {
                    V = n.updateFilter(O, M)
                }
                var S = {
                    search_criteria: M._search_criteria,
                    advanced_criteria: ae,
                    adv_search: U,
                    tag_filter: M._search_tag_filter,
                    source: V,
                    originalSearchCriteria: M._originalSearchCriteria,
                    fromSearchHistory: true,
                    refineSearch: true,
                    viewData: t.getViewData()
                };
                if (A.is(M.options.search_options.search_criteria_to_display)) {
                    S.search_criteria_to_display = M.options.search_options.search_criteria_to_display
                }
                if (UWA.is(M.getOption("update_preference"), "function")) {
                    M.getOption("update_preference").call(null, "tag_filter", M._search_tag_filter);
                    if (U) {
                        M.getOption("update_preference").call(null, "search_criteria", M._search_criteria);
                        M.getOption("update_preference").call(null, "originalSearchCriteria", M._originalSearchCriteria);
                        M.getOption("update_preference").call(null, "adv_search", true);
                        M.getOption("update_preference").call(null, "advanced_criteria", ae);
                        if (UWA.is(ab) && UWA.is(ab.source)) {
                            M.getOption("update_preference").call(null, "source", ab.source)
                        }
                    }
                }
                var Y = M.getCollection();
                if (UWA.is(Y)) {
                    var T = Y.getRequestCriteria();
                    if (UWA.is(T) && UWA.is(T.service_params)) {
                        S.adv_search = T.service_params.adv_search
                    }
                }
                if (A.is(Y)) {
                    if (A.is(Y._search_in_progress) && !Y._search_in_progress) {
                        if (A.is(M.options.search_options.applicativeTitle)) {
                            S.applicativeTitle = M.options.search_options.applicativeTitle
                        }
                        if (A.is(M.options.search_options.applicativeTitleWithResults)) {
                            S.applicativeTitleWithResults = M.options.search_options.applicativeTitleWithResults
                        }
                        if (!z.getOption("enablePLM")) {
                            M.onSearch(S)
                        } else {
                            var X = M.options.search_options.tag_filter.PLMParameters;
                            if (!(A.is(X) && A.is(X.plmparam) && A.is(X.plmparam["double"]))) {
                                ad.PLMParameters = X;
                                M.onSearch(S)
                            } else {
                                if (UWA.is(M.getSNSkeleton())) {
                                    var Z = M.getSNSkeleton().getAdvSearchMgr();
                                    if (UWA.is(Z)) {
                                        Z.convertPLMParamUnits(X, function(ah) {
                                            ad.PLMParameters = ah;
                                            M.onSearch(S)
                                        })
                                    }
                                }
                            }
                        }
                        if (A.is(M.options.search_options.tag_filter)) {
                            M.displayAllForTypeAttribut(M.options.search_options.tag_filter.allfilters)
                        }
                    } else {
                        M.log("onFilterChange: this.onSearch not launched due to query already running...");
                        return
                    }
                }
                if (O && O.localfilters) {
                    var P = O.localfilters["sixw:ds6w:what/ds6w:type"];
                    if (P && P.length > 0) {
                        var Q = {
                            sixw: "ds6w:what/ds6w:type",
                            value: []
                        };
                        P.forEach(function(ah) {
                            Q.value.push(ah.object)
                        });
                        M.onCriteriaChange(Q)
                    }
                }
            };
            if (e.isFUN072117Active()) {
                this.managePreferredUnitForAdvancedFilters(O, N)
            } else {
                N.call(M, O)
            }
        },
        manageIncontextAdvancedSearchFilters: function(M) {
            if (M && Object.keys(M).length == 0) {
                return
            }
            var Q = this;
            var T = Q.getOption("in_apps_search");
            if (T && T.advanced_search) {
                var R = T.advanced_search["ds6w:type"];
                if (R) {
                    var P = M["sixw:ds6w:what/ds6w:type"];
                    var O = M["sixw:vpmextension"];
                    if (!P) {
                        var S = [];
                        var N = [];
                        R.forEach(function(W) {
                            S.push({
                                object: W.uri,
                                type: "string"
                            });
                            var V = W.interfaces;
                            if (V) {
                                V.forEach(function(X) {
                                    N.push({
                                        object: X.name,
                                        type: "string"
                                    })
                                })
                            }
                        });
                        if (S.length > 0) {
                            M["sixw:ds6w:what/ds6w:type"] = S
                        }
                        if (N.length > 0) {
                            M["sixw:vpmextension"] = N
                        }
                    } else {
                        if (!O) {
                            var U = {};
                            R.forEach(function(V) {
                                U[V.uri] = V.interfaces
                            });
                            var N = [];
                            P.forEach(function(V) {
                                var W = U[V.object];
                                if (W) {
                                    W.forEach(function(X) {
                                        N.push({
                                            object: X.name,
                                            type: "string"
                                        })
                                    })
                                }
                            });
                            if (N.length > 0) {
                                M["sixw:vpmextension"] = N
                            }
                        }
                    }
                }
            }
        },
        managePreferredUnitForAdvancedFilters: function(P, Q) {
            var O = this;
            var N = {};
            var M = function(R) {
                if (R) {
                    Object.keys(R).forEach(function(S) {
                        var U = S.substring(5);
                        if (U.startsWith("ds6wg")) {
                            var T = R[S];
                            if (!N[U]) {
                                N[U] = []
                            }
                            T.forEach(function(W) {
                                var V = W.object;
                                if (V) {
                                    if (W.type == "string") {
                                        N[U].push(V)
                                    } else {
                                        if (W.type == "double" || W.type == "integer") {
                                            if (V.from) {
                                                N[U].push(V.from)
                                            }
                                            if (V.to) {
                                                N[U].push(V.to)
                                            }
                                        }
                                    }
                                }
                            })
                        }
                    })
                }
            };
            M(P.allfilters);
            M(P.localfilters);
            v.setResources(O._resources);
            v.convertValues({
                data: N,
                callback: function(S) {
                    var R = function(T) {
                        if (T) {
                            Object.keys(T).forEach(function(U) {
                                var W = U.substring(5);
                                var V = T[U];
                                V.forEach(function(Y) {
                                    var X = Y.object;
                                    if (S[W]) {
                                        if (Y.type == "string") {
                                            X = S[W][X];
                                            if (X) {
                                                Y.object = X
                                            }
                                        } else {
                                            if (Y.type == "double" || Y.type == "integer") {
                                                if (X) {
                                                    if (X.from) {
                                                        X.from = S[W][X.from]
                                                    }
                                                    if (X.to) {
                                                        X.to = S[W][X.to]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                })
                            })
                        }
                    };
                    if (Object.keys(S).length > 0) {
                        R(P.allfilters);
                        R(P.localfilters)
                    }
                    Q.call(undefined, P)
                }
            })
        },
        displayAllForTypeAttribut: function(M) {
            if (A.is(M) && A.is(M["ds6w:what/ds6w:type"])) {
                var N = this.getCollection().getTaggerProxy();
                if (N !== null) {
                    N.toggleDisplayAll(true)
                }
            }
        },
        onOpenTagger: function(M) {
            z.options.search_settings.taggerClosed = false
        },
        onCloseTagger: function(M) {
            z.options.search_settings.taggerClosed = true
        },
        onCriteriaChange: function(N) {
            if (this.elements && this.elements.skeleton) {
                var M = this.elements.skeleton.getAdvSearchMgr();
                if (UWA.is(M)) {
                    M.handleCriteriaChange(N)
                }
            }
        },
        onPLMUpdate: function(N) {
            if (this.elements && this.elements.skeleton) {
                var M = this.elements.skeleton.getAdvSearchMgr();
                if (UWA.is(M)) {
                    M.handlePLMCriteriaChange(N)
                }
            }
        },
        OnSuggestUpdate: function(N) {
            if (this.elements && this.elements.skeleton) {
                var M = this.elements.skeleton.getAdvSearchMgr();
                if (UWA.is(M)) {
                    M.handleTypeSuggestListChange(N)
                }
            }
        },
        _extractFTSFromFilter: function(Q) {
            if (!A.is(Q)) {
                return
            }
            if (!A.is(Q.allfilters)) {
                return
            }
            var M = {
                new_filter: {
                    allfilters: {}
                },
                search_criteria: "",
                search: Q.search,
                source: []
            };
            var P = null;
            for (var O in Q.allfilters) {
                if (O.indexOf("sixw:fts_value") !== 0) {
                    if (O === "sixw:ds6w:where/ds6w:source/ds6w:dataSource") {
                        var R = Q.allfilters[O];
                        for (var N = 0; N < R.length; N++) {
                            if (N == 0) {
                                M.source = []
                            }
                            M.source.push(R[N].object)
                        }
                    } else {
                        if (O === "ds6w:where/ds6w:source/ds6w:dataSource") {
                            if (N == 0) {
                                M.source = []
                            }
                            M.source = Q.allfilters["ds6w:where/ds6w:source/ds6w:dataSource"][0].object
                        } else {
                            M.new_filter.allfilters[O] = Q.allfilters[O]
                        }
                    }
                } else {
                    var R = Q.allfilters[O];
                    for (var N = 0; N < R.length; N++) {
                        if (0 === N) {
                            if (1 < R.length) {
                                M.search_criteria = "("
                            }
                        }
                        if (0 < N) {
                            M.search_criteria += " OR "
                        }
                        M.search_criteria += R[N].object;
                        if (R.length === (N + 1)) {
                            if (1 < R.length) {
                                M.search_criteria += ")"
                            }
                        }
                    }
                }
            }
            return M
        },
        getCollection: function() {
            if (this.elements && this.elements.skeleton) {
                return this.elements.skeleton.getCollection()
            }
        },
        setShadings: function(M) {
            this.getSNSkeleton().setShadings(M)
        },
        getItemsId: function() {
            var M = this.getCollection();
            if (M) {
                return M.pluck("id")
            }
        },
        dispatchInContextSelection: function(P, M) {
            var O = this;
            var R = this.getOption("in_apps_search");
            if (z.getOption("search_web_in_win") === true) {
                O._searchcom_socket.dispatchEvent("onDispatchToWin", {
                    notif_name: "onInContextAction",
                    notif_parameters: JSON.stringify({
                        action: M,
                        selected_ids: O._selected_objects.pluck("id")
                    })
                }, P)
            } else {
                if (O._searchcom_socket) {
                    if (P && O._selected_objects) {
                        if (O._selected_objects.size()) {
                            O._searchcom_socket.dispatchEvent("Selected_Objects_search", O._selected_objects.toArray(), P)
                        } else {
                            O.log("No object selected")
                        }
                    }
                    O._searchcom_socket.dispatchEvent("clearSearch", {
                        destroy: true
                    });
                    if (!UWA.is(R.closeTransient) || true === R.closeTransient) {
                        O._searchcom_socket.dispatchEvent("closeTransient", {
                            command_id: M
                        })
                    }
                }
                if (UWA.is(O.getOption("addinMode"), "string") && O._selected_objects) {
                    if (O._selected_objects.size() >= O.getInContextMinSelect()) {
                        var N = a.buildCompassSelectionData({
                            widgetId: O.getOption("widget_id"),
                            selectedModels: O._selected_objects.toArray()
                        });
                        var Q = JSON.stringify({
                            event: "search_in_context_OK",
                            source: N.source,
                            version: N.version,
                            content: N
                        });
                        O.log("publishing webinwin:web:notification SELECTION event, data:" + Q);
                        p.publish("webinwin:web:notification", Q)
                    } else {
                        throw new Error("OK event fired without a selection !")
                    }
                }
            }
            if (O._searchcom_socket) {
                if (P) {
                    O._searchcom_socket.dispatchEvent("InContextSearch_Response", {
                        selected_data: a.buildCompassSelectionData({
                            selectedModels: O._selected_objects.toArray()
                        }),
                        selected_objects: O._selected_objects ? O._selected_objects.toArray() : [],
                        search_params: O.getCollection().service_parameters,
                        selected_command: "in_app_ok"
                    }, P)
                }
            }
        },
        _rebuildSkeleton: function(M) {
            this.log("_rebuildSkeleton");
            if (this.elements.skeleton) {
                this.elements.skeleton.stopListening();
                this.elements.skeleton.destroy();
                delete this.elements.skeleton
            }
            this._search_criteria = "";
            this._originalSearchCriteria = "", this._selected_objects = new b();
            this._adv_search = false;
            this._advanced_criteria = "";
            this._ok_Button = null;
            this._apply_Button = null;
            this._adv_search_field = null;
            this.onesearch_indexedtimeIcon = null;
            this.indexedtimeMenu = null;
            this._isMultiSelModeOnTouch = false;
            this._historySearch = null;
            this._headersSearch = null;
            this._idWaitLoading = null;
            if (this.elements.container) {
                this.elements.container.remove()
            }
            this.elements.container = null;
            this._buildSkeleton(M)
        },
        _buildSkeleton: function(X) {
            this.log("_buildSkeleton");
            var R = this,
                T = this.getOption("in_apps_search"),
                Q = false;
            if (UWA.is(T, "object") && T.mode === "furtive") {
                Q = true
            }
            if (!A.is(this.elements.container)) {
                this.elements.container = UWA.createElement("div", {
                    "class": this.getClassNames(),
                    "data-rec-id": this.getClassNames()
                })
            }
            var V = R.elements.container;
            var M = false;
            var P = R.getSearchWidget();
            if (P && A.is(P.getView, "function")) {
                if (A.is(P.getView().previous) && A.is(P.getView().previous.type) && P.getView().previous.type === "windowed") {
                    M = true
                } else {
                    if (A.is(P.getView().type) && P.getView().type === "sidepanel") {
                        M = true
                    }
                }
            }
            if (A.is(T)) {
                M = false
            }
            var O = false;
            if (J.getItem("nav_history") && M === true) {
                O = true;
                if (!J.getItem("integratedSearch") && P) {
                    P.context = "transient"
                }
                var S = R.getOption("pinToDashboard");
                if (S === true || S === undefined) {}
                R.elements.containerContent = new UWA.Element("div", {
                    "class": "searchContainer",
                    "data-rec-id": "searchContainer",
                });
                R.elements.containerContent.inject(R.elements.container);
                if (R._historySearch === null) {
                    R.elements.containerHistory = new UWA.Element("div", {
                        "class": "history-div",
                        "data-rec-id": "history-div",
                        styles: {
                            display: "none"
                        }
                    });
                    R.elements.containerHistory.inject(R.elements.containerContent, "bottom");
                    R._historySearch = new K();
                    R._historySearch.addEvent("onSelected", R.onhistorySearchSelect.bind(R))
                }
                R.elements.containerProduct = new UWA.Element("div", {
                    "class": "product-div",
                    "data-rec-id": "product-div",
                    styles: {
                        display: "none",
                        height: "100%"
                    }
                });
                R.elements.containerProduct.inject(R.elements.containerContent);
                R.elements.containerRelational = new UWA.Element("div", {
                    "class": "relational-div",
                    "data-rec-id": "relational-div",
                    styles: {
                        display: "none",
                        height: "100%"
                    }
                });
                R.elements.containerRelational.inject(R.elements.containerContent);
                V = R.elements.containerContent
            }
            var W = false;
            if (J.getItem("integratedSearch") && V) {
                V.addClassName("sideSearch");
                W = this.getOption("pinToDashboard");
                if (this.getOption("pinToDashboard") === undefined) {
                    var N = P.getValue("launch_mode");
                    if (N === e.widgetLaunchMode.COMPASS_TRANSIENT || N === e.widgetLaunchMode.COMPASS_PINNED || N === e.widgetLaunchMode.INCONTEXT_TRANSIENT) {
                        W = false
                    }
                }
            }
            this.elements.skeleton = new l({
                messagingChannel: R.getMessagingChannel(),
                renderTo: V,
                observable: this,
                resources: this._resources,
                tagger_proxy: this._taggerProxy,
                in_apps_search: T,
                furtive: Q,
                events: X.events,
                source: X.source,
                widgetId: this.getOption("widget_id"),
                transient_context: this.getOption("transient_context"),
                use_preexisting_call: this.getOption("use_preexisting_call"),
                viewData: this.getOption("viewData"),
                pinToDashboard: W,
                navHistory: O,
                addinMode: this.getOption("addinMode"),
                idWaitLoading: this._idWaitLoading
            });
            var U = this.getOption("transient_context");
            if (Q) {
                this._createFurtiveControls()
            }
            if (J.getItem("nav_history")) {
                R.getSNSkeleton().addEvent("onExploreAction", R.onExploreAction.bind(R));
                R.getSNSkeleton().addEvent("onFedSearchComplete", R.onAddSearchBox.bind(R));
                R.getSNSkeleton().addEvent("selected_obj", R.onSelected_obj.bind(R))
            }
        },
        _createFurtiveControls: function() {
            this.log("_buildSkeleton: furtive mode activated");
            var M = this;
            var P = this.getOption("in_apps_search");
            var O = P.app_socket_id;
            var Q = false;
            var N = "Apply";
            if (UWA.is(P, "object") && P.showApplyButton === true) {
                Q = true
            }
            if (UWA.is(P, "object") && P.applyButton_Nls) {
                N = P.applyButton_Nls
            }
            require(["DS/UIKIT/Input/ButtonGroup", "DS/UIKIT/Input/Button"], function(T, V) {
                function S(Z) {
                    if (z.getOption("search_web_in_win") === true) {
                        M._searchcom_socket.dispatchEvent("onDispatchToWin", {
                            notif_name: "onInContextAction",
                            notif_parameters: JSON.stringify({
                                action: "in_app_cancel"
                            })
                        }, Z)
                    } else {
                        if (M._searchcom_socket) {
                            M._searchcom_socket.dispatchEvent("clearSearch", {
                                destroy: true
                            });
                            if (!UWA.is(P.closeTransient) || true === P.closeTransient) {
                                M._searchcom_socket.dispatchEvent("closeTransient", {
                                    command_id: "in_app_cancel"
                                })
                            }
                        }
                        if (UWA.is(M.getOption("addinMode"), "string")) {
                            var Y = JSON.stringify({
                                event: "search_in_context_CANCEL",
                                source: e.SEARCH_APP_ID,
                                version: "1.0",
                                content: {}
                            });
                            M.log("publishing webinwin:web:notification search_in_context_CANCEL event, data:" + Y);
                            p.publish("webinwin:web:notification", Y)
                        }
                    }
                    if (Z) {
                        M._searchcom_socket.dispatchEvent("InContextSearch_Response", {
                            selected_objects: M._selected_objects.toArray(),
                            search_params: M.getCollection().service_parameters,
                            selected_command: "in_app_cancel"
                        }, Z)
                    }
                }
                var W = new V({
                    id: "id_in_app_cancel",
                    value: H.get("CancelButton"),
                    className: "default in_app_search_btn",
                    events: {
                        onClick: function(Z, Y) {
                            S(O)
                        }
                    }
                }).inject(M.elements.container, "bottom");
                if (Q) {
                    var R = new V({
                        id: "id_in_app_apply",
                        value: H.get("APPLYButton"),
                        className: "default in_app_search_btn",
                        disabled: true,
                        events: {
                            onClick: function(Z, Y) {
                                M.dispatchInContextSelection(O, "in_app_apply")
                            }
                        }
                    }).inject(M.elements.container, "bottom");
                    new w({
                        position: "top",
                        target: R.getContent(),
                        body: N
                    })
                }
                var U = true;
                if (P.furtive_options && P.furtive_options.min_select === 0) {
                    U = false
                }
                var X = new V({
                    id: "id_in_app_ok",
                    value: H.get("OKButton"),
                    className: "default in_app_search_btn primary",
                    disabled: U,
                    events: {
                        onClick: function(Z, Y) {
                            M.dispatchInContextSelection(O, "in_app_ok")
                        }
                    }
                }).inject(M.elements.container, "bottom");
                M._ok_Button = X;
                if (Q) {
                    M._apply_Button = R;
                    R.disable()
                }
                X.setDisabled(U)
            });
            M.elements.container.classes = M.elements.container.classes
        },
        _removeAdvancedFiltersFromTagFilter: function(M) {
            if (!A.is(M)) {
                return M
            }
            if (!A.is(M.allfilters)) {
                return M
            }
            var O = {
                allfilters: {}
            };
            for (var N in M.allfilters) {
                O.allfilters[N] = M.allfilters[N]
            }
            if (A.is(M.localfilters)) {
                for (var N in M.localfilters) {
                    if (!A.is(O.localfilters)) {
                        O.localfilters = {}
                    }
                    O.localfilters[N] = M.localfilters[N]
                }
            }
            return O
        },
        _getSearchCriteriaForAdvancedFilters: function(M, O) {
            if (!A.is(M)) {
                return O
            }
            if (!A.is(M.allfilters)) {
                return O
            }
            var N = E.from_filters_to_uql(M.allfilters, O);
            return N
        },
        _toggleProxyFocus: function(M) {
            if (UWA.is(this._taggerProxy)) {
                if (z.getOption("proxy_button_available") === true) {
                    var N = this._taggerProxy._attributes.widgetId;
                    if (N === M.widgetId && e.getDeviceCategory() != "iphone" && e.getDeviceCategory() != "ipad" && z.options.search_settings.taggerClosed != true) {
                        this._taggerProxy.toggleProxyFocus(M.maximized)
                    }
                }
            }
        },
        setTitle: function(N) {
            var M = this.getSNSkeleton();
            if (A.is(M)) {
                M.setTitle(N)
            }
        },
        getSNSkeleton: function() {
            var M;
            if (A.is(this.elements) && A.is(this.elements.skeleton)) {
                M = this.elements.skeleton
            }
            return M
        },
        updateSelectionNumber: function(M) {
            var P = this.getSNSkeleton();
            if (!A.is(P)) {
                throw new Error("No skeleton in SNResultMgt.updateSelectionNumber !")
            }
            if (!A.is(this.onesearch_selectionNumber)) {
                return
            }
            if (this._isMultiSelModeOnTouch || (M.number > 0 && P._selectionMode_techno === "nullToMany")) {
                this.onesearch_selectionNumber.style.display = "inline"
            } else {
                this.onesearch_selectionNumber.style.display = "none"
            }
            this.onesearch_selectionNumber.innerHTML = M.number;
            if (!M.isMultiSelMode && M.number <= 1 && !this._isMultiSelModeOnTouch) {
                this.onesearch_selectionNumberDiv.style.color = "rgb(180, 182, 186)"
            } else {
                if (this._isMultiSelModeOnTouch) {
                    this.onesearch_selectionNumberDiv.style.color = "#368ec4"
                }
            }
            var O = P.getOption("in_apps_search");
            var N = O && O.UXOptions && !O.UXOptions.localActions;
            if (((M.isMultiSelMode) || P._selectionMode_techno === "nullToMany") && !N) {
                this.onesearch_globalDropdownIcon.style.display = "inline"
            } else {
                this.onesearch_globalDropdownIcon.style.display = "none"
            }
        },
        getSearchContentSetHeader: function() {
            return this._contentSetHeader
        },
        setSearchContentSetHeader: function(N) {
            var X = this,
                V = this.getSNSkeleton();
            if (!A.is(V)) {
                throw new Error("No skeleton in SNResultMgt.updateSelectionNumber !")
            }
            if (!A.is(N)) {
                console.error("Unexpected error in setSearchContentSetHeader invalid iContentSetHeader !")
            }
            X._contentSetHeader = N;
            UWA.Element.addEvent.call(X._contentSetHeader, "contextmenu", function(ac) {
                var ad = true;
                if (typeof dscef !== "undefined") {
                    var ab = dscef.getEnv("CATCEF_DEVTOOLS");
                    if (ab.length === 0) {
                        ad = false
                    }
                }
                if (true === ad) {
                    ac.preventDefault()
                }
            });
            this.elements.recentcontent = UWA.createElement("div", {
                "class": "onesearch_recentcontent",
                "data-rec-id": "onesearch_recentcontent"
            });
            this.elements.recentcontent.inject(N);
            var S = z.getOption("neverCheckbox");
            if (!(A.is(S) && (true === S))) {
                this.onesearch_selectionNumberDiv = UWA.createElement("span", {
                    "class": "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-select-on",
                    "data-rec-id": "SNResultMgt_wux-ui-3ds_wux-ui-3ds-1x_wux-ui-3ds-select-on",
                    styles: {
                        fontSize: "22px",
                        color: "#b4b6ba",
                        marginRight: "0.1em",
                        lineHeight: "40px"
                    },
                    events: {
                        touchstart: function(ab) {
                            this.isTouchable = true
                        },
                        click: function(ac) {
                            var ab = document.querySelector("html .touch") || this.isTouchable;
                            if (ab) {
                                var ad = X.getSNSkeleton()._model.getXSO().get();
                                X._isMultiSelModeOnTouch = !X._isMultiSelModeOnTouch;
                                if (!X._isMultiSelModeOnTouch) {
                                    X._searchcom_socket.dispatchEvent("toggleMultiSelMode", false)
                                } else {
                                    X._searchcom_socket.dispatchEvent("toggleMultiSelMode", true)
                                }
                            }
                        }
                    }
                }).inject(N.getElement(".set-multiselHeader"));
                this.onesearch_selectionNumber = UWA.createElement("span", {
                    id: "search-multisel-count",
                    "data-rec-id": "search-multisel-count",
                    styles: {
                        fontSize: "15px",
                        padding: "0 5px",
                        color: "currentColor",
                        display: "none"
                    }
                }).inject(this.onesearch_selectionNumberDiv)
            }
            var P = V.getOption("in_apps_search");
            var U = P && P.UXOptions && !P.UXOptions.localActions;
            if (!(A.is(S) && (true === S))) {
                this.onesearch_globalDropdownIcon = UWA.createElement("span", {
                    "class": "fonticon fonticon-2x fonticon-down-open",
                    "data-rec-id": "SNResultMgt_fonticon_fonticon-2x_fonticon-down-open",
                    id: "search-multisel-dropdown",
                    styles: {
                        color: "#b4b6ba",
                        display: (U || V._selectionMode_techno === "oneToOne") ? "none" : "inline",
                        margin: "0",
                        cursor: "pointer"
                    },
                    events: {
                        click: function(ab) {
                            if (UWA.is(V)) {
                                V.launchGlobalDropdown()
                            }
                        }
                    }
                }).inject(N.getElement(".set-multiselHeader"))
            }
            this.elements.sortcontent = UWA.createElement("div", {
                "class": "onesearch_sortcontent",
                "data-rec-id": "onesearch_sortcontent",
                styles: {
                    order: 6
                }
            });
            this.elements.sortcontent.inject(N);
            this.sortPanelView = new C({
                container: this.elements.sortcontent,
                collection: this.getCollection(),
                widgetId: this.getOption("widget_id"),
                messagingChannel: this.getMessagingChannel()
            });
            if (z.getOption("show_last_indexation_time")) {
                this.onesearch_indexedtimeIcon = UWA.createElement("span", {
                    "class": "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-clock",
                    "data-rec-id": "SNResultMgt_wux-ui-3ds_wux-ui-3ds-1x_wux-ui-3ds-clock",
                    styles: {
                        fontSize: "24px",
                        padding: "4px"
                    }
                }).inject(this.elements.recentcontent);
                this.onesearch_indexedtimeIcon.tooltip = new w({
                    position: "bottom",
                    target: this.onesearch_indexedtimeIcon,
                    body: H.get("switchToRecentContent")
                });
                var W = {},
                    T = {},
                    Q = {};
                if (e.isODTMode()) {
                    W = {
                        "data-rec-id": "recentMenu"
                    };
                    T = {
                        "data-rec-id": "recent"
                    };
                    Q = {
                        "data-rec-id": "allRecent"
                    }
                }
                W.style = "max-width: 600px;";
                T.style = "white-space: normal;";
                var M, R;
                var Y = this.getOption("in_apps_search");
                if (UWA.is(Y) && UWA.is(Y.recent_search) && UWA.is(Y.recent_search.types) && Y.recent_search.types.length > 0) {
                    M = H.get("searchInMyRecentContentInContext");
                    R = H.get("displayAllMyRecentContentInContext")
                } else {
                    M = H.get("searchInMyRecentContent");
                    R = H.get("displayAllMyRecentContent")
                }
                this.indexedtimeMenu = V.indexedtimeMenu = new m({
                    className: "search_recent_container",
                    target: this.onesearch_indexedtimeIcon,
                    items: [{
                        id: "last_index",
                        text: H.replace(H.get("lastIndexedTimeTooltip"), {
                            indexTime: H.get("indexTimeNotAvailable")
                        }),
                        className: "header",
                        attributes: {
                            style: "text-transform: none;"
                        }
                    }, {
                        id: "warning",
                        name: "warning",
                        className: "header",
                        text: H.get("warningIndexed"),
                        attributes: {
                            style: "text-transform: none;"
                        }
                    }, {
                        id: "divider",
                        className: "divider"
                    }, {
                        id: "my_recent",
                        name: "my_recent",
                        text: M,
                        fonticon: "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-search",
                        selectable: true,
                        attributes: T
                    }, {
                        id: "all_my_recent",
                        name: "all_my_recent",
                        text: R,
                        fonticon: "wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-search",
                        selectable: true,
                        attributes: Q
                    }, ],
                    attributes: W,
                    events: {
                        onClick: function(ae, ad) {
                            if (X._taggerProxy) {
                                X._taggerProxy.deactivate()
                            }
                            var ab = X.getOption("search_options") || {};
                            if (X._adv_search === true) {
                                var ac = V.getAdvSearchMgr();
                                if (A.is(ac) && A.is(ac.hideAdvancedSearchTab, "function")) {
                                    ac.hideAdvancedSearchTab()
                                }
                            }
                            if (ad.name === "my_recent") {
                                if (V._myDatagridView && V._myDatagridView._model) {
                                    V._myDatagridView._model.getXSO().empty()
                                }
                                V.getCollection().reset();
                                X._searchcom_socket.dispatchEvent("onSearchModeSwitch", {
                                    new_mode: e.SearchTypeEnum.MY_RECENT_CONTENT,
                                    paramsFilter: ab.search_criteria_to_display ? ab.search_criteria_to_display : this.last_search_criteria
                                });
                                if (ab.search_criteria_to_display) {
                                    this.last_search_criteria = ab.search_criteria_to_display
                                }
                                if (z.getOption("search_web_in_win") === true) {
                                    ab.search_criteria = e.SearchTypeEnum.MY_RECENT_CONTENT;
                                    ab.recent_filter = ab.originalSearchCriteria;
                                    V._searchActions.dispatchEvent("onRefreshResultRequest")
                                }
                            } else {
                                if (ad.name === "all_my_recent") {
                                    if (Y) {
                                        a._displayAlert({
                                            message: H.get("IncontextRecentWarning"),
                                            className: "success"
                                        })
                                    }
                                    if (e.SearchTypeEnum.MY_RECENT_CONTENT == ab.search_criteria) {
                                        if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                                            sendNotificationWebInWin("UpdateSearchField", JSON.stringify({
                                                search_criteria: e.SearchTypeEnum.MY_RECENT_CONTENT,
                                                search_mode: "index"
                                            }))
                                        } else {
                                            X._searchcom_socket.dispatchEvent("onRefreshSearchField", "")
                                        }
                                        V.getCollection().filterSearch({
                                            recent_filter: "*"
                                        });
                                        ab.recent_filter = "*"
                                    } else {
                                        if (V._myDatagridView && V._myDatagridView._model) {
                                            V._myDatagridView._model.getXSO().empty()
                                        }
                                        V.getCollection().reset();
                                        X._searchcom_socket.dispatchEvent("onSearchModeSwitch", {
                                            new_mode: e.SearchTypeEnum.MY_RECENT_CONTENT,
                                            paramsFilter: "*"
                                        });
                                        if (z.getOption("search_web_in_win") === true) {
                                            ab.search_criteria = e.SearchTypeEnum.MY_RECENT_CONTENT;
                                            ab.recent_filter = "*";
                                            ab.adv_search = false;
                                            ab.advanced_criteria = "";
                                            V._searchActions.dispatchEvent("onRefreshResultRequest");
                                            if (window.hasOwnProperty("sendNotificationWebInWin") && A.is(sendNotificationWebInWin, "function")) {
                                                sendNotificationWebInWin("UpdateSearchField", JSON.stringify({
                                                    search_criteria: "#myRecentContent"
                                                }))
                                            }
                                        }
                                    }
                                }
                            }
                            X.onesearch_indexedtimeIcon.className = ad.fonticon
                        },
                        onShow: function() {
                            if (X.onesearch_indexedtimeIcon.className.indexOf("wux-ui-3ds wux-ui-3ds-1x wux-ui-3ds-clock") !== -1) {
                                var ab = true;
                                switch (X._getSearchType()) {
                                    case e.SearchTypeEnum.MY_CONTENT:
                                    case e.SearchTypeEnum.ADVANCED_SEARCH:
                                    case e.SearchTypeEnum.FAVORITE_SEARCH:
                                        ab = false;
                                        break
                                }
                                this.items.forEach(function(ac) {
                                    ac.selected = false;
                                    ac.elements.container.removeClassName("selected");
                                    if (A.is(ac) && "my_recent" === ac.name) {
                                        ac.elements.container.setStyle("visibility", "visible");
                                        if (ab === false) {
                                            ac.elements.container.setStyle("visibility", "collapse")
                                        } else {
                                            var ae = "",
                                                ad = X.options.search_options.originalSearchCriteria;
                                            if (UWA.is(Y) && UWA.is(Y.recent_search) && UWA.is(Y.recent_search.types) && Y.recent_search.types.length > 0) {
                                                ae = H.replace(H.get("searchInMyRecentContentInContext"), {
                                                    searchCriteria: ad
                                                })
                                            } else {
                                                ae = H.replace(H.get("searchInMyRecentContent"), {
                                                    searchCriteria: ad
                                                })
                                            }
                                            X.indexedtimeMenu.updateItem({
                                                id: X.indexedtimeMenu.items[3].id,
                                                text: ae
                                            })
                                        }
                                    }
                                })
                            }
                        }
                    }
                });
                V.indexedtimeIcon = this.onesearch_indexedtimeIcon
            }
            if (z.getOption("search_non_indexed_content")) {
                var aa = H.get("switchToRecentContent");
                if (e.SearchTypeEnum.MY_RECENT_CONTENT === X._search_criteria || e.SearchTypeEnum.ADVANCED_SEARCH === X._search_criteria || true === X._adv_search || e.SearchTypeEnum.MY_CONTENT === X._search_criteria || (A.is(X._search_criteria.applicativeTitle, "string") && X._search_criteria.applicativeTitle.length > 0)) {
                    aa = H.get("showAllMyRecentContent")
                } else {
                    aa = H.get("switchToRecentContent")
                }
                if (e.SearchTypeEnum.MY_RECENT_CONTENT === this._search_criteria) {
                    var O = new Date();
                    var Z = new Date(O.getTime() - z.getOption("Recent_Content_Delta_Time") * 60000)
                }
            }
            this.getSNSkeleton() && this.getSNSkeleton().updateByUXOptions && this.getSNSkeleton().updateByUXOptions(H.get("indexTimeNotAvailable"))
        },
        refreshSearch: function() {
            var N = A.clone(this.options.search_options);
            if (UWA.is(N)) {
                if (this._historySearch) {
                    if (A.is(M.elements.containerProduct)) {
                        M.elements.containerProduct.empty()
                    }
                    if (A.is(M.elements.containerRelational)) {
                        M.elements.containerRelational.empty()
                    }
                    this._historySearch.cleanAll()
                }
                N.refresh = true;
                this.onSearch(N)
            }
            var M = this;
            M.HideInformationLightboxPanel()
        },
        hideAdvancedSearch: function() {
            if (this.elements && this.elements.skeleton) {
                var M = this.elements.skeleton.getAdvSearchMgr();
                M.hideAdvancedSearchTab()
            }
        },
        showAdvancedSearch: function(X) {
            if (!A.is(X) || !A.is(X.widgetId)) {
                return
            }
            var R = this;
            var P = R.getOption("widget_id");
            if (A.is(P) && P !== X.widgetId) {
                return
            }
            this._adv_search_field = null;
            if (this.elements && this.elements.skeleton) {
                var V = this.elements.skeleton.getAdvSearchMgr();
                if (!A.is(V) || !A.is(V.getAndDisplayAdvancedSearch, "function")) {
                    throw ("Error in showAdvancedSearch !")
                }
                var U = true;
                var Q = true;
                var O = null;
                var M = null;
                var T = this.getCollection().getTaggerProxy();
                var N = T.getCurrentFilter();
                if (A.is(N)) {
                    O = N.allfilters
                }
                if (A.is(T) && A.is(N) && A.is(O)) {
                    if (Object.keys(O).length !== 0) {
                        if (A.is(X) && A.is(X.adv_search_field) && A.is(X.adv_search_field, "string")) {
                            V.clearFilters();
                            V.getAndDisplayAdvancedSearch(true)
                        } else {
                            Q = false
                        }
                    }
                }
                if (this._originalSearchCriteria === e.SearchTypeEnum.ADVANCED_SEARCH) {
                    if (!Q) {
                        U = false
                    }
                }
                if (!Q) {
                    V.getAndDisplayAdvancedSearchWithProxyFilterSettings()
                } else {
                    V._adv_search_field = null;
                    if (A.is(X) && A.is(X.adv_search_field) && A.is(X.adv_search_field, "string")) {
                        var S = ["3dspace"];
                        this._adv_search_field = X.adv_search_field;
                        V._adv_search_field = X.adv_search_field
                    }
                    V.getAndDisplayAdvancedSearch(true, X)
                }
                if (U) {
                    var W = {
                        search_criteria: "#advancedSearch",
                        adv_search: true,
                        recent_filter: "*",
                        source: [],
                        search_mode: "index",
                        tag_filter: "",
                        refresh: false
                    };
                    this.onSearch(W)
                }
            }
        },
        manageinformationPanel: function(O) {
            var N = this;
            var M = null;
            if (UWA.is(this.getOption("getContainer"), "function")) {
                M = (this.getOption("getContainer")).call()
            } else {
                M = A.extendElement(document.body)
            }
            if (UWA.is(M)) {
                var R = null;
                if (J.getItem("nav_history")) {
                    if (M.parentElement) {
                        R = M.parentElement.getElement(".searchHeaderCmd_content")
                    }
                } else {
                    R = M.getElement(".search-content-set-container")
                }
                if (R !== null) {
                    var Q = O;
                    var P = N.getSearchWidget();
                    if (UWA.is(P)) {
                        if (!UWA.is(Q)) {
                            Q = P.getValue("informationPanelState" + N.getTabID())
                        }
                        if (Q === true) {
                            R.addClassName("informationPanel_Icon");
                            P.setValue("informationPanelState" + N.getTabID(), true)
                        } else {
                            R.removeClassName("informationPanel_Icon");
                            P.setValue("informationPanelState" + N.getTabID(), false)
                        }
                    }
                }
            }
        },
        managepreviewPanel: function(N) {
            var M = null;
            if (UWA.is(this.getOption("getContainer"), "function")) {
                M = (this.getOption("getContainer")).call()
            } else {
                M = A.extendElement(document.body)
            }
            if (UWA.is(M)) {
                var P = M.getElement(".searchHeaderCmd_content");
                if (P !== null) {
                    var O = that.getSearchWidget();
                    if (UWA.is(O)) {
                        if (N === true) {
                            P.addClassName("previewPanel_Icon");
                            O.setValue("previewPanelState" + that.getTabID(), true)
                        } else {
                            P.removeClassName("previewPanel_Icon");
                            O.setValue("previewPanelState" + that.getTabID(), false)
                        }
                    }
                }
            }
        },
        managehistoryPanel: function(O) {
            var P = this;
            var S = null;
            var R = P.getSearchWidget();
            var N;
            var R = P.getSearchWidget();
            if (!UWA.is(R)) {
                return
            }
            S = A.extendElement(R.elements.body).getElement(".searchHeaderCmd_content");
            N = A.extendElement(R.elements.body).getElement(".history-div");
            if (S === null) {
                var M = null;
                if (UWA.is(this.getOption("getContainer"), "function")) {
                    M = (this.getOption("getContainer")).call()
                } else {
                    M = A.extendElement(document.body)
                }
                if (UWA.is(M) && M.parentElement) {
                    S = M.parentElement.getElement(".searchHeaderCmd_content")
                }
            }
            var Q = false;
            Q = R.getValue("navigationHistoryState" + P.getTabID());
            if (S !== null) {
                if (O === true) {
                    if (Q === false || Q === undefined) {
                        S.addClassName("navigationHistory_Icon");
                        if (O === true) {
                            R.setValue("navigationHistoryState" + P.getTabID(), true)
                        }
                        if (UWA.is(N)) {
                            N.setStyle("display", "inline-block")
                        }
                        if (Q === undefined && P._historySearch) {
                            P._historySearch.render(N)
                        }
                    } else {
                        S.removeClassName("navigationHistory_Icon");
                        if (O === true) {
                            R.setValue("navigationHistoryState" + P.getTabID(), false)
                        }
                        if (UWA.is(N)) {
                            N.setStyle("display", "none")
                        }
                    }
                } else {
                    if (Q === true) {
                        if (P._historySearch) {
                            P._historySearch.render(N)
                        }
                        S.addClassName("navigationHistory_Icon");
                        if (UWA.is(N)) {
                            N.setStyle("display", "inline-block")
                        }
                    } else {
                        S.removeClassName("navigationHistory_Icon");
                        if (UWA.is(N)) {
                            N.setStyle("display", "none")
                        }
                    }
                }
            }
        },
        HideInformationLightboxPanel: function() {
            var N = this;
            var O = N.getSNSkeleton();
            if (O !== null) {
                if (O._informationPanel !== null) {
                    var M = O._informationPanel.getvisibleFlag();
                    if (M === true) {
                        M = O.ActivateDeactivateInformationsPanel();
                        N.manageinformationPanel(M)
                    }
                }
                if (O._lightBoxView !== null) {
                    var M = O._lightBoxView._LightBoxPanel.visibleFlag;
                    if (M === true) {
                        M = O.ActivateDeactivatePreviewPanel();
                        N.managepreviewPanel(M)
                    }
                }
            }
        },
        getSearchWidget: function() {
            var N = this;
            var O;
            var M = N.getOption("widget_id");
            if (A.is(M) && A.is(UWA.Widgets) && A.is(UWA.Widgets.instances)) {
                UWA.Widgets.instances.forEach(function(P) {
                    if (P.id === M) {
                        O = P
                    }
                })
            }
            return O
        },
        onhistorySearchSelect: function(M) {
            var N = this;
            if (A.is(M) && A.is(M.SNtype) && UWA.is(N._historySearch)) {
                if (M.SNtype === "Children") {
                    N.getSNSkeleton()._searchActions.dispatchEvent("onDisplayRelations", M);
                    e.setContentVisibility(M)
                }
                var O = function() {
                    e.setContentVisibility("Search");
                    var P = N.getSNSkeleton();
                    if (P) {
                        P.getCollection()._resetState();
                        P.getCollection().reset();
                        P.getCollection().initTreeDocument();
                        P._updateWidgetTitleWithNbResult()
                    }
                    if (UWA.is(N._taggerProxy.clearLocalFilter, "function")) {
                        N._taggerProxy.clearLocalFilter()
                    }
                    N._taggerProxy.unsetTags()
                };
                if (M.SNtype === "Search" && A.is(M.searchParam)) {
                    e.setContentVisibility(M);
                    M.searchParam.fromSearchHistory = true;
                    N.onSearch(M.searchParam)
                } else {
                    if (M.SNtype === "Explore") {
                        e.setContentVisibility(M);
                        N._historySearch.ShowContainers(M)
                    } else {
                        if (M.SNtype === "Relational") {
                            e.setContentVisibility(M);
                            N._historySearch.ShowContainers(M)
                        } else {
                            if (M.SNtype === "Select") {
                                O();
                                a.getRelations({
                                    model: M.model,
                                    onComplete: function(P) {
                                        P.contextid = M.contextid;
                                        P.widgetAppId = M.widgetAppId;
                                        N._historySearch.stopCreation(false);
                                        N._historySearch.addRelationsModel(P)
                                    },
                                    onFailure: function() {
                                        N._historySearch.stopCreation(false)
                                    }
                                })
                            } else {
                                if (M.SNtype === "") {
                                    O()
                                }
                            }
                        }
                    }
                }
            }
        },
        onAddSearchBox: function(X) {
            if (!A.is(X)) {
                return
            }
            var U = this;
            if (A.is(U.options) && A.is(U.options.search_options)) {
                if (UWA.is(U._historySearch)) {
                    var S = U.options.search_options;
                    var R = true;
                    var V = false;
                    var M = false;
                    if ((UWA.is(S.fromSearchHistory) && S.fromSearchHistory === true)) {
                        R = false;
                        U.options.search_options.fromSearchHistory = false;
                        if (UWA.is(S.refineSearch) && S.refineSearch === true) {
                            V = true;
                            R = true;
                            U.options.search_options.refineSearch = false
                        }
                    }
                    var O = U._taggerProxy.getCurrentFilter();
                    if (A.is(O, "object") && A.is(O.allfilters, "object") && 0 < Object.keys(O.allfilters).length) {
                        M = true
                    }
                    if (R === true) {
                        var T;
                        var Q = U.getSearchWidget();
                        if (UWA.is(Q)) {
                            T = Q.context;
                            if (J.getItem("integratedSearch")) {
                                var N = Q.getValue("launch_mode");
                                if (UWA.is(Q.data) && !UWA.is(Q.data.pinToDashboard)) {
                                    T = "RightPanelContext"
                                }
                                if (N === e.widgetLaunchMode.COMPASS_TRANSIENT || N === e.widgetLaunchMode.COMPASS_PINNED || N === e.widgetLaunchMode.INCONTEXT_TRANSIENT) {
                                    T = ""
                                }
                            }
                        }
                        var W = S.search_criteria_to_display;
                        if (W === undefined) {
                            if (S.search_criteria === "#myContent") {
                                W = H.get("myContentTitle")
                            } else {
                                if (S.search_criteria === "#myRecentContent") {
                                    W = H.get("searchInMyRecentContent")
                                } else {
                                    if (S.originalSearchCriteria === "#advancedSearch") {
                                        W = H.get("adv_search_launch")
                                    } else {
                                        if (S.search_criteria === "#favoriteSearches") {
                                            W = H.get("my_fav_searches")
                                        } else {
                                            W = S.search_criteria
                                        }
                                    }
                                }
                            }
                        }
                        var P = {
                            description: W + " " + X + " results",
                            searchParam: A.clone(S),
                            widgetAppId: U.getOption("widget_id"),
                            contextid: T,
                            refine: V,
                            count: X,
                            filter: M
                        };
                        U._historySearch.addSearchModel(P)
                    }
                }
            }
        },
        onExploreAction: function(Q) {
            var S = this;
            if (A.is(S._historySearch) && A.is(Q) && A.is(Q.model)) {
                var P = S.getSearchWidget();
                var N;
                if (UWA.is(P)) {
                    N = P.context
                }
                if (Q.action_id === "whereUsed") {
                    var O = Q.model._attributes["ds6w:label"];
                    var R = {
                        description: O,
                        widgetAppId: Q.widgetAppId,
                        contextid: N
                    };
                    var M = S._historySearch.addRelationalModel(R);
                    if (A.is(M)) {
                        Q.historyNode = M
                    }
                } else {
                    if (Q.action_id === "config_explore") {
                        var O = Q.model._attributes["ds6w:label"];
                        var R = {
                            description: O,
                            widgetAppId: Q.widgetAppId,
                            contextid: N
                        };
                        var M = S._historySearch.addExploreModel(R);
                        if (A.is(M)) {
                            Q.historyNode = M
                        }
                    }
                }
            }
        },
        onSelected_obj: function() {
            var P = this;
            if (A.is(P._historySearch)) {
                var M = {};
                var N = 0;
                var O = null;
                if (A.is(arguments)) {
                    N = arguments.length;
                    if (N === 1) {
                        O = arguments[0]
                    }
                }
                M.size = N;
                M.itemModel = {};
                if (O !== null) {
                    M.itemModel.label = O.get("ds6w:label");
                    M.itemModel.id = O.id;
                    M.itemModel.model = O
                }
                P._addNavHistorySelectBox(M)
            }
        },
        _addNavHistorySelectBox: function(P) {
            var T = this;
            if (A.is(T._historySearch) && A.is(P)) {
                var O = T.getSearchWidget();
                var M;
                if (UWA.is(O)) {
                    M = O.context
                }
                var S = null;
                var Q = 0;
                if (A.is(P.size)) {
                    Q = P.size;
                    if (Q === 1 && UWA.is(P.itemModel)) {
                        S = P.itemModel
                    }
                }
                if (S !== null) {
                    var N = S.label;
                    var R = {
                        description: N,
                        contextid: M,
                        id: S.id,
                        model: S.model,
                        widgetAppId: T.getOption("widget_id")
                    };
                    if (T._historySearch.addSearchSelectModel(R) !== undefined) {
                        T._historySearch.stopCreation(true);
                        a.getRelations({
                            model: S.model,
                            onComplete: function(U) {
                                U.contextid = M;
                                U.widgetAppId = T.getOption("widget_id");
                                U.model.fromApp = true;
                                U.model.displayName = N;
                                T._historySearch.stopCreation(false);
                                T._historySearch.addRelationsModel(U)
                            },
                            onFailure: function() {
                                T._historySearch.stopCreation(false)
                            }
                        })
                    }
                } else {
                    if (Q > 1) {
                        T._historySearch.addSearchSelectModel(Q)
                    } else {
                        T._historySearch.removeLastSelectNode()
                    }
                }
            }
        },
        onPinToDashboardAction: function() {
            var P = this;
            var O = P.getSNSkeleton();
            if (!A.is(O)) {
                return
            }
            var N = P.getSearchWidget();
            if (!A.is(N)) {
                return
            }
            var M = {
                widgetIdOrUrl: N.uwaUrl,
                widgetAppId: e.SEARCH_APP_ID,
                widgetTitle: O.getTitle(),
                widgetId: P.getOption("widget_id"),
                widgetData: N.data,
                success: function() {
                    if (P._searchcom_socket) {
                        P._searchcom_socket.dispatchEvent("hideSidePanel")
                    }
                }
            };
            e.pinToDashboard(M)
        },
        setActiveTenant: function(N) {
            if (A.is(this._resources) && A.is(this._resources.setActiveTenant, "function")) {
                try {
                    this._resources.setActiveTenant(N)
                } catch (M) {
                    console.log("SearchRessources.setActiveTenant throw !")
                }
            }
        },
        clearfilterbyclosesidepanel: function() {
            var M = this;
            if (UWA.is(M._taggerProxy) && UWA.is(M._taggerProxy.clearLocalFilter, "function")) {
                M._taggerProxy.clearLocalFilter()
            }
        },
        manageActionIconOnSidePanel: function(N) {
            var O = this;
            if (!UWA.is(O.elements) || !UWA.is(O.elements.container)) {
                return
            }
            var Q = false;
            if (UWA.is(O.elements.skeleton)) {
                Q = O.elements.skeleton.getOption("transient_context") !== "true" && O.elements.skeleton.getOption("transient_context") !== true
            }
            if (Q === true) {
                return
            }
            var M = O.getSearchWidget();
            if (A.is(M) && A.is(M.getView, "function")) {
                if (A.is(M.getView().type) && M.getView().type !== "sidepanel") {
                    return
                }
            }
            var P = O._minimizedSidePanel;
            if (UWA.is(N) && UWA.is(N.activation)) {
                P = N.activation;
                O._minimizedSidePanel = P
            }
            var R = O.elements.container.getElement(".search-content-set-actions");
            if (A.is(R) && R !== null) {
                R.removeClassName("minimizedSidePanel");
                if (P === true) {
                    R.addClassName("minimizedSidePanel")
                }
            }
        },
        navhistorycontextifcreateaNewTab: function() {
            var M = false;
            if (UWA.is(this._historySearch)) {
                M = this._historySearch.navhistorycontextifcreateaNewTab()
            }
            return (M)
        }
    });
    return i
});
define("DS/SNResultUX/SearchTab", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class/Collection", "DS/UIKIT/Mask", "DS/SNInfraUX/SearchDebug", "DS/Controls/TooltipModel", "DS/SNResultUX/SNResultMgt"], function(c, b, d, h, e, a, g) {
    var f = b.extend(e, {
        uwaClassName: "DS/SNResultUX/SearchTab",
        name: "onesearch_results_tab",
        _snResultMgt: null,
        _onActivateEvents: null,
        init: function(i) {
            this._parent(i);
            this._onActivateEvents = {}
        },
        destroy: function() {
            this._parent()
        },
        render: function(i) {
            var k = this;
            h.mask(this.getOption("renderTo"));
            if (UWA.is(i, "object")) {
                var j = null;
                if (UWA.is(i.events) && UWA.is(i.events.onReady, "function")) {
                    j = UWA.clone(i.events.onReady)
                }
                i.getTabID = function() {
                    return k.getTabID()
                };
                i.isTabBarVisible = function() {
                    return k.getOption("wuxTabBar").visibleFlag
                };
                i.getTabOption = function(l) {
                    return k.getOption(l)
                };
                i.setTabOption = function(l, m) {
                    k.setOption(l, m)
                };
                i.getContainer = function() {
                    return k.getOption("renderTo")
                }, i.events.onReady = function() {
                    k._snResultMgt = this;
                    k.onActivate();
                    k.setIcon(k._snResultMgt.getTabIcon());
                    h.unmask(k.getOption("renderTo"));
                    if (UWA.is(j)) {
                        j.call(this)
                    }
                    k.dispatchEvent("onTabReady")
                };
                i.events.onTitleUpdate = function(l) {
                    k.setTitle(l.tab_title);
                    k.setTooltip(l.tab_tooltip);
                    k.dispatchEvent("updateWidgetTitle", l.panelTitle);
                    k.setOption("panelTitle", l.panelTitle)
                };
                this.elements.container = new g(i)
            }
            return this
        },
        setTitle: function(k) {
            var j = this.getOption("wuxTab");
            var i = this.getOption("wuxTabBar");
            i.updateTab(j.value, {
                label: k
            })
        },
        getTabID: function() {
            var i = this.getOption("wuxTab");
            if (UWA.is(i)) {
                return i.value
            }
        },
        setTooltip: function(j) {
            var i = this.getOption("wuxTab");
            if (!i.tooltipInfos) {
                i.tooltipInfos = new a({
                    shortHelp: "",
                    mouseRelativePosition: true,
                    isEmpty: function() {
                        return this.shortHelp.length > 0
                    }
                })
            } else {
                i.tooltipInfos.shortHelp = j
            }
        },
        setIcon: function(j) {
            var k = this.getOption("wuxTab");
            var i = this.getOption("wuxTabBar");
            i.updateTab(k.value, {
                icon: j
            })
        },
        setActiveTenant: function(i) {
            if (this._snResultMgt) {
                this._snResultMgt.setActiveTenant(i)
            }
        },
        getTabType: function() {},
        getTabView: function() {
            return this._snResultMgt
        },
        getTaggerProxy: function() {
            if (UWA.is(this._snResultMgt)) {
                return this._snResultMgt._taggerProxy
            }
        },
        getAdvSearchMgr: function() {
            if (UWA.is(this._snResultMgt)) {
                return this._snResultMgt.getSNSkeleton().getAdvSearchMgr()
            }
        },
        showAdvancedSearch: function(i) {
            if (UWA.is(this._snResultMgt)) {
                return this._snResultMgt.showAdvancedSearch(i)
            }
        },
        hideAdvancedSearch: function() {
            if (UWA.is(this._snResultMgt)) {
                return this._snResultMgt.hideAdvancedSearch()
            }
        },
        onActivate: function() {
            if (this._snResultMgt) {
                this.getOption("renderTo").setContent(this._snResultMgt);
                this._snResultMgt.OnTabActivated();
                for (var i in this._onActivateEvents) {
                    switch (i) {
                        case "unsetShading":
                            this._snResultMgt.setShadings([{
                                color: "initial",
                                criteria: function() {
                                    return true
                                }
                            }]);
                            break;
                        case "refresh":
                            this.onRefresh();
                            break
                    }
                }
                delete this._onActivateEvents;
                this._onActivateEvents = {}
            }
            var j = this.getOption("panelTitle");
            if (!UWA.is(j, "string")) {
                j = this.getOption("wuxTab").label
            }
            this.dispatchEvent("updateWidgetTitle", j);
            this.dispatchEvent("onTabActivated")
        },
        onDeactivate: function() {
            if (this._snResultMgt) {
                this._snResultMgt.OnTabDeactivated()
            }
        },
        onRemoval: function() {
            if (this._snResultMgt) {
                this._snResultMgt.OnTabRemoved()
            }
        },
        updateOnActivate: function(i) {
            if (UWA.is(i, "object")) {
                for (var j in i) {
                    this._onActivateEvents[j] = i[j]
                }
            }
        },
        setSensitivity: function(i) {
            this.getOption("wuxTab").disabled = !i
        },
        onSearch: function(i) {
            if (UWA.is(this._snResultMgt)) {
                this._snResultMgt.onSearch(i);
                this.setIcon(this._snResultMgt.getTabIcon())
            }
        },
        onRefresh: function() {
            if (UWA.is(this._snResultMgt)) {
                this._snResultMgt.refreshSearch()
            }
        },
        onKeyboardEvent: function(i) {
            if (UWA.is(this._snResultMgt)) {
                this._snResultMgt.onKeyboardEvent(i)
            }
        },
        navhistorycontextifcreateaNewTab: function() {
            var i = false;
            if (UWA.is(this._snResultMgt)) {
                i = this._snResultMgt.navhistorycontextifcreateaNewTab()
            }
            return (i)
        }
    });
    return f
});
define("DS/SNResultUX/SNTabbedResultMgt", ["UWA/Core", "UWA/Controls/Abstract", "UWA/Class/Options", "UWA/Class/Events", "UWA/Class/Collection", "UWA/Class/Model", "DS/WebappsUtils/Performance", "DS/MessageBus/MessageBus", "DS/SNInfraUX/SearchCom", "DS/SNInfraUX/SearchDebug", "DS/SNInfraUX/SearchSettings", "DS/SNInfraUX/SearchUtils", "css!DS/SNResultUX/SNResultUX", "DS/SNResultUX/SearchTab", "DS/SNResultUX/views/SearchHeaderCmd", "DS/SNInfraUX/SearchRessources", "DS/SNInfraUX/PredicatesNLS", "i18n!DS/SNResultUX/assets/nls/SNResultUX.json", "DS/UIKIT/DropdownMenu", "DS/UIKIT/Mask", "DS/Controls/TabBar", "DS/SNInfraUX/SearchPreferences"], function(p, m, h, n, w, j, c, v, d, r, k, a, u, b, s, e, q, i, l, x, f, t) {
    var o = j.extend({
        idAttribute: "tabID"
    });
    var g = m.extend(h, n, r, {
        uwaClassName: "DS/SNResultUX/SNTabbedResultMgt",
        name: "onesearch_tabbed_results",
        _tabContainer: null,
        _disableTabbedUI: false,
        _currentTabContent: null,
        _searchcom_socket: null,
        _tabs: null,
        _valueOfCurrentTab: null,
        _tabIDCounter: null,
        _first_search_COMPASS_TRANSIENT: null,
        _messagingChannel: null,
        _subscriptions: null,
        _keydownEventHandler: null,
        _headersSearch: null,
        init: function(z) {
            this._parent(z);
            this._tabIDCounter = 0;
            this._first_search_COMPASS_TRANSIENT = false;
            this._messagingChannel = "3DSearch-TabManager-" + z.widget_id;
            this._subscriptions = {};
            this._keyboardEventsSubscription = false;
            var B = this;
            this._searchcom_socket = d.createSocket({
                socket_id: "widget_tabMgt_" + this.getOption("widget_id"),
                widgetId: this.getOption("widget_id")
            });
            q.setResources({
                resources: new e(this.getOption("resources"))
            });
            var C = this.getOption("launch_mode");
            this._disableTabbedUI = (true !== t.getItem("search_tabbed_ui")) || (UWA.is(C, "string") && (C === a.widgetLaunchMode.COMPASS_PINNED || C === a.widgetLaunchMode.PINNED || C === a.widgetLaunchMode.COMPASS_TRANSIENT || C === a.widgetLaunchMode.INCONTEXT_TRANSIENT));
            if (C !== a.widgetLaunchMode.PINNED && C !== a.widgetLaunchMode.COMPASS_PINNED) {
                this._subscribeToKeyboardEvents()
            }
            if (!p.is(this.elements.container)) {
                this.elements.container = UWA.createElement("div", {
                    "class": this.getClassNames(),
                    "data-rec-id": this.getClassNames(),
                    styles: {
                        position: "relative",
                        height: "100%"
                    }
                });
                this.elements.container.addClassName(this.getOption("css_view_class"))
            }
            this._tabContainer = new f({
                displayStyle: ["strip"],
                centeredFlag: false,
                newTabButtonFlag: true,
                editableFlag: false,
                multiSelFlag: false,
                reorderFlag: false,
                touchMode: true,
                closeButtonFlag: true,
                showComboBoxFlag: true
            });
            if (this.isTabBarVisible()) {
                this._subscriptions.addTab = v.subscribe({
                    channel: this.getMessagingChannel(),
                    topic: "addTab",
                    callback: this.addTab.bind(this)
                })
            }
            this._subscriptions.activateInContextSearch = v.subscribe({
                channel: this.getMessagingChannel(),
                topic: "activateInContextSearch",
                callback: this._onActivateInContextSearch.bind(this)
            });
            this._subscriptions.deactivateInContextSearch = v.subscribe({
                channel: this.getMessagingChannel(),
                topic: "deactivateInContextSearch",
                callback: this._onDeactivateInContextSearch.bind(this)
            });
            this._tabContainer.inject(this.elements.container);
            this._tabs = new w([], {
                model: o
            });
            this._currentTabContent = UWA.createElement("div", {
                styles: {
                    position: "relative",
                    height: "100%",
                    width: "100%"
                }
            });
            this._currentTabContent.inject(this.elements.container);
            if (true === this._disableTabbedUI) {
                this.hideTabBar()
            } else {
                this.showTabBar()
            }
            if (t.getItem("nav_history") === true) {
                var A = this._tabContainer.getContent();
                if (A) {
                    var y = A.getElementsByClassName("wux-controls-tabBar-buttonsContainer");
                    if (y !== null) {
                        B._headersSearch = new s();
                        B._headersSearch.render(y[0]);
                        B._headersSearch.addEvent("onInformationPanelAction", function(E) {
                            var G = B.getActiveTab();
                            if (G && G._snResultMgt !== null) {
                                var D = false;
                                var F = G._snResultMgt.getSNSkeleton();
                                D = F.ActivateDeactivateInformationsPanel();
                                G._snResultMgt.manageinformationPanel(D)
                            }
                        });
                        B._headersSearch.addEvent("onHistoryAction", function(D) {
                            var E = B.getActiveTab();
                            if (E && E._snResultMgt !== null) {
                                E._snResultMgt.managehistoryPanel(true)
                            }
                        })
                    }
                }
            }
            this._registerTabEventHandlers()
        },
        destroy: function() {
            var D = undefined;
            var B = this._getTabView();
            if (UWA.is(B)) {
                D = B.getOption("in_apps_search")
            }
            this._searchcom_socket.dispatchEvent("onCloseTransient", {
                in_apps_search: D
            });
            for (var A = 0; A < this._tabs.length; A++) {
                var y = this._tabs.at(A);
                var z = y.get("tab");
                z.destroy()
            }
            for (var C in this._subscriptions) {
                v.unsubscribe(this._subscriptions[C])
            }
            this._unsubscribeToKeyboardEvents();
            if (a._isSearchWidgetTransientAvailable(this.getOption("widget_id")) === false) {
                if (true === a.isTaggerOpenedByCode()) {
                    this._searchcom_socket.dispatchEvent("closeTagger")
                }
            }
            this._searchcom_socket.disconnect();
            d.deleteSocket(this._searchcom_socket.id);
            this._parent()
        },
        getMessagingChannel: function() {
            return this._messagingChannel
        },
        addTab: function(z) {
            var C = this._tabContainer.getTabCount();
            if (true === this._disableTabbedUI) {
                if (C > 1) {
                    throw new Error("tabbed UI is deactivated and a tab is asked to be created when a one already exists")
                }
            }
            var B = this;
            var y = this._generateTabID();
            if (C === 0) {
                this._valueOfCurrentTab = y
            }
            var A = this._tabContainer.add({
                label: UWA.is(z.tabTitle, "string") ? z.tabTitle : "",
                isSelected: true,
                icon: {
                    iconName: "search",
                    fontIconFamily: 1
                },
                allowClosableFlag: C === 0 ? false : true,
                value: y
            });
            this._setMinmumTabWidth(A);
            this._addCommonOptions(z.search_ux_options);
            this._tabs.add(new o({
                tabID: y,
                tab: new b({
                    wuxTab: A,
                    wuxTabBar: B._tabContainer,
                    renderTo: this._currentTabContent,
                    events: {
                        updateWidgetTitle: function(E) {
                            var D = B.getOption("updateTitle");
                            if (UWA.is(D, "function")) {
                                D.call(undefined, E)
                            }
                        }
                    }
                }).render(z.search_ux_options)
            }));
            return this.getTabByID(y)
        },
        _addCommonOptions: function(y) {
            if (!UWA.is(y.widget_id)) {
                y.widget_id = this.getOption("widget_id")
            }
            y.css_view_class = this.getOption("css_view_class");
            y.pinToDashboard = this.getOption("pinToDashboard");
            if (!UWA.is(y.resources)) {
                y.resources = this.getOption("resources")
            }
            if (!UWA.is(y.source)) {
                y.source = this.getOption("source")
            }
            if (!UWA.is(y.itemViewClickHandler)) {
                y.itemViewClickHandler = this.getOption("itemViewClickHandler")
            }
            if (!UWA.is(y.update_preference)) {
                y.update_preference = this.getOption("update_preference")
            }
            if (!UWA.is(y.tagger_context_id)) {
                y.tagger_context_id = this.getOption("tagger_context_id")
            }
            y.addinMode = this.getOption("addinMode");
            y.transient_context = this.getOption("transient_context");
            y.use_preexisting_call = this.getOption("use_preexisting_call");
            y.swymContext = this.getOption("swymContext");
            if (true === y.swymContext) {
                y.in_apps_search = this.getOption("in_apps_search")
            }
        },
        onSearch: function(y) {
            if (a.widgetLaunchMode.COMPASS_TRANSIENT === this.getOption("launch_mode")) {
                if (false === this._first_search_COMPASS_TRANSIENT) {
                    this._first_search_COMPASS_TRANSIENT = true;
                    if (true === t.getItem("search_tabbed_ui")) {
                        this._disableTabbedUI = false;
                        this.showTabBar();
                        if (!UWA.is(this._subscriptions.addTab)) {
                            this._subscriptions.addTab = v.subscribe({
                                channel: this.getMessagingChannel(),
                                topic: "addTab",
                                callback: this.addTab.bind(this)
                            })
                        }
                    }
                }
            }
            this.getActiveTab().onSearch(y)
        },
        onRefresh: function() {
            this.getActiveTab().onRefresh()
        },
        _onViewChange: function(y) {
            if (p.is(y.previous) && p.is(y.previous.type)) {
                this.elements.container.removeClassName(y.previous.type)
            }
            this.elements.container.addClassName(y.type);
            if (y.type === "maximized") {
                this._subscribeToKeyboardEvents()
            } else {
                this._unsubscribeToKeyboardEvents()
            }
        },
        getActiveTab: function() {
            if (UWA.is(this._tabContainer)) {
                return this.getTabByID(this._valueOfCurrentTab ? this._valueOfCurrentTab : "3DSearch-tab-1")
            }
        },
        getTabByID: function(z) {
            var y = this._tabs.get(z);
            if (UWA.is(y)) {
                return y.get("tab")
            }
        },
        _generateTabID: function() {
            ++this._tabIDCounter;
            return "3DSearch-tab-" + (this._tabIDCounter)
        },
        isTabBarVisible: function() {
            return this._tabContainer.visibleFlag
        },
        hideTabBar: function() {
            this._tabContainer.visibleFlag = false;
            this._tabContainer.elements.container.addClassName("hidden");
            if (UWA.is(this._currentTabContent)) {
                this._currentTabContent.setStyle("height", "100%")
            }
        },
        showTabBar: function() {
            if (false == this._disableTabbedUI) {
                this._tabContainer.visibleFlag = true;
                this._tabContainer.elements.container.removeClassName("hidden")
            }
            var z = p.extendElement(this._tabContainer.getContent());
            var y = z.getBoundingClientRect();
            var A = 44;
            if (UWA.is(y, "object") && y.height > 15) {
                A = y.height
            }
            if (UWA.is(this._currentTabContent)) {
                this._currentTabContent.setStyle("height", "calc(100% - " + A + "px)")
            }
        },
        removeTab: function(y) {
            this._tabContainer.removeTab(y);
            var z = this;
            setTimeout(function() {
                z._tabContainer.modelEvent.publish({
                    event: "removeTab",
                    data: {
                        value: y,
                        isUserInteraction: false
                    }
                })
            }, 100)
        },
        _getTabView: function(y) {
            var z = null;
            if (UWA.is(y, "string")) {
                z = this.getTabByID(y)
            } else {
                z = this.getActiveTab()
            }
            if (UWA.is(z)) {
                return z.getTabView()
            }
        },
        _getAllTabs: function() {
            if (UWA.is(this._tabs)) {
                return this._tabs.toArray()
            }
        },
        _setMinmumTabWidth: function(z) {
            var y = k.getOption("miminumTabWith");
            if (!UWA.is(y, "number") || y > 300) {
                y = 100
            }
            z.minWidth = y
        },
        _onPreNewTabHandler: function(A) {
            var B = this._tabContainer.getButtonFromValue(A.value);
            this._setMinmumTabWidth(B);
            var z = B.value;
            var y = this._generateTabID();
            B.value = y;
            B.label = i.get("newTabTitle");
            this._tabContainer.newTabButtonFlag = false
        },
        _onNewTabHandler: function(B) {
            var A = this;
            var y = this._tabContainer.getValueByIndex(B.index);
            var C = this._tabContainer.getButtonFromValue(y);
            this._tabContainer.updateTab(y, {
                allowClosableFlag: true
            });
            var z = {
                search_ux_options: {
                    search_options: {
                        search_mode: "index",
                        refresh: false,
                    },
                    events: {}
                }
            };
            this._addCommonOptions(z.search_ux_options);
            this._tabs.add(new o({
                tabID: y,
                tab: new b({
                    wuxTab: C,
                    wuxTabBar: A._tabContainer,
                    isNewTab: true,
                    renderTo: this._currentTabContent,
                    events: {
                        updateWidgetTitle: function(E) {
                            var D = A.getOption("updateTitle");
                            if (UWA.is(D, "function")) {
                                D.call(undefined, E)
                            }
                        },
                        onTabReady: function() {
                            A._tabContainer.newTabButtonFlag = true
                        }
                    }
                }).render(z.search_ux_options)
            }))
        },
        _onRemoveTabHandler: function(z) {
            var y = this.getTabByID(z.value);
            if (UWA.is(y)) {
                y.onRemoval();
                y.destroy()
            }
            this._tabs.remove(z.value)
        },
        _onSelectTabHandler: function(z) {
            var A = this._tabContainer.getValueByIndex(z.index);
            var C = this._valueOfCurrentTab;
            var B = this.getTabByID(A);
            var y = this.getTabByID(C);
            this._valueOfCurrentTab = A;
            if (UWA.is(y)) {
                y.onDeactivate()
            }
            if (UWA.is(B)) {
                B.onActivate()
            }
            if (this._tabContainer.getTabCount() === 1) {
                this._tabContainer.updateTab(A, {
                    allowClosableFlag: false
                })
            } else {
                this._tabContainer.updateTab(C, {
                    allowClosableFlag: true
                })
            }
        },
        _onContextualMenuEventHandler: function(z) {
            var y = this;
            z.menu.push({
                type: "PushItem",
                title: i.get("closeOtherTabs"),
                action: {
                    callback: function() {
                        y._closeOtherTabs(y._valueOfCurrentTab)
                    }
                }
            });
            this._tabContainer.onContextualMenuEvent(this._onContextualMenuEventHandler.bind(this))
        },
        _registerTabEventHandlers: function() {
            this._tabContainer.onPreNewTab(this._onPreNewTabHandler.bind(this));
            this._tabContainer.onNewTab(this._onNewTabHandler.bind(this));
            this._tabContainer.onRemoveTabEvent(this._onRemoveTabHandler.bind(this));
            this._tabContainer.onSelectTab(this._onSelectTabHandler.bind(this));
            this._tabContainer.onContextualMenuEvent(this._onContextualMenuEventHandler.bind(this))
        },
        _closeOtherTabs: function(z) {
            for (var B = 0; B < this._tabs.length; B++) {
                var y = this._tabs.at(B);
                var A = y.get("tabID");
                if (z !== A) {
                    this.removeTab(A)
                }
            }
            if (this._tabContainer.getTabCount() === 1) {
                this._tabContainer.updateTab(z, {
                    allowClosableFlag: false
                })
            }
        },
        setActiveTenant: function(z) {
            var A = this.getOption("resources");
            if (UWA.is(A)) {
                A.active_tenant = z.value
            }
            var y = this.getActiveTab();
            if (UWA.is(y)) {
                y.setActiveTenant(z.value)
            }
        },
        getActiveTaggerProxy: function(z) {
            var y = this.getActiveTab();
            if (UWA.is(y)) {
                return y.getTaggerProxy()
            }
        },
        getActiveAdvSearchMgr: function() {
            var y = this.getActiveTab();
            if (UWA.is(y)) {
                return y.getAdvSearchMgr()
            }
        },
        _isCV5OpenUsage: function() {
            return "catiav5" === this.getOption("addinMode") && true === k.getOption("lockedapp")
        },
        _subscribeToKeyboardEvents: function() {
            if (!UWA.is(this._keydownEventHandler, "function")) {
                var y = this;
                this._keydownEventHandler = function(A) {
                    var z = y.getActiveTab();
                    if (UWA.is(z)) {
                        z.onKeyboardEvent(A)
                    }
                };
                UWA.Element.addEvent.call(document, "keydown", this._keydownEventHandler)
            }
        },
        _unsubscribeToKeyboardEvents: function() {
            if (UWA.is(this._keydownEventHandler, "function")) {
                UWA.Element.removeEvent.call(document, "keydown", this._keydownEventHandler);
                delete this._keydownEventHandler
            }
        },
        _onActivateInContextSearch: function(y) {
            var z = this;
            var B = function() {
                v.publish({
                    channel: z.getMessagingChannel(),
                    topic: "InContextInit",
                    data: {}
                })
            };
            var C = undefined;
            var A = UWA.is(this.getOption("addinMode"), "string") && (this.getOption("addinMode").length > 0);
            if (A) {
                B()
            } else {
                C = this.addTab({
                    tabTitle: ((UWA.is(y) && UWA.is(y.title, "string"))) ? y.title : "",
                    search_ux_options: {
                        widget_id: this.getOption("widget_id"),
                        resources: this.getOption("resources"),
                        css_view_class: "maximized",
                        in_apps_search: y,
                        events: {
                            onReady: function() {
                                B()
                            }
                        }
                    }
                })
            }
            this.hideTabBar();
            return C
        },
        _onDeactivateInContextSearch: function(A) {
            var y = this.getActiveTab();
            if (UWA.is(y)) {
                var B = y.getTabView();
                if (UWA.is(B)) {
                    this._searchcom_socket.dispatchEvent("onInContextSearchDeactivated", {
                        in_apps_search: B.getOption("in_apps_search")
                    })
                }
                var z = y.getTabID();
                this.removeTab(z)
            }
            this.showTabBar()
        },
        navhistorycontextifcreateaNewTab: function() {
            var A = false;
            if (t.getItem("integratedSearch") === false) {
                var A = false
            }
            var z = this;
            var y = z.getActiveTab();
            if (UWA.is(y)) {
                A = y.navhistorycontextifcreateaNewTab()
            }
            return (A)
        }
    });
    return g
});